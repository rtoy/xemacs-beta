## gdb init file for XEmacs              -*- ksh -*-
## This is the source for src/.gdbinit.  Edit it, and rerun configure.
## (Running config.status is not enough.)
## The generated file depends on src/config.h (currently only in one place).

## To insert comments that will remain in the generated file, we use the
## imake XCOMM convention.  Lines beginning with "XCOMM " exactly (no
## leading whitespace, one trailing ASCII space, case sensitive) will be
## transformed to gdb command file comments in the generated file.

XCOMM gdb init file for XEmacs
XCOMM AUTOMATICALLY GENERATED FROM etc/gdbinit.in BY configure -- DO NOT EDIT.
XCOMM See etc/gdbinit.in for licensing information and usage hints.
XCOMM Copyright (C) 1998 Free Software Foundation, Inc.
XCOMM Copyright (C) 2010 Ben Wing.

## This file is part of XEmacs.

## XEmacs is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by the
## Free Software Foundation, either version 3 of the License, or (at your
## option) any later version.

## XEmacs is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.

## You should have received a copy of the GNU General Public License
## along with XEmacs.  If not, see <http://www.gnu.org/licenses/>.

## Author: Martin Buchholz

## Other contributors you could ask for help: Ivan Golubev, Jerry James,
## Stephen Turnbull.

## Some useful commands for debugging emacs with gdb 4.16 or better.
##
## Since this file is called `.gdbinit', it will be read by gdb
## automatically when gdb is run in the build directory, which is where
## developers usually debug their xemacs.  You can also source this
## file from your ~/.gdbinit, if you like.
##
## Configure xemacs with --debug, and compile with -g.
##
## See also the question of the XEmacs FAQ, titled
## "How to Debug an XEmacs problem with a debugger".
##
## This can be used to debug XEmacs no matter how the following are
## specified:

## USE_UNION_TYPE

## (the above all have configure equivalents)

## Some functions defined here require a running process, but most
## don't.  Considerable effort has been expended to this end.

## See the dbg_ C support code in src/alloc.c that allows the functions
## defined in this file to work correctly.

#define NOT_C_CODE
#include "config.h"

set print union off
set print pretty off

#ifdef VDB_POSIX
handle SIGSEGV SIGBUS nostop noprint
#endif

set $Lisp_Type_Int = -2
set $Lisp_Type_Record = 0
set $Lisp_Type_Char = 2

define decode_object
  set $obj = (unsigned long) $arg0
  if $obj & 1
  ## It's an int
    set $val = $obj >> 1
    set $type = $Lisp_Type_Int
  else
    set $type = $obj & dbg_typemask
    if $type == $Lisp_Type_Char
      set $val = ($obj & dbg_valmask) >> dbg_gctypebits
    else
      ## It's a record pointer
      set $val = $obj
    end
  end

  if $type == $Lisp_Type_Record
    set $lheader = ((struct lrecord_header *) $val)
    set $lrecord_type = ($lheader->type)
    set $imp = ((struct lrecord_implementation *) lrecord_implementations_table[(int) $lrecord_type])
  else
    set $lrecord_type = -1
    set $lheader = -1
    set $imp = -1
  end
end

document decode_object
Usage: decode_object lisp_object
Extract implementation information from a Lisp Object.
Defines variables $val, $type and $imp.
end

define xint
decode_object $arg0
print ((long) $val)
end

define xtype
  decode_object $arg0
  if $type == $Lisp_Type_Int
    echo int\n
  else
  if $type == $Lisp_Type_Char
    echo char\n
  else
    printf "record type: %s\n", $imp->name
  end
  end
end

document xtype
Usage: xtype lisp_object
Print the Lisp type of a lisp object.
end

define lisp-shadows
  run -batch -vanilla -f list-load-path-shadows
end

document lisp-shadows
Usage: lisp-shadows
Run xemacs to check for lisp shadows
end

define environment-to-run-temacs
  unset env EMACSLOADPATH
  set env EMACSBOOTSTRAPLOADPATH=@srcdir@/../lisp/:@srcdir@/..
  set env EMACSBOOTSTRAPMODULEPATH=../modules/:..
end

define run-temacs
  environment-to-run-temacs
  run -nd -no-packages -batch -l @srcdir@/../lisp/loadup.el run-temacs -q
end

document run-temacs
Usage: run-temacs
Run temacs interactively, like xemacs.
Use this with debugging tools (like purify) that cannot deal with dumping,
or when temacs builds successfully, but xemacs does not.
end

define check-xemacs-arg
  run -vanilla -batch -l test-harness -f batch-test-emacs @srcdir@/../tests/$arg0
end

define check-xemacs
  if $argc == 0
    check-xemacs-arg automated
  else
    check-xemacs-arg automated/$arg0
  end
end

document check-xemacs
Usage: check-xemacs [FILE]
Run the test suite.  If no file given, run the whole suite, equivalent to
'make check'.  If a file given, run the suite only on the specified file.
end

define check-temacs-arg
  environment-to-run-temacs
  run -nd -no-packages -batch -l @srcdir@/../lisp/loadup.el run-temacs -q -batch -l test-harness -f batch-test-emacs @srcdir@/../tests/$arg0

define check-temacs
  if $argc == 0
    check-temacs-arg automated
  else
    check-temacs-arg automated/$arg0
  end
end

document check-temacs
Usage: check-temacs [FILE]
Run the test suite on temacs.  If no file given, run the whole suite,
equivalent to 'make check-temacs'.  If a file given, run the suite only on
the specified file.

Use this with debugging tools (like purify) that cannot deal with dumping,
or when temacs builds successfully, but xemacs does not.
end

define update-elc
  environment-to-run-temacs
  run -nd -no-packages -batch -l @srcdir@/../lisp/update-elc.el
end

document update-elc
Usage: update-elc
Run the core lisp byte compilation part of the build procedure.
Use when debugging temacs, not xemacs!
Use this when temacs builds successfully, but xemacs does not.
end

define update-elc-2
  environment-to-run-temacs
  run -no-packages -batch -no-autoloads -l update-elc-2.el -f batch-update-elc-2 @srcdir@/../lisp
end

document update-elc-2
Usage: update-elc-2
Run the post-dump core lisp byte compilation part of the build procedure.
end

define dmp
  environment-to-run-temacs
  run -nd -no-packages -batch -l @srcdir@/../lisp/loadup.el dump
end

document dmp
Usage: dmp
Run the dumping part of the build procedure.
Use when debugging temacs, not xemacs!
Use this when temacs builds successfully, but xemacs does not.
end

define ldp
  printf "%s", "Lisp => "
  call debug_print($arg0)
end

document ldp
Usage: ldp lisp_object
Print a Lisp Object value using the Lisp printer.
Requires a running xemacs process.
end

define lbt
call debug_backtrace()
end

document lbt
Usage: lbt
Print the current Lisp stack trace.
Requires a running xemacs process.
end


define leval
ldp Feval(Fcar(Fread_from_string(build_cistring($arg0),Qnil,Qnil)))
end

document leval
Usage: leval "SEXP"
Eval a lisp expression.
Requires a running xemacs process.

Example:
(gdb) leval "(+ 1 2)"
Lisp ==> 3
end


define wtype
print $arg0->core.widget_class->core_class.class_name
end

define xtname
print XrmQuarkToString(((Object)($arg0))->object.xrm_name)
end

## GDB's command language makes you want to ...

define pptype
  set $type_ptr = ($arg0 *) $val
  print $type_ptr
  print *$type_ptr
end

define pstructtype
  set $type_ptr = (struct $arg0 *) $val
  print $type_ptr
  print *$type_ptr
end

define pobj
  decode_object $arg0
  if $type == $Lisp_Type_Int
    printf "Integer: %d\n", $val
  else
  if $type == $Lisp_Type_Char
    if $val > 32 && $val < 128
      printf "Char: %c\n", $val
    else
      printf "Char: %d\n", $val
    end
  else
  if $lrecord_type == lrecord_type_symbol
    pptype Lisp_Symbol
    printf "Symbol name: %s\n", ((Lisp_String *)$type_ptr->name)->data_
  else
  if $lrecord_type == lrecord_type_vector
    pptype Lisp_Vector
    printf "Vector of length %d\n", $type_ptr->size
    ##print *($type_ptr->data) @ $type_ptr->size
  if $lrecord_type == lrecord_type_symbol_value_forward
    pstructtype symbol_value_forward
  else
  if $lrecord_type == lrecord_type_symbol_value_varalias
    pstructtype symbol_value_varalias
  else
  if $lrecord_type == lrecord_type_symbol_value_lisp_magic
    pstructtype symbol_value_lisp_magic
  else
  if $lrecord_type == lrecord_type_symbol_value_buffer_local
    pptype Lisp_Bigfloat
  else
  if $lrecord_type == lrecord_type_bignum
    pptype Lisp_Bignum
  else
  if $lrecord_type == lrecord_type_bit_vector
    pptype Lisp_Bit_Vector
  else
  if $lrecord_type == lrecord_type_buffer
    pstructtype buffer
  else
  if $lrecord_type == lrecord_type_case_table
    pptype Lisp_Case_Table
  else
  if $lrecord_type == lrecord_type_char_subtable
    pptype Lisp_Char_Subtable
  else
  if $lrecord_type == lrecord_type_char_table
    pptype Lisp_Char_Table
  else
  if $lrecord_type == lrecord_type_charset
    pptype Lisp_Charset
  else
  if $lrecord_type == lrecord_type_coding_system
    pptype Lisp_Coding_System
  else
  if $lrecord_type == lrecord_type_color_instance
    pptype Lisp_Color_Instance
  else
  if $lrecord_type == lrecord_type_command_builder
    pstructtype command_builder
  else
  if $lrecord_type == lrecord_type_compiled_function
    pptype Lisp_Compiled_Function
  else
  if $lrecord_type == lrecord_type_cons
    pptype Lisp_Cons
  else
  if $lrecord_type == lrecord_type_console
    pstructtype console
  else
  if $lrecord_type == lrecord_type_database
    pptype Lisp_Database
  else
  if $lrecord_type == lrecord_type_detection_state
    pstructtype detection_state
  else
  if $lrecord_type == lrecord_type_device
    pstructtype device
  else
  if $lrecord_type == lrecord_type_devmode
    pptype Lisp_Devmode
  else
  if $lrecord_type == lrecord_type_emacs_ffi
    pptype emacs_ffi_data
  else
  if $lrecord_type == lrecord_type_emacs_gtk_boxed
    pptype emacs_gtk_boxed_data
  else
  if $lrecord_type == lrecord_type_emacs_gtk_object
    pptype emacs_gtk_object_data
  else
  if $lrecord_type == lrecord_type_ephemeron
    pstructtype ephemeron
  else
  if $lrecord_type == lrecord_type_event
    pptype Lisp_Event
  else
  if $lrecord_type == lrecord_type_extent
    pstructtype extent
  else
  if $lrecord_type == lrecord_type_extent_auxiliary
    pstructtype extent_auxiliary
  else
  if $lrecord_type == lrecord_type_extent_info
    pstructtype extent_info
  else
  if $lrecord_type == lrecord_type_face
    pptype Lisp_Face
  else
  if $lrecord_type == lrecord_type_fc_config
    pstructtype fc_config
  else
  if $lrecord_type == lrecord_type_fc_pattern
    pstructtype fc_pattern
  else
  if $lrecord_type == lrecord_type_float
    pptype Lisp_Float
  else
  if $lrecord_type == lrecord_type_font_instance
    pptype Lisp_Font_Instance
  else
  if $lrecord_type == lrecord_type_frame
    pstructtype frame
  else
  if $lrecord_type == lrecord_type_glyph
    pptype Lisp_Glyph
  else
  if $lrecord_type == lrecord_type_gui_item
    pptype Lisp_Gui_Item
  else
  if $lrecord_type == lrecord_type_hash_table
    pptype Lisp_Hash_Table
  else
  if $lrecord_type == lrecord_type_image_instance
    pptype Lisp_Image_Instance
  else
  if $lrecord_type == lrecord_type_keymap
    pptype Lisp_Keymap
  else
#ifndef NEW_GC
  if $lrecord_type == lrecord_type_lcrecord_list
    pstructtype lcrecord_list
  else
#endif
  if $lrecord_type == lrecord_type_ldap
    pptype Lisp_LDAP
  else
  if $lrecord_type == lrecord_type_lstream
    pstructtype lstream
  else
  if $lrecord_type == lrecord_type_marker
    pptype Lisp_Marker
  else
  if $lrecord_type == lrecord_type_mswindows_dialog_id
    pstructtype mswindows_dialog_id
  else
  if $lrecord_type == lrecord_type_multiple_value
    pptype multiple_value
  else
  if $lrecord_type == lrecord_type_opaque
    pptype Lisp_Opaque
  else
  if $lrecord_type == lrecord_type_opaque_ptr
    pptype Lisp_Opaque_Ptr
  else
  if $lrecord_type == lrecord_type_pgconn
    pptype Lisp_PGconn
  else
  if $lrecord_type == lrecord_type_pgresult
    pptype Lisp_PGresult
  else
  if $lrecord_type == lrecord_type_precedence_array
    pstructtype precedence_array
  else
  if $lrecord_type == lrecord_type_process
    pptype Lisp_Process
  else
  if $lrecord_type == lrecord_type_range_table
    pptype Lisp_Range_Table
  else
  if $lrecord_type == lrecord_type_ratio
    pptype Lisp_Ratio
  else
  if $lrecord_type == lrecord_type_scrollbar_instance
    pstructtype scrollbar_instance
  else
  if $lrecord_type == lrecord_type_specifier
    pptype Lisp_Specifier
  else
  if $lrecord_type == lrecord_type_string
    pptype Lisp_String
  else
  if $lrecord_type == lrecord_type_subr
    pptype Lisp_Subr
  else
  if $lrecord_type == lrecord_type_timeout
    pptype Lisp_Timeout
  else
  if $lrecord_type == lrecord_type_toolbar_button
    pstructtype toolbar_button
  else
  if $lrecord_type == lrecord_type_tooltalk_message
    pptype Lisp_Tooltalk_Message
  else
  if $lrecord_type == lrecord_type_tooltalk_pattern
    pptype Lisp_Tooltalk_Pattern
  else
  if $lrecord_type == lrecord_type_weak_box
    pstructtype weak_box
  else
  if $lrecord_type == lrecord_type_weak_list
    pstructtype weak_list
  else
  if $lrecord_type == lrecord_type_window
    pstructtype window
  else
  if $lrecord_type == lrecord_type_window_mirror
    pstructtype window_mirror
  else
  if $lrecord_type == lrecord_type_buffer_text
    pptype Lisp_Buffer_Text
  else
  if $lrecord_type == lrecord_type_compiled_function_args
    pptype Lisp_Compiled_Function_Args
  else
  if $lrecord_type == lrecord_type_dynarr
    pptype Dynarr
  else
  if $lrecord_type == lrecord_type_expose_ignore
    pstructtype expose_ignore
  else
  if $lrecord_type == lrecord_type_extent_list
    pstructtype extent_list
  else
  if $lrecord_type == lrecord_type_extent_list_marker
    pstructtype extent_list_marker
  else
  if $lrecord_type == lrecord_type_face_cachel
    pptype Lisp_Face_Cachel
  else
  if $lrecord_type == lrecord_type_face_cachel_dynarr
    pptype face_cachel_dynarr
  else
  if $lrecord_type == lrecord_type_gap_array
    pstructtype gap_array
  else
  if $lrecord_type == lrecord_type_gap_array_marker
    pstructtype gap_array_marker
  else
  if $lrecord_type == lrecord_type_glyph_cachel
    pptype Lisp_Glyph_Cachel
  else
  if $lrecord_type == lrecord_type_glyph_cachel_dynarr
    pptype glyph_cachel_dynarr
  else
  if $lrecord_type == lrecord_type_gtk_device
    pptype Lisp_Gtk_Device
  else
  if $lrecord_type == lrecord_type_gtk_frame
    pptype Lisp_Gtk_Frame
  else
  if $lrecord_type == lrecord_type_hash_table_entry
    pptype Lisp_Hash_Table_Entry
  else
  if $lrecord_type == lrecord_type_msprinter_device
    pptype Lisp_Msprinter_Device
  else
  if $lrecord_type == lrecord_type_mswindows_device
    pptype Lisp_Mswindows_Device
  else
  if $lrecord_type == lrecord_type_mswindows_frame
    pptype Lisp_Mswindows_Frame
  else
  if $lrecord_type == lrecord_type_specifier_caching
    pstructtype specifier_caching
  else
  if $lrecord_type == lrecord_type_stack_of_extents
    pstructtype stack_of_extents
  else
  if $lrecord_type == lrecord_type_stream_console
    pptype Lisp_Stream_Console
  else
  if $lrecord_type == lrecord_type_string_direct_data
    pptype Lisp_String_Direct_Data
  else
  if $lrecord_type == lrecord_type_string_indirect_data
    pptype Lisp_String_Indirect_Data
  else
  if $lrecord_type == lrecord_type_syntax_cache
    pptype Lisp_Syntax_Cache
  else
  if $lrecord_type == lrecord_type_tty_color_instance_data
    pstructtype tty_color_instance_data
  else
  if $lrecord_type == lrecord_type_tty_console
    pptype Lisp_Tty_Console
  else
  if $lrecord_type == lrecord_type_tty_device
    pptype Lisp_Tty_Device
  else
  if $lrecord_type == lrecord_type_tty_font_instance_data
    pstructtype tty_font_instance_data
  else
  if $lrecord_type == lrecord_type_x_device
    pptype Lisp_X_Device
  else
  if $lrecord_type == lrecord_type_x_frame
    pptype Lisp_X_Frame
  else
    echo Unknown Lisp Object type\n
    print $lrecord_type
    print $arg0
  ## Barf, gag, retch
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
#ifndef NEW_GC
  end
#endif
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  ## Repeat after me... gdb sux, gdb sux, gdb sux...
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  ## Are we having fun yet??
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
  end
end

document pobj
Usage: pobj lisp_object
Print the internal C representation of a Lisp Object.
end

## -------------------------------------------------------------
## functions to test the debugging support itself.
## If you change this file, make sure the following still work...
## -------------------------------------------------------------
define test_xtype
  printf "Vemacs_major_version: "
  xtype Vemacs_major_version
  printf "Vhelp_char: "
  xtype Vhelp_char
  printf "Qnil: "
  xtype Qnil
  printf "Qunbound: "
  xtype Qunbound
  printf "Vobarray: "
  xtype Vobarray
  printf "Vall_weak_lists: "
  xtype Vall_weak_lists
  printf "Vxemacs_codename: "
  xtype Vxemacs_codename
end

define test_pobj
  printf "Vemacs_major_version: "
  pobj Vemacs_major_version
  printf "Vhelp_char: "
  pobj Vhelp_char
  printf "Qnil: "
  pobj Qnil
  printf "Qunbound: "
  pobj Qunbound
  printf "Vobarray: "
  pobj Vobarray
  printf "Vall_weak_lists: "
  pobj Vall_weak_lists
  printf "Vxemacs_codename: "
  pobj Vxemacs_codename
end

