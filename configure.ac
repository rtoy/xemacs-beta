dnl XEmacs config script for autoconf 2.5.
dnl -------------------------------------------------------------------------
dnl Overrides of standard autoconf macros.

# AC_LANG(C)
# ----------
# CFLAGS is not in ac_cpp because -g, -O, etc. are not valid cpp options.
m4_define([AC_LANG(C)],
[ac_ext=c
xe_cppflags='$CPPFLAGS $c_switch_site $c_switch_machine $c_switch_system $c_switch_x_site $X_CFLAGS'
xe_ldflags='$LDFLAGS $ld_switch_site $ld_switch_machine $ld_switch_system $ld_switch_x_site $ld_switch_run'
xe_libs='$ld_call_shared $xe_check_libs $X_EXTRA_LIBS $libs_x $libs_gtk $X_PRE_LIBS $LIBS $libs_machine $libs_system $libs_standard'
ac_cpp='$CPP '"$xe_cppflags"
ac_compile='$CC -c $CFLAGS '"$xe_cppflags"' conftest.$ac_ext >&AS_MESSAGE_LOG_FD'
ac_link='$CC -o conftest$ac_exeext $CFLAGS '"$xe_cppflags $xe_ldflags"' conftest.$ac_ext '"$xe_libs"' >&AS_MESSAGE_LOG_FD'
ac_compiler_gnu=$ac_cv_c_compiler_gnu
])
# AC_LANG(C++)
# ----------
# Similar to AC_LANG(C) but we use XEMACS_CC, which may be g++.
m4_define([AC_LANG(C++)],
[ac_ext=c
xe_cppflags='$CPPFLAGS $c_switch_site $c_switch_machine $c_switch_system $c_switch_x_site $X_CFLAGS'
xe_ldflags='$LDFLAGS $ld_switch_site $ld_switch_machine $ld_switch_system $ld_switch_x_site $ld_switch_run'
xe_libs='$ld_call_shared $xe_check_libs $X_EXTRA_LIBS $libs_x $libs_gtk $X_PRE_LIBS $LIBS $libs_machine $libs_system $libs_standard'
ac_cpp='$CPP '"$xe_cppflags"
ac_compile='$XEMACS_CC -c $CFLAGS '"$xe_cppflags"' conftest.$ac_ext >&AS_MESSAGE_LOG_FD'
ac_link='$XEMACS_CC -o conftest$ac_exeext $CFLAGS '"$xe_cppflags $xe_ldflags"' conftest.$ac_ext '"$xe_libs"' >&AS_MESSAGE_LOG_FD'
ac_compiler_gnu=$ac_cv_c_compiler_gnu
])
dnl
dnl -------------------------------------------------------------------------
dnl Autoconf startup.
dnl
dnl Due to a dependence on the implementation of certain internal autoconf
dnl macros, die if any version other than 2.59 is used.
AC_PREREQ(2.59)dnl
AC_INIT([XEmacs],[21.5],[xemacs-beta@xemacs.org])dnl
AC_CONFIG_SRCDIR(src/lisp.h)dnl
dnl
dnl -------------------------------------------------------------------------
dnl Local copyright notices.

AC_COPYRIGHT(
[Configuration script for XEmacs.  Largely divergent from FSF.
Guess values for system-dependent variables and create Makefiles.

Copyright (C) 1992-1999, 2001-2006 Free Software Foundation, Inc.
Copyright (C) 1993, 1994, 1995 Board of Trustees, University of Illinois.
Copyright (C) 1996, 1997 Sun Microsystems, Inc.
Copyright (C) 1995, 1996, 2002, 2003, 2004 Ben Wing.
Copyright (C) 2000, 2001 Martin Buchholz.
Copyright (C) 1998, 1999 J. Kean Johnston.
Copyright (C) 2005 Malcolm Purvis

Don't edit this script!
This script was automatically generated by the `autoconf' program
from the file `./configure.ac'.  To rebuild it, execute the command:

	autoconf

in the this directory.  You must have autoconf version 2.59.

This file is part of XEmacs.

XEmacs is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation, either version 3 of the License, or (at your
option) any later version.

XEmacs is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with XEmacs.  If not, see <http://www.gnu.org/licenses/>.

For usage, run `./configure --help'
For more detailed information on building and installing XEmacs,
read the file `INSTALL'.

If configure succeeds, it leaves its status in config.status.
A log of configuration tests can be found in config.log.
If configure fails after disturbing the status quo,
	config.status is removed.
])

dnl -------------------------------------------------------------------------
dnl Program name (sanitize $0)
dnl Remove any more than one leading "." element from the path name.
dnl config.status prepends another "./" at each use.  This confuses
dnl move-if-change.
dnl
dnl Unfortunately, some seds (Ultrix's) don't allow you to apply * to a
dnl \( \) group.  Bleah.  Remove the level config.status adds, at least.
dnl
dnl If there's reason to prefer $0 over this, make sure you fix all the
dnl uses in this script!!
progname="`echo $0 | sed 's:^\./\./:\./:'`"
dnl
dnl -------------------------------------------------------------------------
dnl Local macros
dnl
define([USAGE_ERROR],
[(echo "$progname: Usage error:"
echo " " $1
echo "  Use \`$progname --help' to show usage.") >&2 && exit 1])dnl
dnl
dnl CPP_to_sh(CPP_SYMBOL, SH_VAR, DEFAULT_VALUE)
define([CPP_to_sh],
[[#]ifndef [$1]
[#]define [$1]ifelse([$3],,, [ "$3"])
[#]endif
configure___ [$2]=[$1]
])dnl CPP_to_sh
dnl
dnl CPP_boolean_to_sh(CPP_SYMBOL, SH_VAR)
define([CPP_boolean_to_sh],
[[#]ifdef [$1]
configure___ [$2]=yes
[#]else
configure___ [$2]=no
[#]endif
])dnl CPP_boolean_to_sh
dnl
define(COLON_TO_SPACE_WARN,
  [case "$[$1]" in *:* [)] dnl
case "$opsys" in *cygwin* [)]
  echo "  WARNING: Paths containing spaces will be misinterpreted." ;;
esac
[$1]="`echo '' $[$1] | sed -e 's/^ //' -e 's/:/ /g'`";; esac])dnl
dnl
dnl PRINT_VAR(var var ...)  prints values of shell variables
define([PRINT_VAR],[for var in patsubst([$1],[[
]+],[ ]); do eval "echo \"$var = '\$$var'\""; done])dnl
dnl
dnl XE_ADD_OBJS(foo.o)
define([XE_ADD_OBJS],
[extra_objs="$extra_objs [$1]" && dnl
 if test "$verbose" = "yes"; then
   echo "    xemacs will be linked with \"[$1]\""
 fi])dnl XE_ADD_OBJS
dnl
dnl XE_APPEND(value, varname)
define([XE_APPEND],
[[$2]="$[$2] [$1]" && dnl
 if test "$verbose" = "yes"; then echo "    Appending \"[$1]\" to \$[$2]"; fi])dnl
dnl
dnl XE_PREPEND(value, varname)
define([XE_PREPEND],
[[$2]="[$1] $[$2]" && dnl
 if test "$verbose" = "yes"; then echo "    Prepending \"[$1]\" to \$[$2]"; fi])dnl
dnl
dnl XE_DIE(message)
define([XE_DIE], [{ echo "Error:" $1 >&2; exit 1; }])dnl
dnl
dnl XE_CHECK_FEATURE_DEPENDENCY(feature1, feature2)
define([XE_CHECK_FEATURE_DEPENDENCY],
[if test "$with_[$1] $with_[$2]" = "yes no"; then
  USAGE_ERROR("--with-[$1] requires --with-[$2]")
elif test "$with_[$2]" = "no" ; then with_[$1]=no
elif test "$with_[$1]" = "yes"; then with_[$2]=yes
fi
])dnl
dnl
dnl XE_STRIP_4TH_COMPONENT(var)
dnl Changes i986-pc-linux-gnu to i986-pc-linux, as God (not RMS) intended.
define([XE_STRIP_4TH_COMPONENT],
[$1=`echo "$$1" | sed '[s/^\([^-][^-]*-[^-][^-]*-[^-][^-]*\)-.*$/\1/]'`])dnl
dnl
dnl Do our best to deal with automounter brokenness
dnl CANONICALIZE_PATH(varname)
define([CANONICALIZE_PATH],
[if test -d "/net"; then
  if test -d "/tmp_mnt/net"; then tdir="tmp_mnt/net"; else tdir="tmp_mnt"; fi
  $1=`echo "[$]$1" | \
   sed -e "s|^${tdir}/|/net/|" -e "s|^/a/|/net/|" -e "s|^/amd/|/net/|"`
fi])dnl
dnl
dnl XE_PROTECT_LINKER_FLAGS(shell_var)
define([XE_PROTECT_LINKER_FLAGS], [
if test "$GCC" = "yes"; then
  set x $[$1]; shift; [$1]=""
  while test -n "[$]1"; do
    case [$]1 in
      -L  | -l  | -u               ) [$1]="$[$1] [$]1 [$]2"; shift ;;
      -L* | -l* | -u* | -Wl* | -pg ) [$1]="$[$1] [$]1" ;;
      -Xlinker* ) ;;
      * ) [$1]="$[$1] -Xlinker [$]1" ;;
    esac
    shift
  done
fi])dnl
dnl
dnl Allow use of either ":" or spaces for lists of directories
define(COLON_TO_SPACE,
  [case "$[$1]" in *:* [)] [$1]="`echo '' $[$1] | sed -e 's/^ //' -e 's/:/ /g'`";; esac])dnl
dnl
dnl XE_ADD_RUNPATH_DIR(directory)
define([XE_ADD_RUNPATH_DIR],[{
xe_runpath_dir=$1
dnl PRINT_VAR(ld_switch_site ld_switch_x_site runpath xe_runpath_dir LD_RUN_PATH xe_ldflags)
  test "$xe_runpath_dir" != "/lib"     -a \
	"$xe_runpath_dir" != "/usr/lib" -a \
	-n "`ls ${xe_runpath_dir}/*.s[[ol]] 2>/dev/null`" && \
  eval "$xe_add_unique_runpath_dir"
}])dnl
dnl
dnl XE_COMPUTE_RUNPATH()
define([XE_COMPUTE_RUNPATH],[
if test "$add_runtime_path" = "yes" -a -n "$dash_r"; then
  dnl Remove runtime paths from current ld switches
  ld_switch_site=`echo   '' $ld_switch_site   | sed -e 's:^ ::' -e "s/$dash_r[[^ ]]*//g"`
  ld_switch_x_site=`echo '' $ld_switch_x_site | sed -e 's:^ ::' -e "s/$dash_r[[^ ]]*//g"`
  dnl PRINT_VAR(ld_switch_site ld_switch_x_site)

  dnl Fix up Runtime path
  dnl If LD_RUN_PATH is set in environment, use that.
  dnl In this case, assume user has set the right value.
  runpath="" runpath_dirs=""
  if test -n "$LD_RUN_PATH"; then
    runpath="$LD_RUN_PATH"
  elif test "$GCC" = "yes"; then
    dnl Compute runpath from gcc's -v output
    ld_switch_run_save="$ld_switch_run"; ld_switch_run=""
    echo "int main(int argc, char **argv) {return 0;}" > conftest.c
    xe_runpath_link='${CC-cc} -o conftest -v $CFLAGS '"$xe_ldflags"' conftest.$ac_ext 2>&1 1>/dev/null'
    for arg in `eval "$xe_runpath_link" | grep ' -L'`; do
      case "$arg" in P,* | -L* | -R* )
        for dir in `echo '' "$arg" | sed -e 's:^ ::' -e 's/^..//' -e 'y/:/ /'`; do
          XE_ADD_RUNPATH_DIR("$dir")
        done ;;
      esac
    done
    ld_switch_run="$ld_switch_run_save"
    rm -f conftest*
  else
    dnl Add all directories with .so files to runpath
    for arg in $ld_switch_site $ld_switch_x_site; do
      case "$arg" in -L*) XE_ADD_RUNPATH_DIR(`echo '' "$arg" | sed -e 's:^ ::' -e 's/^-L//'`);; esac
    done
    dnl Sometimes /opt/SUNWdt/lib is the only installed Motif available
    dnl #### this test always fails here as need_motif is null
    if test "$opsys $need_motif" = "sol2 yes"; then
      xe_runpath_dir="/opt/SUNWdt/lib";
      eval "$xe_add_unique_runpath_dir";
    fi
  fi dnl Compute $runpath

  if test -n "$runpath"; then
    ld_switch_run="${dash_r}${runpath}"
    XE_PROTECT_LINKER_FLAGS(ld_switch_run)
    test "$verbose" = "yes" && echo "Setting runpath to $runpath"
  fi
fi
])dnl
dnl
dnl The construct foo=`echo $w1 $w2 $w3` fails on some systems if $w1 = -e or -n
dnl So we use the following instead.
dnl #### Other macros save the computed value in the 2nd arg, but
dnl #### XE_SPACE returns the value in the first arg.
dnl XE_SPACE(var, words)
define([XE_SPACE],[
T=""
for W in $2; do if test -z "$T"; then T="$W"; else T="$T $W"; fi; done
$1="$T"
])dnl XE_SPACE
dnl XE_EXPAND_VARIABLE(original,expanded)
define([XE_EXPAND_VARIABLE],
[$2=[$]$1
while true; do
  case "[$]$2" in
    *\[$]* ) eval "$2=[$]$2" ;;
    *) break ;;
  esac
done])dnl XE_EXPAND_VARIABLE
dnl Autoconf 2.59 and 2.60 have slightly different versions of m4_cdr that
dnl return different values for an empty list.  XE_CDR is a copy of the 2.60
dnl version which will be used with both versions.
define([XE_CDR],
[m4_if([$#], 0, [m4_fatal([$0: cannot be called without arguments])],
       [$#], 1, [],
       [m4_dquote(m4_shift($@))])])dnl
dnl
dnl XE_MERGED_ARG(FEATURE, HELP-STRING, [ACTION-IF-TRUE], [ACTION-IF-FALSE])
dnl ------------------------------------------------------------------------
dnl
dnl Arguments that can be specified with either --enable or --with.  The
dnl majority of  XEmacs arguments do not fit neatly into the division between
dnl --enable and --with, so allow those to be specified by either argument.
dnl The value is stored in both enable_FEATURE and with_FEATURE.
AC_DEFUN([XE_MERGED_ARG],
[m4_divert_once([HELP_ENABLE], [[
Optional Features:
  --with-FEATURE[=ARG]    include FEATURE [ARG=yes]
  --enable-FEATURE[=ARG]  alias for --with-FEATURE
  --without-FEATURE       do not use FEATURE (same as --with-FEATURE=no)
  --disable-FEATURE       alias for --without-FEATURE]])dnl
m4_divert_once([HELP_ENABLE], m4_bpatsubst([[$2]],[--enable\([^ ]+\) ],[--with\1   ]))dnl
dnl Register both forms with the option checking list.
dnl Options are only checked with autoconf > 2.61.
m4_append_uniq([_AC_USER_OPTS], [enable_]m4_bpatsubst([$1], -, _), [
])dnl
m4_append_uniq([_AC_USER_OPTS], [with_]m4_bpatsubst([$1], -, _), [
])dnl
# If --with-$1 or --without-$1 were given then copy the value to the
# equivalent enable_$1 variable.
if test "[${with_]m4_bpatsubst([$1], -, _)+set}" = set; then
  [enable_]m4_bpatsubst([$1], -, _)="[$with_]m4_bpatsubst([$1], -, _)"
fi;
# If -enable-$1 or --disable-$1 were given then copy the value to the
# equivalent with_$1 variable.
if test "[${enable_]m4_bpatsubst([$1], -, _)+set}" = set; then
  [with_]m4_bpatsubst([$1], -, _)="[$enable_]m4_bpatsubst([$1], -, _)"
fi;
# Check whether --with-$1 or --without-$1 was given.
if test "[${with_]m4_bpatsubst([$1], -, _)+set}" = set; then
  enableval="[$with_]m4_bpatsubst([$1], -, _)"
  withval="[$with_]m4_bpatsubst([$1], -, _)"
  $3
m4_ifvaln([$4], [else
  $4])dnl
fi; dnl
])dnl XE_MERGED_ARG
dnl
dnl XE_HELP_SUBSECTION(HEADING)
dnl --------------------------
dnl
dnl Add subsection headings to the help text for XE_MERGED_ARG options.
dnl
AC_DEFUN([XE_HELP_SUBSECTION],
[m4_divert_once([HELP_ENABLE], [[
Optional Features:
  --with-FEATURE[=ARG]    include FEATURE [ARG=yes]
  --enable-FEATURE[=ARG]  alias for --with-FEATURE
  --without-FEATURE       do not use FEATURE (same as --with-FEATURE=no)
  --disable-FEATURE       alias for --without-FEATURE]])dnl
dnl NOTE: The next eol adds a blank line before the heading.
m4_divert_once([HELP_ENABLE], [[
$1]])dnl
dnl Add an underscore
dnl NOTE: The next eol adds a blank line after the underscore.
m4_divert_text([HELP_ENABLE], patsubst([$1], [.], [-])
)])dnl
dnl
dnl XEmacs keyword option support
dnl =============================
dnl 
dnl A "keyword" option is one that accepts one of a number of pre-defined
dnl values.  For example --with-mail-locking=flock.
dnl The descriptions below provide prototypes and little more.
dnl
dnl For more information,
dnl   (Info-goto-node "(internals)The configure Script")
dnl To edit the documentation,
dnl   (progn (find-file "man/internals/internals.texi"))
dnl and search for "@node The configure Script".
dnl
dnl XE_PARSE_KEYWORD_OPTION(prefix, cmdline-flag)
dnl ---------------------------------------------
dnl
dnl Internal macro to parse the option values.  If an undeclared option is
dnl found then an error is generated.
dnl
define([XE_PARSE_KEYWORD_OPTION],
[_[$1]_bogus=yes
 for x in XE_KEYWORD_LIST ; do
   if test $x = $with_[$1] ; then
	_[$1]_bogus=no
   fi
 done
 if test "$_[$1]_bogus" = "yes" ; then
	USAGE_ERROR(["The [$2] option must have one of these values: m4_translit(XE_KEYWORD_VALUES,[:],[,])."])
 fi
unset _[$1]_bogus
undefine([XE_KEYWORD_LIST])dnl
undefine([XE_KEYWORD_VALUES])])dnl
dnl
dnl XE_KEYWORD(keyword)
dnl --------------------------------
dnl
dnl
define([XE_KEYWORD],
[m4_append([XE_KEYWORD_LIST],[$1],[ ])dnl
dnl Separate with a ':' instead of a ',' (see the parsing code above) to avoid
dnl confusion with macro parameter lists.
m4_append([XE_KEYWORD_VALUES],[\`$1'],[:])dnl
])dnl
dnl
dnl XE_KEYWORD_ARG(PACKAGE, HELP-STRING, ACTION-IF-TRUE, ACTION-IF-FALSE,
dnl                     [XE_KEYWORD(keyword), ....])
dnl --------------------------------------------------------------------------
dnl
dnl Expanded version of XE_MERGED_ARG for keyword options.  All the parameters
dnl are required.
dnl
define([XE_KEYWORD_ARG],
[m4_map([XE_KEYWORD],m4_shiftn(4, $@))
XE_MERGED_ARG([$1],[$2],
[XE_PARSE_KEYWORD_OPTION(patsubst([$1], -, _), [--with-$1])
$3
],[$4])])dnl
dnl
dnl XEmacs complex option support
dnl =============================
dnl
dnl A "complex option" is one that takes a number of related values.
dnl For example, we might use "--with-xft=all,nomenubars" for compatibility
dnl with XFontSet i18n of menubars.  (Silly, Xft looks much better than XFS.)
dnl
dnl The descriptions below provide prototypes and little more.
dnl For more information,
dnl   (Info-goto-node "(internals)The configure Script")
dnl To edit the documentation,
dnl   (progn (find-file "man/internals/internals.texi"))
dnl and search for "@node The configure Script".
dnl
dnl XE_EXPAND_COMPLEX_OPTION(prefix, component, yesno)
dnl ---------------------------------------------------
dnl
dnl Internal macro create the option's shell variable containing the default
dnl value and to note the values in an option list.
dnl
define([XE_EXPAND_COMPLEX_OPTION],
[_[$1]_[$2]_default=[$3]
m4_append([XE_COMPONENT_LIST],[$2],[ ])dnl
dnl Separate with a ':' instead of a ',' (see <prefix>_default below) to avoid
dnl confusion with macro parameter lists.
m4_append([XE_COMPONENT_DEFAULT],[m4_if([$3],no,no)[$2]],[:])dnl
])dnl
dnl
dnl XE_EXPAND_COMPLEX_OPTIONS(prefix, option_list)
dnl ----------------------------------------------
dnl
dnl Internal macro to recursively expand all the options in the option list.
dnl
dnl m4_fst disappeared without a trace in autoconf 2.62
m4_define([xe_fst], [$1])dnl
define([XE_EXPAND_COMPLEX_OPTIONS],
[m4_if([$2], [], [],
       [XE_EXPAND_COMPLEX_OPTION([$1], xe_fst($2))[]dnl
XE_EXPAND_COMPLEX_OPTIONS([$1], XE_CDR($2))])])dnl
dnl
dnl XE_INIT_COMPLEX_OPTION(prefix, option_list)
dnl -------------------------------------------
dnl
dnl Internal macro to initialise the complex option shell variables.
dnl Variables of the form <prefix>_<option> contain the default value for that
dnl option.  <prefix>_types contains a space-separated list of all the options
dnl and <prefix>_default contains a comma-separated list of all the default
dnl values.
dnl
define([XE_INIT_COMPLEX_OPTION],
[_[$1]_notfirst=""
dnl
XE_EXPAND_COMPLEX_OPTIONS($@)dnl
_[$1]_types="XE_COMPONENT_LIST"
_[$1]_default="m4_translit(XE_COMPONENT_DEFAULT,[:],[,])"
dnl Undefine these macros so that they can be reused by later complex
dnl options.
undefine([XE_COMPONENT_LIST])dnl
undefine([XE_COMPONENT_DEFAULT])dnl
])dnl
dnl
dnl XE_PARSE_COMPLEX_OPTION(prefix, cmdline-flag)
dnl ---------------------------------------------
dnl
dnl Internal macro to parse the option values.  If an undeclared option is
dnl found then an error is generated.  Because something has been supplied on
dnl the command line initialise all the complex options to 'no' rather than
dnl the default.  In this way --enable-complex=foo will give the expected
dnl value (no) for bar.
dnl
dnl #### I think we should add a couple more features.
dnl First, at the end of XE_PARSE_COMPLEX_OPTION check for contradictory args,
dnl specifically if `all' is specified but the options are all individually
dnl disabled, or if `none' is specified but the options are all individually
dnl enabled, we should _warn_ about this situation.  
dnl Second, we should provide an XE_VALIDATE_COMPLEX_OPTION macro to be used
dnl at the end of detection.  If any feature is `yes' but we don't have it,
dnl then we should XE_DIE.
dnl
define([XE_PARSE_COMPLEX_OPTION],
[dnl Initialize variables for COMPLEX_OPTION [$1].  Leading underscore or
dnl  single letter variables are internal to the XE_PARSE_COMPLEX_OPTION macro.
_[$1]_all_default=""
_require_[$1]=""
dnl check first arg for default spec
case "$with_[$1]" in
    n | no | non | none )         _[$1]_all_default=no ;;
    n,* | no,* | non,* | none,* ) _[$1]_all_default=no ;;
    a | al | all | both )         _[$1]_all_default=yes ;;
    a,* | al,* | all,* | both,* ) _[$1]_all_default=yes ;;
    y | yes )                     _require_[$1]=yes ;;
esac
dnl if first arg was a default spec, trim it
if test -n "$_[$1]_all_default$_require_[$1]"; then
    _with_[$1]_args=`echo $with_[$1] | sed -e 's/^[[a-z]]*\(,\(.*\)\)\{0,1\}$/\2/'`
else
    _with_[$1]_args=$with_[$1]
fi
dnl set default for each type
for y in $_[$1]_types; do
    if test -n "$_[$1]_all_default" ; then
        eval "with_[$1]_${y}=$_[$1]_all_default"
    else
	eval "with_[$1]_$y=\$_[$1]_${y}_default"
    fi
done
dnl parse the command line arg and set types found appropriately
for x in `echo "$_with_[$1]_args" | sed -e 's/,/ /g'` ; do
    _[$1]_found=""
    for y in $_[$1]_types; do
        if test "$x" = "$y"; then
            _[$1]_found=yes
            eval "with_[$1]_$y=yes"
        elif test "$x" = "no$y"; then
            _[$1]_found=yes
            eval "with_[$1]_$y=no"
        fi
    done
    test -z "$_[$1]_found" && \
	USAGE_ERROR(["\
Invalid type list supplied.  Valid types for the [$2] option are:
	$_[$1]_types.
  A prefix of \"no\" (eg, \"notype\" for \"type\") turns a type off.
  Types not explicitly specified or negated take their defaults.
  The list of defaults is \"$_[$1]_default\".  Prefixing \`all' or
  \`none' to the list sets all defaults to on and off respectively.
  \`yes' as the sole argument is equivalent to omitting the argument."])
done
dnl copy values to enable_FEATURE_TYPE.  Cleanup default vars.
for y in $_[$1]_types; do
  eval "enable_[$1]_$y=\$with_[$1]_$y"
  unset _[$1]_${y}_default
done
dnl clean up
unset _[$1]_types _[$1]_default _[$1]_all_default _[$1]_use_defaults
unset _with_[$1]_args _[$1]_found x y _require_[$1]
])dnl
dnl
dnl XE_COMPLEX_OPTION(option, yesno)
dnl --------------------------------
dnl
dnl Declare a complex option and its default value.  The value MUST be either
dnl yes or no or "" (which means maybe).
dnl
define([XE_COMPLEX_OPTION],[[$1,$2]])
dnl
dnl XE_COMPLEX_OPTION_HELP_STRING(flag, long, short, components, libraries)
dnl -----------------------------------------------------------------------
dnl Boilerplate help string for complex options.
dnl #### This doesn't read so well for alternative libraries like sound.
dnl
define([XE_COMPLEX_OPTION_HELP_STRING],
[AS_HELP_STRING([$1],[Compile with support for $2. Components that can use
$3 are $4. Prefix component with `no' to disable its use of $3. Requires
$5 support. Default is $6.])])dnl
dnl
dnl XE_COMPLEX_ARG(PACKAGE, HELP-STRING, ACTION-IF-TRUE, ACTION-IF-FALSE,
dnl                     [XE_COMPLEX_OPTION(a,yes), ....])
dnl --------------------------------------------------------------------------
dnl
dnl Expanded version of XE_MERGED_ARG for complex options.  All the parameters
dnl are required.
dnl
define([XE_COMPLEX_ARG],
[XE_INIT_COMPLEX_OPTION(patsubst([$1], -, _), m4_shiftn(4, $@))
XE_MERGED_ARG([$1],[$2],
[XE_PARSE_COMPLEX_OPTION(patsubst([$1], -, _), [--with-$1])
$3
],[
# set default for each type
for y in [$_]patsubst([$1], -, _)[_types]; do
    eval "[with_]patsubst([$1], -, _)[_$y]=[\$_]patsubst([$1], -, _)[_${y}_default]"
    eval "[enable_]patsubst([$1], -, _)[_$y]=[\$_]patsubst([$1], -, _)[_${y}_default]"
    unset [_]patsubst([$1], -, _)[_${y}_default]
done
$4])])dnl
dnl
dnl -------------------------------------------------------------------------
XE_APPEND(lib-src, MAKE_SUBDIR)
XE_APPEND(lib-src, INSTALL_ARCH_DEP_SUBDIR)
with_dragndrop_default="no"
dnl -------------------------------------------------------------------------
dnl Command line argument processing.
dnl Note that AS_HELP_STRING compresses whitespace, wraps, and indents the
dnl string to fit the --help display; there's no need to preformat.
dnl
dnl I think these will be caught by autoconf internal checks,
dnl only --with-* are unchecked
dnl --external-widget         --with-external-widget
dnl --native-sound-lib=LIB    --with-native-sound-lib
dnl --mail-locking=TYPE       --with-mail-locking
dnl --rel-alloc               --with-rel-alloc
dnl --use-number-lib          --with-bignum
dnl --debug                   --with-debug
dnl --error-checking          --with-error-checking
dnl --memory-usage-stats      --with-memory-usage-stats
dnl --quick-build             --with-quick-build
dnl --use-union-type          --with-union-type
dnl --pdump                   --with-pdump
dnl --use-kkcc                --with-kkcc
dnl
dnl parse flags
XE_HELP_SUBSECTION([Compilation options])
XE_MERGED_ARG([compiler],
	AS_HELP_STRING([--with-compiler],[C compiler to use]),
	[], [])
XE_MERGED_ARG([xemacs-compiler],
	AS_HELP_STRING([--with-xemacs-compiler],
	[compiler to use to compile just the xemacs executable and C modules.
			If you want to compile XEmacs as C++, use e.g.
			`--with-xemacs-compiler=g++'.  This turns on a lot of
			additional error-checking.]),
	[], [])
XE_MERGED_ARG([gcc],
	AS_HELP_STRING([--with-gcc],[Use GCC to compile XEmacs.]),
	[], [])
XE_MERGED_ARG([cflags],
	AS_HELP_STRING([--with-cflags=FLAGS],
	[Compiler flags.  These flags will be placed after any flags inserted for warnings, debugging or optimization; setting this does not disable the insertion of those flags.  Use configure settings such as `--with-optimization=no' or `with-debug=no' to turn them off, or override them with `--with-cflags-optimization', `--with-cflags-debugging', or `with-cflags-warning'.]),
	[], [])
XE_MERGED_ARG([cflags-warning],
	AS_HELP_STRING([--with-cflags-warning=FLAGS],[Override compiler flags used to control warnings.
                        Normally, don't set this, as XEmacs already turns on
                        the maximum safe warning level.]),
	[], [])
XE_MERGED_ARG([optimization],
	AS_HELP_STRING([--with-optimization],[Control whether compilation is optimized.  By default, optimization is on in release versions and off in beta versions, since it can interfere with proper stack backtraces.]),
	[], [])
XE_MERGED_ARG([cflags-optimization],
	AS_HELP_STRING([--with-cflags-optimization=FLAGS],
	[Override compiler flags used to control optimization.  If blank, forces no optimization; if non-blank, forces optimization.  Normally, don't set this; XEmacs automatically sets the maximum safe optimization flags appropriate for the compiler being invoked.  If you just want to turn optimization on or off, use `with-optimization' instead.]),
	[], [])
XE_MERGED_ARG([cflags-debugging],
	AS_HELP_STRING([--with-cflags-debugging=FLAGS],
	[Override compiler flags used to add debugging information to the executable.  Normally, debugging information is added whenever possible (i.e. unless optimization is turned on and the compiler does not permit debugging and optimization simultaneously).]),
	[], [])
XE_MERGED_ARG([cpp],
	AS_HELP_STRING([--with-cpp],[C preprocessor to use (e.g. /usr/ccs/lib/cpp or cc -E)]),
	[CPP="$with_cpp"], [])
XE_MERGED_ARG([cppflags],
	AS_HELP_STRING([--with-cppflags],[C preprocessor flags (e.g. -I/foo or -Dfoo=bar)]),
	[CPPFLAGS="$with_cppflags"], [])
XE_MERGED_ARG([libs=LIBS],
	AS_HELP_STRING([--with-libs],[Additional libraries (e.g. -lfoo)]),
	[LIBS="$with_libs"], [])
XE_MERGED_ARG([ldflags=FLAGS],
	AS_HELP_STRING([--with-ldflags],[Additional linker flags (e.g. -L/foo)]),
	[LDFLAGS="$with_ldflags"], [])
XE_MERGED_ARG([site-includes],
	AS_HELP_STRING([--with-site-includes=PATHS],[Prepend to include search path.]),
	[], [])
XE_MERGED_ARG([site-libraries],
	AS_HELP_STRING([--with-site-libraries=PATHS],[Prepend to library search path.]),
	[], [])
XE_MERGED_ARG([site-prefixes],
	AS_HELP_STRING([--with-site-prefixes=PATHS],[Prepend to include and library search paths, with /include and /lib added.  Comes after site-includes and site-libraries, if any.]),
	[], [])
XE_MERGED_ARG([site-runtime-libraries],
	AS_HELP_STRING([--with-site-runtime-libraries=PATHS],[Prepend to the runtime library search path]),
	[], [])
XE_MERGED_ARG([dynamic],
	AS_HELP_STRING([--with-dynamic],[Link dynamically if supported by system.  'No' forces static linking.]),
	[], [])
dnl
XE_HELP_SUBSECTION([Installation options])
XE_MERGED_ARG([prefix],
	AS_HELP_STRING([--with-prefix=no],[Don't compile the value for `prefix' into the executable.]),
	[true], [with_prefix=yes])
XE_MERGED_ARG([netinstall],
	AS_HELP_STRING([--with-netinstall],[Support for installation over the internet.
                        Only functional on the MS Windows platforms.]),
	[], [with_netinstall="no"])
XE_MERGED_ARG([statedir],
	AS_HELP_STRING([--with-statedir=DIR],[]),
	[], [with_statedir='${prefix}/lib'])
XE_MERGED_ARG([lispdir],
	AS_HELP_STRING([--with-lispdir=DIR],[]),
	[AC_DEFINE(LISPDIR_USER_DEFINED)], [with_lispdir='${datadir}/${instvardir}/lisp'])
XE_MERGED_ARG([archlibdir],
	AS_HELP_STRING([--with-archlibdir=DIR],[]),
	[AC_DEFINE(ARCHLIBDIR_USER_DEFINED)], [with_archlibdir='${libdir}/${instvardir}/${configuration}'])
XE_MERGED_ARG([moduledir],
	AS_HELP_STRING([--with-moduledir=DIR],[]),
	[AC_DEFINE(MODULEDIR_USER_DEFINED)], [with_moduledir='${libdir}/${instvardir}/${configuration}/modules'])
XE_MERGED_ARG([etcdir],
	AS_HELP_STRING([--with-etcdir=DIR],[]),
	[AC_DEFINE(ETCDIR_USER_DEFINED)], [with_etcdir='${datadir}/${instvardir}/etc'])
XE_MERGED_ARG([docdir],
	AS_HELP_STRING([--with-docdir=DIR],[]),
	[AC_DEFINE(DOCDIR_USER_DEFINED)], [with_docdir='${archlibdir}'])
dnl
XE_HELP_SUBSECTION([Run-time path-searching options])
XE_MERGED_ARG([site-lisp],
	AS_HELP_STRING([--with-site-lisp=no],[Allow for a site-lisp directory in the XEmacs hierarchy searched before the installation packages.]),
	[true], [with_site_lisp=no])
XE_MERGED_ARG([site-modules],
	AS_HELP_STRING([--with-site-modules=no],[Disable site-modules directory in the XEmacs hierarchy, which is searched before the installation modules.]),
	[], [])
XE_MERGED_ARG([early-packages],
	AS_HELP_STRING([--with-early-packages=DIR],[Specify location of early/user packages (instead of ~/.xemacs; same as --with-user-packages).]),
	[AC_DEFINE(EARLY_PACKAGE_DIRECTORIES_USER_DEFINED)], [])
XE_MERGED_ARG([user-packages],
	AS_HELP_STRING([--with-user-packages=DIR],[Specify location of early/user packages (instead of ~/.xemacs; same as --with-early-packages).]),
	[AC_DEFINE(EARLY_PACKAGE_DIRECTORIES_USER_DEFINED)], [])
XE_MERGED_ARG([late-packages],
	AS_HELP_STRING([--with-late-packages=DIR],[Specify location of late/system packages (instead of default location; same as --with-system-packages).]),
	[AC_DEFINE(LATE_PACKAGE_DIRECTORIES_USER_DEFINED)], [])
XE_MERGED_ARG([system-packages],
	AS_HELP_STRING([--with-system-packages=DIR],[Specify location of late/system packages (instead of default location; same as --with-late-packages).]),
	[AC_DEFINE(LATE_PACKAGE_DIRECTORIES_USER_DEFINED)], [])
XE_MERGED_ARG([last-packages],
	AS_HELP_STRING([--with-last-packages=DIR],[Specify location of last/legacy packages (instead of default location; same as --with-legacy-packages).]),
	[AC_DEFINE(LAST_PACKAGE_DIRECTORIES_USER_DEFINED)], [])
XE_MERGED_ARG([legacy-packages],
	AS_HELP_STRING([--with-legacy-packages=DIR],[Specify location of last/legacy packages (instead of default location; same as --with-last-packages).]),
	[AC_DEFINE(LAST_PACKAGE_DIRECTORIES_USER_DEFINED)], [])
XE_MERGED_ARG([package-path],
	AS_HELP_STRING([--with-package-path=PATH],[Search path for package directories.]),
	[AC_DEFINE(PACKAGE_PATH_USER_DEFINED)], [])
XE_MERGED_ARG([infopath],
	AS_HELP_STRING([--with-infopath=PATH],[Location of info directories]),
	[AC_DEFINE(INFOPATH_USER_DEFINED)], [])
dnl
XE_HELP_SUBSECTION([Window-system options])
dnl Enable when fontconfig support is factored out of Xft.
dnl XE_MERGED_ARG([fontconfig],
dnl	AS_HELP_STRING([--with-fontconfig],
dnl		       [Use fontconfig library to configure fonts.],
dnl		       [],[])
dnl if you change defaults, make sure to fix arg 6 of the OPTION_HELP macro.
XE_COMPLEX_ARG([xft],
	[XE_COMPLEX_OPTION_HELP_STRING([--with-xft],
		[Xft client-side font rendering and anti-aliasing],
		[Xft],
		[`emacs' (buffers), `menubars', `tabs', and `gauges'],
		[X11, Xft, Xrender, freetype, and fontconfig],
		[`noemacs, nomenubars, notabs, nogauges'.
                 The default when selected is `emacs, nomenubars, notabs, nogauges'])],
	[],[with_xft_emacs=no],
	[XE_COMPLEX_OPTION([emacs],[yes]),
	XE_COMPLEX_OPTION([menubars],[no]),
	XE_COMPLEX_OPTION([tabs],[no]),
	XE_COMPLEX_OPTION([gauges],[no])])
XE_MERGED_ARG([gtk],
	AS_HELP_STRING([--with-gtk],[Support GTK on the X Window System. (EXPERIMENTAL)]),
	[true], [with_gtk=no])
XE_MERGED_ARG([gnome],
	AS_HELP_STRING([--with-gnome],[Support GNOME on the X Window System. (EXPERIMENTAL)]),
	[true], [with_gnome=no])
XE_MERGED_ARG([msw],
	AS_HELP_STRING([--with-msw],[Support MS Windows as a window system (only under Cygwin and MinGW).  `--with-msw=no' may be needed on *nix systems with Wine installed.]),
	[], [])
XE_MERGED_ARG([toolbars],
	AS_HELP_STRING([--with-toolbars],[Enable toolbar support. Default: yes.]),
	[], [])
XE_MERGED_ARG([wmcommand],
	AS_HELP_STRING([--with-wmcommand],[Compile without realized leader window which will
                        keep the WM_COMMAND property.]),
	[], [])
XE_KEYWORD_ARG([athena],
	AS_HELP_STRING([--with-athena=TYPE],[Use TYPE Athena widgets (`xaw', `3d', `next', `95', or `xpm').]),
[],[],[xaw,3d,next,95,xpm])dnl
XE_KEYWORD_ARG([menubars],
	AS_HELP_STRING([--with-menubars=TYPE],[Use TYPE menubars ('yes', '`no', `lucid', `motif', `athena', `gtk', or `msw').  The Lucid
                        widgets emulate Motif (mostly) but are faster.
                        *WARNING*  The Motif menubar is currently broken.
                        Lucid menubars are the default.]),
	[], [],[yes,no,lucid,motif,athena,gtk,msw])
XE_KEYWORD_ARG([scrollbars],
	AS_HELP_STRING([--with-scrollbars=TYPE],[Use TYPE scrollbars 'yes', '`no', `lucid', `motif', `athena', `gtk', or `msw').
                        Lucid scrollbars are the default.]),
	[], [],[yes,no,lucid,motif,athena,gtk,msw])
XE_KEYWORD_ARG([dialogs],
	AS_HELP_STRING([--with-dialogs=TYPE],[Use TYPE dialog boxes 'yes', '`no', `lucid', `motif', `athena', `gtk', or `msw').
                        There are no true Lucid dialogs; Motif dialogs will be
                        used if Motif can be found, else Athena is used.]),
	[], [],[yes,no,lucid,motif,athena,gtk,msw])
XE_KEYWORD_ARG([widgets],
	AS_HELP_STRING([--with-widgets=TYPE],[Use TYPE native widgets ('yes', '`no', `lucid', `motif', `athena', `gtk', or `msw').
                        Other widget types are currently unsupported.
                        There are no true Lucid widgets; Motif widgets will be
                        used if Motif can be found, else Athena is used.]),
	[], [],[yes,no,lucid,motif,athena,gtk,msw])
XE_MERGED_ARG([dragndrop],
	AS_HELP_STRING([--with-dragndrop],[Compile in the generic drag and drop API. This is automatically added if one of the drag and drop
                        protocols is found (currently CDE, MSWindows, and GTK).
                        *WARNING*  The Drag'n'drop support is under development
                                   and is considered experimental.]),
	[], [])
XE_MERGED_ARG([cde],
	AS_HELP_STRING([--with-cde],[Compile in support for CDE drag and drop.]),
	[], [])
XE_MERGED_ARG([external-widget],
	AS_HELP_STRING([--with-external-widget],[Support XEmacs server for text widgets in other applications.]),
	[], [])
dnl
XE_HELP_SUBSECTION([TTY (character terminal) options])
XE_MERGED_ARG([tty],
	AS_HELP_STRING([--with-tty],[Enable TTY support. Default: yes.]),
	[], [])
XE_MERGED_ARG([ncurses],
	AS_HELP_STRING([--with-ncurses],[Use the ncurses library for tty support.]),
	[], [])
XE_MERGED_ARG([gpm],
	AS_HELP_STRING([--with-gpm],[Compile in GPM mouse support for ttys.]),
	[], [])
dnl
XE_HELP_SUBSECTION([Image options])
XE_MERGED_ARG([xpm],
	AS_HELP_STRING([--with-xpm],[Compile with support for XPM images.  PRACTICALLY
                        REQUIRED.  Although this library is nonstandard and
                        a real hassle to build, many basic things (e.g.
                        toolbars) depend on it, and you will run into
                        many problems without it.]),
	[], [])
XE_MERGED_ARG([png],
	AS_HELP_STRING([--with-png],[Compile with support for PNG images.  Recommended
                        because the images on the About page are not viewable
                        without it.]),
	[], [])
XE_MERGED_ARG([jpeg],
	AS_HELP_STRING([--with-jpeg],[Compile with support for JPEG images.  Useful if
                        you are using a mail, news reader, or web browser
                        in XEmacs, so that JPEG images can be displayed.]),
	[], [])
XE_MERGED_ARG([tiff],
	AS_HELP_STRING([--with-tiff],[Compile with support for TIFF images.  Possibly
                        useful, for the same reason as JPEG images.]),
	[], [])
XE_MERGED_ARG([xface],
	AS_HELP_STRING([--with-xface],[Compile with support for X-Face mail headers.
                        Requires the compface package.]),
	[], [])
XE_MERGED_ARG([gif],
	AS_HELP_STRING([--with-gif],[Compile with support for GIF images.]),
	[], [])
dnl
XE_HELP_SUBSECTION([Sound options])
XE_COMPLEX_ARG([sound],
	AS_HELP_STRING([--with-sound=TYPE],[Compile with sound support.
                        Valid types are `native', `alsa', `nas' and `esd'.
                        Prefix a type with 'no' to disable.
                        The first type can be `none' or `all'.  `none' means
                        `nonative,noalsa,nonas,noesd'.  `all' means
                        `native,alsa,nas,esd'.  Later options override earlier
                        ones for the same TYPE.  The default is to autodetect
                        all sound support except for ESD which defaults to
                        off.]),
	[],
	[with_sound_nas=""],
	[XE_COMPLEX_OPTION([native],[""]),
	 XE_COMPLEX_OPTION([alsa],[""]),
	 XE_COMPLEX_OPTION([nas],[""]),
	 XE_COMPLEX_OPTION([esd],[no])])
XE_MERGED_ARG([native-sound-lib],
	AS_HELP_STRING([--with-native-sound-lib],[Path to sound library (for systems with name conflicts).]),
	[], [])
dnl
XE_HELP_SUBSECTION([Internationalization options])
XE_MERGED_ARG([mule],
	AS_HELP_STRING([--with-mule],[Compile with Mule (Multi-Lingual Emacs), i.e. internationalization support,
                        needed to support non-Latin-1 (including Asian)
                        languages.]),
	[], [])
XE_MERGED_ARG([unicode-internal],
	AS_HELP_STRING([--with-unicode-internal],[Use Unicode and UTF-8 internally for text.  Automatically selects `--with-mule'.  Without this,
Mule uses an old internal encoding that explicitly encodes the national
character set associated with a char and cannot represent all of Unicode.]),
	[], [])
XE_KEYWORD_ARG([xim],
	AS_HELP_STRING([--with-xim==TYPE],[Enable XIM support.  TYPE is `yes', `no', `xlib', or `motif']),
	[],[],[yes,no,xlib,motif])dnl
XE_MERGED_ARG([canna],
	AS_HELP_STRING([--with-canna],[Support the Canna Japanese input method. Requires Mule.]),
	[], [])
XE_MERGED_ARG([wnn],
	AS_HELP_STRING([--with-wnn],[Support the Wnn Asian language input
                        method. Requires Mule.]),
	[], [])
XE_MERGED_ARG([wnn6],
	AS_HELP_STRING([--with-wnn6],[Support the Wnn6 Asian language input
                        method (proprietary). Requires Mule.]),
	[], [])
XE_MERGED_ARG([xfs],
	AS_HELP_STRING([--with-xfs],[Enable XFontSet support for internationalized
                        menubar.  Incompatible with `--with-xim=motif' and `--with-xft'.
                        `--with-menubars=lucid' (the default) is desirable.]),
	[], [])
dnl
XE_HELP_SUBSECTION([File-related options])
XE_MERGED_ARG([default-eol-detection],
	AS_HELP_STRING([--with-default-eol-detection],[Turns on by default auto-detection of end-of-line type
			when reading a file.  Applies to those platforms where
			auto-detection is off by default (non-Mule Unix).  Has
			no effect otherwise.]),
	[], [])
XE_MERGED_ARG([clash-detection],
	AS_HELP_STRING([--with-clash-detection],[Disable use of lock files to detect multiple edits
			of the same file.]),
	[], [])
XE_MERGED_ARG([zlib],
	AS_HELP_STRING([--with-zlib],[Support inflate (de)compression internally.]),
	[], [])
dnl
XE_HELP_SUBSECTION([Database options])
XE_COMPLEX_ARG([database],
	AS_HELP_STRING([--with-database=TYPE],[Compile with database support.  Valid types are
                        `no' or a comma-separated list of one or more
                        of `berkdb' and either `dbm' or `gdbm'.]),
	[
if test "$with_database_dbm"  = "yes" -a "$with_database_gdbm" = "yes"; then
	USAGE_ERROR("Only one of \`dbm' and \`gdbm' may be specified
with the \`--with-database' option.")
fi
],
[],
[XE_COMPLEX_OPTION([berkdb],[""]),
 XE_COMPLEX_OPTION([dbm],[""]),
 XE_COMPLEX_OPTION([gdbm],[""])])
XE_MERGED_ARG([ldap],
	AS_HELP_STRING([--with-ldap],[Support the LDAP protocol.]),
	[], [])
XE_MERGED_ARG([postgresql],
	AS_HELP_STRING([--with-postgresql],[Support the PostgreSQL RDBMS.
                        Optional argument should be the basename of the
                        subdirectory containing `libpq-fe.h'.  The first
                        subdirectory found on the -I path will be used.
                        Currently autodetect must be used --with-modules.]),
	[], [])
dnl
XE_HELP_SUBSECTION([Mail options])
XE_KEYWORD_ARG([mail-locking],
	AS_HELP_STRING([--with-mail-locking=TYPE],[Specify the locking to be used by movemail to prevent
                        concurrent updates of mail spool files. Valid types
                        are `lockf', `flock', `file', `locking', `mmdf' or `pop'.]),
[],[],[lockf,flock,file,locking,mmdf,pop])dnl
XE_MERGED_ARG([pop],
	AS_HELP_STRING([--with-pop],[Support POP for mail retrieval.]),
	[], [])
XE_MERGED_ARG([kerberos],
	AS_HELP_STRING([--with-kerberos],[Support Kerberos-authenticated POP.]),
	[], [])
XE_MERGED_ARG([hesiod],
	AS_HELP_STRING([--with-hesiod],[Support Hesiod to get the POP server host.]),
	[], [])
dnl
XE_HELP_SUBSECTION([Networking options])
XE_MERGED_ARG([tooltalk],
	AS_HELP_STRING([--with-tooltalk],[Support the ToolTalk IPC protocol.]),
	[], [])
XE_MERGED_ARG([socks],
	AS_HELP_STRING([--with-socks],[Compile with support for SOCKS (an Internet proxy).]),
	[], [])
XE_MERGED_ARG([dnet],
	AS_HELP_STRING([--with-dnet],[Compile with support for DECnet.]),
	[], [])
XE_MERGED_ARG([ipv6-cname],
	AS_HELP_STRING([--with-ipv6-cname],[Try IPv6 information first when canonicalizing host names.  This option has no effect unless system supports getaddrinfo(3) and getnameinfo(3).]),
	[], [with_ipv6_cname="no"])
XE_MERGED_ARG([tls],
	AS_HELP_STRING([--with-tls=TYPE],[Support TLS connections.  TYPE must be one of "nss", "gnutls", and "openssl".  If TYPE is omitted or "yes", support is determined automatically.]),
	[], [])
dnl
XE_HELP_SUBSECTION([Memory allocation options])
XE_MERGED_ARG([rel-alloc],
	AS_HELP_STRING([--with-rel-alloc],[Enable the relocating allocator.]),
	[], [with_rel_alloc='default'])
XE_MERGED_ARG([pdump],
	AS_HELP_STRING([--with-pdump],[Enable portable LISP preloader.]),
	[], [])
XE_MERGED_ARG([dump-in-exec],
	AS_HELP_STRING([--with-dump-in-exec],[Enable dumping into executable (enabled by default
			for `pdump', not enabled by default in combination 
			with `newgc').]),
	[], [])
XE_MERGED_ARG([kkcc],
	AS_HELP_STRING([--with-kkcc],[Enable experimental new GC mark algorithms.]),
	[], [with_kkcc=yes])

XE_MERGED_ARG([newgc],
	AS_HELP_STRING([--with-newgc],[Enable new incremental garbage collector and new allocator.]),
	[], [])
XE_COMPLEX_ARG([vdb],
	AS_HELP_STRING([--with-vdb=TYPE],[Override auto-detection of 
			virtual-dirty-bit write-barrier implementation for the
			new garbage collector. TYPE must be one of "auto" (for 
			auto-detection), "posix", "win32", "mach", or "fake" 
			(uses the new garbage collector but disables 
			incremental collections). The default is to
			use auto-detection.]),
	[], [with_vdb="auto"],[auto,posix,win32,mach,fake,no])
dnl
XE_HELP_SUBSECTION([Emacs Lisp options])
XE_MERGED_ARG([modules],
	AS_HELP_STRING([--with-modules],[Compile in experimental support for dynamically
                        loaded libraries (Dynamic Shared Objects).]),
	[], [])
XE_KEYWORD_ARG([bignum],
	AS_HELP_STRING([--with-bignum=TYPE],[Compile in support for bignums, ratios, or bigfloats
                        using library support.  TYPE must be one of "gmp"
                        (for GNU MP), "mpir" (for MPIR), "mp" (for BSD MP),
                        or "no" (disabled).]),
	[], [with_bignum="no"],[no,gmp,mpir,mp])
dnl
XE_HELP_SUBSECTION([Platform Specific options])
XE_MERGED_ARG([workshop],
	AS_HELP_STRING([--with-workshop],[Support the Sun WorkShop (formerly Sparcworks)
                        development environment.]),
	[], [])
XE_MERGED_ARG([sparcworks],
	AS_HELP_STRING([--with-sparcworks],[Alias for --with-workshop]),
	[], [])
dnl
XE_HELP_SUBSECTION([Debugging options])
XE_MERGED_ARG([debug],
	AS_HELP_STRING([--with-debug],[Enable additional debugging information.  No noticeable time cost (unlike
`--with-error-checking').  This turns adds `-g' to the compiler options so that
debug information is compiled into the XEmacs executable.  It also turns on
assert checks in the source code (i.e. same as `--with-assertions'); enables
Lisp commands for determining detailed memory usage statistics (same as
`--with-memory-usage-stats'); adds various Lisp variables and functions
that allow one to display internal structures, show the internal workings
of certain subsystems, and exit to the debugger; causes Lisp errors during
building to exit to the debugger or dump core; and adds debugging-related
C functions meant to be called from a debugger.]),
	[], [])
dnl If just --with-error-checking or --with-error-checking=yes is given,
dnl it should be the same as --with-error-checking=all.  Currently it's
dnl the same as saying nothing at all.
if test "$with_error_checking" = "yes"; then
  with_error_checking=all
fi
XE_COMPLEX_ARG([error-checking],
	AS_HELP_STRING([--with-error-checking[=CLASS|all|none]],[Compile with internal error-checking added.
Causes noticeable loss of speed.  Valid classes are `byte_code', `display'
(redisplay), `extents', `gc' (garbage collection), `glyphs', `malloc'
(memory allocation), `structures' (C structures), `text' (text handling and
conversion), `types' (correct Lisp-object type for type-specific
operations).  `all' or `none' can be given to set all or no classes,
respectively.  Any of the classes can be prefixed with `no' to turn the
class off.  A comma-separated list of classes can also be given.  For
example, `all,nogc' turns on all but garbage-collection-related checking.
Omitting any argument or specifying just `yes' is the same as `all'.]),
		[], [],
dnl Keep TESTS sorted to help with syncing doc to reality.
[XE_COMPLEX_OPTION([byte_code],[""]),
 XE_COMPLEX_OPTION([display],[""]),
 XE_COMPLEX_OPTION([extents],[""]),
 XE_COMPLEX_OPTION([gc],[""]),
 XE_COMPLEX_OPTION([glyphs],[""]),
 XE_COMPLEX_OPTION([malloc],[""]),
 XE_COMPLEX_OPTION([structures],[""]),
 XE_COMPLEX_OPTION([text],[""]),
 XE_COMPLEX_OPTION([types],[""])])
XE_MERGED_ARG([assertions],
	AS_HELP_STRING([--with-assertions],[Compile in runtime assertions.]),
	[], [])
XE_MERGED_ARG([memory-usage-stats],
	AS_HELP_STRING([--with-memory-usage-stats],[Enable LISP memory usage API.]),
	[], [])
XE_MERGED_ARG([quick-build],
	AS_HELP_STRING([--with-quick-build],[Speed up the build cycle by leaving out steps where
                        XEmacs will still work (more or less) without them.
                        Potentially dangerous if you don't know what you're
                        doing. This (1) Doesn't garbage-collect after loading
                        each file during dumping, (2) Doesn't
                        automatically rebuild the DOC file (remove it by hand
                        to get it rebuilt), (3) Removes config.h, lisp.h and
                        associated files from the dependency lists, so changes
                        to these files don't automatically cause all .c files
                        to be rebuilt, (4) Doesn't check for Lisp shadows.]),
	[], [])
XE_MERGED_ARG([union-type],
	AS_HELP_STRING([--with-union-type],[Use union definition of Lisp_Object type.  Known to trigger bugs in some compilers.]),
	[], [])
XE_MERGED_ARG([quantify],
	AS_HELP_STRING([--with-quantify],[Support performance debugging using Quantify.]),
	[], [])
XE_MERGED_ARG([purify],
	AS_HELP_STRING([--with-purify],[Support memory debugging using Purify.]),
	[], [])
XE_MERGED_ARG([valgrind],
	AS_HELP_STRING([--with-valgrind],[Support memory debugging using Valgrind.]),
	[], [])
dnl -------------------------------------------------------------------------
dnl Final command line argument checks.

dnl CDE requires tooltalk
XE_CHECK_FEATURE_DEPENDENCY(cde, tooltalk)

dnl Xft sanity checking
dnl #### Maybe we should XE_DIE here instead?  Or fix the UI so that
dnl emacs is always implicit?  (I worry that --without-xft would be weird.)
if test \( "$with_xft_menubars" = "yes" -o "$with_xft_tabs" = "yes" \
           -o "$with_xft_gauges" = "yes" \) -a "$with_xft_emacs" = "no"; then
    AC_MSG_WARN([Forcing --with-xft=emacs because Xft is enabled])
    with_xft_emacs=yes
fi

dnl XFS and Xft in menubars conflict
if test "$with_xfs" = "yes" -a "$with_xft_menubars" = "yes"; then
  USAGE_ERROR("XFS and Xft in the menubars are incompatible!")
fi

dnl -------------------------------------------------------------------------
dnl Local paths
test "x$prefix" = xNONE && prefix=$ac_default_prefix
# Let make expand exec_prefix.
if test "x$exec_prefix" = xNONE
then
  exec_prefix='${prefix}'
else
  AC_DEFINE(EXEC_PREFIX_USER_DEFINED)
fi

XE_EXPAND_VARIABLE(prefix,prefix_expanded)
XE_EXPAND_VARIABLE(datadir,datadir_expanded)
XE_EXPAND_VARIABLE(exec_prefix,exec_prefix_expanded)
XE_EXPAND_VARIABLE(libdir,libdir_expanded)
XE_EXPAND_VARIABLE(infodir,infodir_expanded)

if test "x$datadir" != "x\${datarootdir}"
then
  AC_DEFINE(INFODIR_USER_DEFINED)
  AC_DEFINE(LISPDIR_USER_DEFINED)
  AC_DEFINE(ETCDIR_USER_DEFINED)
  AC_DEFINE(LATE_PACKAGE_DIRECTORIES_USER_DEFINED)
fi

if test "x$libdir" != "x\${exec_prefix}/lib"
then
  AC_DEFINE(MODULEDIR_USER_DEFINED)
  AC_DEFINE(ARCHLIBDIR_USER_DEFINED)
  AC_DEFINE(DOCDIR_USER_DEFINED)
fi

if test "x$infodir" != "x\${datarootdir}/info"
then
  AC_DEFINE(INFODIR_USER_DEFINED)
else
  infodir='${datarootdir}/${instvardir}/info'
fi

with_sitelispdir='${datadir}/${inststaticdir}/site-lisp'
inststaticdir='${PROGNAME}'
instvardir='${PROGNAME}-${version}'
sitemoduledir='${libdir}/${inststaticdir}/site-modules'
with_late_packages='${datadir}/${PROGNAME}'

AC_SUBST(inststaticdir)
AC_SUBST(statedir,$with_statedir)

dnl -------------------------------------------------------------------------

AC_PROG_LN_S

dnl Make symlinks for etc, lisp, and info directories while the path
dnl is still relative.  We do not symlink lock because someone may
dnl have stuck the source on a read-only partition.  Instead we
dnl create it as an actual directory later on if it does not already
dnl exist.
for dir in lisp etc man info tests; do
  if test ! -d "$dir" ; then
    echo Making symbolic link to "$srcdir/$dir"
    ${LN_S} "$srcdir/$dir" "$dir"
  fi
done

dnl Calculate canonical name for blddir (i.e. current directory).
dnl PWD may already be the preferable absolute name for ".",
dnl but we can't trust it - it is sometimes inaccurate.
absolute_pwd="`pwd`";
if test -n "$PWD" -a "`cd $PWD && pwd`" = "$absolute_pwd"
then blddir="$PWD"
else blddir="$absolute_pwd"; CANONICALIZE_PATH(blddir)
fi
AC_SUBST(blddir)

dnl Make srcdir absolute, if not already.  It is important to
dnl avoid running the path through pwd unnecessary, since pwd can
dnl give you automounter prefixes, which can go away.
case "$srcdir" in
  /* ) ;;
  .  ) srcdir="$blddir" ;;
  *  ) srcdir="`cd $srcdir && pwd`"; CANONICALIZE_PATH(srcdir) ;;
esac

dnl Check if the source directory already has a configured system in it.
if test `pwd` != `sh -c cd $srcdir && pwd`  \
   && test -f "$srcdir/src/config.h"; then
  (echo "$progname: WARNING: The directory tree \`$srcdir' is being used"
   echo "   as a build directory right now; it has been configured in its own"
   echo "   right.  To configure in another directory as well, you MUST"
   echo "   use GNU make.  If you do not have GNU make, then you must"
   echo "   now do \`make distclean' in $srcdir,"
   echo "   and then run $progname again.") >&2
  extrasub='/^VPATH[[	 ]]*=/c\
vpath %.c $(srcdir)\
vpath %.h $(srcdir)\
vpath %.y $(srcdir)\
vpath %.l $(srcdir)\
vpath %.s $(srcdir)\
vpath %.in $(srcdir)'
fi

dnl -------------------------------------------------------------------------
AC_CONFIG_AUX_DIR_DEFAULT
AC_CANONICAL_BUILD
dnl -------------------------------------------------------------------------

dnl ----------------------------------------
dnl Find out which version of XEmacs this is
dnl ----------------------------------------
dnl This should be the same code as in Makefile.in.in
cp "$srcdir/version.sh.in" "$srcdir/version.sh"
if test -d "$srcdir/.hg"; then
    (cd "$srcdir"; hg identify | cut -d " " -f 1 >> version.sh)
fi
. "$srcdir/version.sh" || exit 1;
dnl Must do the following first to determine verbosity for AC_DEFINE
if test -n "$emacs_is_beta"; then beta=yes; else beta=no; fi
: "${verbose=$beta}"
version="${emacs_major_version}.${emacs_minor_version}"
AC_DEFINE_UNQUOTED(EMACS_MAJOR_VERSION, $emacs_major_version)
AC_DEFINE_UNQUOTED(EMACS_MINOR_VERSION, $emacs_minor_version)
if test -n "$emacs_beta_version" ; then
  if test "$beta" = "yes"; then
  	version="${version}-b${emacs_beta_version}"
  	AC_DEFINE_UNQUOTED(EMACS_BETA_VERSION, $emacs_beta_version)
  else
	version="${version}.${emacs_beta_version}"
	AC_DEFINE_UNQUOTED(EMACS_PATCH_LEVEL, $emacs_beta_version)
  fi
fi
AC_DEFINE_UNQUOTED(XEMACS_CODENAME, "$xemacs_codename")
dnl for etags
verbose_version=$version
if test "$xemacs_extra_name" != ""; then
  AC_DEFINE_UNQUOTED(XEMACS_EXTRA_NAME, "$xemacs_extra_name")
  verbose_version="$verbose_version $xemacs_extra_name"
fi
if test "$xemacs_release_date" != ""; then
  AC_DEFINE_UNQUOTED(XEMACS_RELEASE_DATE, "$xemacs_release_date")
fi
AC_DEFINE_UNQUOTED(EMACS_VERSION, "$version")

PROGNAME=xemacs
SHEBANG_PROGNAME=xemacs-script

AC_SUBST(SHEBANG_PROGNAME)

AC_DEFINE_UNQUOTED(EMACS_PROGNAME, "$PROGNAME")

AC_DEFINE_UNQUOTED(SHEBANG_PROGNAME, "${PROGNAME}-script")

dnl ----------------------------------
dnl Error checking and debugging flags
dnl ----------------------------------
dnl Error checking default to "yes" in beta versions, to "no" in releases.
dnl Same goes for --with-debug and --extra-verbosity.
if test -n "$emacs_is_beta"; then beta=yes; else beta=no; fi
test "${with_error_checking_extents:=$beta}"    = yes && AC_DEFINE(ERROR_CHECK_EXTENTS)
test "${with_error_checking_types:=$beta}"      = yes && AC_DEFINE(ERROR_CHECK_TYPES)
test "${with_error_checking_text:=$beta}"       = yes && AC_DEFINE(ERROR_CHECK_TEXT)
test "${with_error_checking_gc:=$beta}"         = yes && AC_DEFINE(ERROR_CHECK_GC)
test "${with_error_checking_malloc:=$beta}"     = yes && AC_DEFINE(ERROR_CHECK_MALLOC)
test "${with_error_checking_byte_code:=$beta}"  = yes && AC_DEFINE(ERROR_CHECK_BYTE_CODE)
test "${with_error_checking_glyphs:=$beta}"     = yes && AC_DEFINE(ERROR_CHECK_GLYPHS)
test "${with_error_checking_display:=$beta}"    = yes && AC_DEFINE(ERROR_CHECK_DISPLAY)
test "${with_error_checking_structures:=$beta}" = yes && AC_DEFINE(ERROR_CHECK_STRUCTURES)
dnl with_debug=yes must be set when error checking is present.  This should be
dnl fixed up.
dnl with_debug implies other options
if test "${with_debug:=$beta}" = "yes"; then
  with_assertions=yes
  with_memory_usage_stats=yes
  AC_DEFINE(DEBUG_XEMACS)
fi
test "$with_assertions"         = "yes" && AC_DEFINE(USE_ASSERTIONS)
test "$with_memory_usage_stats" = "yes" && AC_DEFINE(MEMORY_USAGE_STATS)

dnl ------------------------------
dnl Determine the s&m files to use
dnl ------------------------------
dnl Given the configuration name, set machfile and opsysfile to the
dnl names of the m/*.h and s/*.h files we should use.

dnl Canonicalize the configuration name.
XE_STRIP_4TH_COMPONENT(ac_cv_build_alias)
XE_STRIP_4TH_COMPONENT(ac_cv_build)
AC_SUBST(configuration, $ac_cv_build)

dnl If you add support for a new configuration, add code to this
dnl switch statement to recognize your configuration name and select
dnl the appropriate operating system and machine description files.

dnl You would hope that you could choose an m/*.h file pretty much
dnl based on the machine portion of the configuration name, and an s-
dnl file based on the operating system portion.  However, it turns out
dnl that each m/*.h file is pretty manufacturer-specific - for
dnl example, apollo.h, hp9000s300.h, mega68k, news.h, and tad68k are
dnl all 68000 machines; mips.h, pmax.h, and news-risc are all MIPS
dnl machines.  So we basically have to have a special case for each
dnl configuration name.

dnl As far as handling version numbers on operating systems is
dnl concerned, make sure things will fail in a fixable way.  If
dnl /etc/MACHINES says nothing about version numbers, be
dnl prepared to handle anything reasonably.  If version numbers
dnl matter, be sure /etc/MACHINES says something about it.

dnl Eric Raymond says we should accept strings like "sysvr4" to mean
dnl "System V Release 4"; he writes, "The old convention encouraged"
dnl "confusion between `system' and `release' levels'."

machine='' opsys=''

dnl Straightforward machine determination
case "$ac_cv_build" in
  sparc-*-*        ) machine=sparc ;;
  alpha*-*-*       ) machine=alpha ;;
  mips*-*          ) machine=mips ;;
  rs6000-ibm-aix*  ) machine=ibmrs6000 ;;
  powerpc-ibm-aix* ) machine=ibmrs6000 ;;
  powerpc*-*       ) machine=powerpc ;;
  hppa-*-*         ) machine=hp800 ;;
  arm*             ) machine=arm ;;
  i[[3-9]]86-*-*   ) machine=intel386 ;;
  x86_64-*-*       ) machine=x86_64 ;;
esac

dnl Straightforward OS determination
case "$ac_cv_build" in
  *-*-linux*    ) opsys=linux ;;
  *-*-netbsd*   ) opsys=netbsd ;;
  *-*-openbsd*	) opsys=openbsd ;;

  dnl AIX
  *-*-aix[[4-9]]* ) opsys=aix4-2   ;;

  dnl Other generic OSes
  *-gnu* )			opsys=gnu    ;;
  *-*-bsd4.3 )			opsys=bsd-common ;;
  *-*-aos*   )			opsys=bsd-common ;;
  *-*-sysv4.1* | *-*-sysvr4.1* )opsys=usg5-4 NON_GNU_CPP=/usr/lib/cpp ;;
  *-*-sysv4.[[2-9]]* | *-sysvr4.[[2-9]]* )
	if test -z "$NON_GNU_CPP" ; then
	  for prog in "/usr/ccs/lib/cpp" "/lib/cpp"; do
	    if test -f "$prog"; then NON_GNU_CPP="$prog"; break; fi
	  done
	fi
	opsys=usg5-4-2 ;;
    *-sysv4* | *-sysvr4* )	opsys=usg5-4 ;;
    *-*-mach_bsd4.3* )          opsys=mach-bsd4-3 ;;
esac

case "$ac_cv_build" in

  dnl Darwin, a.k.a. MacOS X (based on Mach and Freebsd)
  *-*-darwin*)
    opsys=darwin
    dnl Use this to set BSD correctly.
    AC_DEFINE(USE_PARAM_H)
    ;;

  dnl HP-UX
  *-hp-hpux* ) machine=hp800 opsys=hpux11
    NON_GNU_CC="cc -Ae" NON_GNU_CPP="cc -Ae -E"

    case "$ac_cv_build" in *-hp-hpux*shr* ) opsys="${opsys}-shr" ;; esac
  ;;

  dnl Workstations sold by MIPS
  dnl This is not necessarily all workstations using the MIPS processor -
  dnl Irises are produced by SGI, and DECstations by DEC.
  mips-mips-bsd* ) opsys=bsd-common ;;
  mips-mips-*    ) opsys=usg5-4-2 ;;

  dnl Silicon Graphics machines
  dnl Iris 4D
  mips-sgi-irix6*     ) opsys=irix6-5 ;;

  dnl Suns
  *-*-solaris* | *-sun-mach* | *-sun-bsd* )
    dnl Make $canonical even more so.
    case "$ac_cv_build" in *-sunos5*)
      ac_cv_build=`echo $ac_cv_build | sed -e s/sunos5/solaris2/`;;
    esac

    case "$ac_cv_build" in
      *-solaris2* )
	#test -f /usr/ccs/lib/cpp && NON_GNU_CPP=/usr/ccs/lib/cpp
	RANLIB=':' ;;
    esac

    case "$ac_cv_build" in
      *-solaris* )
	opsys=sol2
	os_release_major=`uname -r | sed -e 's/^\([[0-9]]\{1,\}\)\.\([[0-9]]\{1,\}\).*/\1/'`
	os_release_minor=`uname -r | sed -e 's/^\([[0-9]]\{1,\}\)\.\([[0-9]]\{1,\}\).*/\2/'`
	case "$os_release_minor" in [[0-9]])
	  os_release_minor="0${os_release_minor}";;
	esac
	os_release="${os_release_major}${os_release_minor}"
	AC_DEFINE_UNQUOTED(OS_RELEASE, $os_release) ;;

      *-mach*		  ) opsys=mach-bsd4-3	;;
      *			  ) opsys=bsd-common	;;
    esac

    dnl Watch out for a compiler guaranteed not to work.
    test "$opsys $CC" = "sol2 /usr/ucb/cc" && CC=""
  ;;

  dnl 64-bit machines where we do not care about the manufacturer
  x86_64-*-* )
    case "$ac_cv_build" in
      *-cygwin* )	opsys=cygwin64 ;;
      dnl Otherwise, we fall through to the generic opsys code at the bottom.
    esac
  ;;    

  dnl Intel 386 machines where we do not care about the manufacturer
  i[[3-9]]86-*-* )
    case "$ac_cv_build" in
      *-mach* )			opsys=mach-bsd4-3 ;;
      *-sysv5* )		opsys=usg5-4-2 ;;
      *-freebsd* )		opsys=freebsd ;;
      *-pc-cygwin* )		opsys=cygwin32 ;;
      *-pc-mingw* )		opsys=mingw32 ;
				test -z "$with_tty" && with_tty="no";;
      dnl Otherwise, we fall through to the generic opsys code at the bottom.
    esac
  ;;

esac

dnl Initialize machine from $canonical if not in our database above.
test -z "$machine" && machine=`echo $ac_cv_build | sed 's/-.*$//'`

dnl Initialize opsys from `uname -s` if not in our database above.
test -z "$opsys"   && opsys=`uname -s | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`

dnl Use configure-time autodetection if s&m not available
if test -r "${srcdir}/src/m/${machine}.h"; then
  machfile="m/${machine}.h"
  AC_DEFINE_UNQUOTED(config_machfile, "$machfile")
else
  echo "XEmacs has no builtin knowledge of \`$machine' machines."
  echo "Using configure-time autodetection only."
fi

if test -r "${srcdir}/src/s/${opsys}.h"; then
  opsysfile="s/${opsys}.h"
  AC_DEFINE_UNQUOTED(config_opsysfile, "$opsysfile")
else
  echo "XEmacs has no builtin knowledge of \`$opsys' operating systems."
  echo "Using configure-time autodetection only."
fi


dnl --------------------------------------------------------------
dnl $opsys detection complete; defaults depending on $opsys follow
dnl --------------------------------------------------------------

if test -z "$with_pdump"; then
  case "$opsys" in
    linux* )  with_pdump=yes ;;          dnl glibc 2.3.1 seems to hose unexec
    darwin )  with_pdump=yes ;;          dnl No "native" working dumper available
    cygwin* ) with_pdump=yes ;;          dnl No "native" dumper available
    * )       with_pdump=no ;;
  esac
fi

if test "$with_newgc" = "yes"; then
  if test "$with_vdb" = "auto"; then
    case "$opsys" in
      darwin )  case "$machine" in
		  intel386 ) check_vdb_posix=yes ;;
		  x86_64 ) check_vdb_posix=yes ;;
		  * ) AC_DEFINE(VDB_MACH)  have_vdb_mach=yes ;;
		esac ;;
      cygwin* ) AC_DEFINE(VDB_WIN32) have_vdb_win32=yes ;;
      linux* )  check_vdb_posix=yes ;;
      freebsd ) check_vdb_posix=yes ;;
dnl if not sure, try posix first, maybe we are lucky
      * )       check_vdb_posix=yes ;;
    esac
  else
    case "$with_vdb" in
      mach )  AC_DEFINE(VDB_MACH)  have_vdb_mach=yes ;;
      win32 ) AC_DEFINE(VDB_WIN32) have_vdb_win32=yes ;;
      posix ) check_vdb_posix=yes ;;
      fake )  have_vdb_fake=yes ;;
      no )    have_vdb_fake=yes ;;
    esac
  fi
fi

if test -z "$with_dynamic"; then
  case "$opsys" in
    hpux* ) with_dynamic=no ;;
    *) with_dynamic=yes ;;
  esac
fi
if test "$with_dynamic" = "yes"; then
  case "$opsys" in
    hpux* ) opsys="${opsys}-shr" ;;
  esac
else dnl "$with_dynamic" = "no"
  case "$opsys" in
    sol2 )
      echo "Static linking is not supported on Solaris 2."
      echo "Rerun configure without specifying --without-dynamic."
      exit 1 ;;
    linux   ) ld_call_shared="-Bstatic" ;;
  esac
fi

dnl Tools configuration
case "$opsys" in
  aix* )   NON_GNU_CC=xlc ;;      dnl Use xlc by default on AIX
  darwin ) RANLIB="ranlib -c" ;;  dnl Avoid link error in lwlib-config.c
esac

stack_trace_eye_catcher=`echo ${PROGNAME}_${version}_${ac_cv_build} | sed 'y/.-/__/'`
AC_DEFINE_UNQUOTED(STACK_TRACE_EYE_CATCHER, $stack_trace_eye_catcher)

dnl --------------------------------------------------
dnl Determine the compiler, set up for feature testing
dnl --------------------------------------------------

dnl Sun Development environment support
test "$with_sparcworks" = "yes" && with_workshop=yes # compatibility alias
XE_CHECK_FEATURE_DEPENDENCY(workshop, tooltalk)
if test "$with_workshop" = "yes"; then
  AC_DEFINE(SUNPRO)
fi

if test "$with_clash_detection" != "no"; then
  AC_DEFINE(CLASH_DETECTION)
fi

dnl Choose a compiler from (in order)
dnl --with-compiler, env var CC, with_gcc=no && ${NON_GNU_CC:-cc}, AC_PROG_CC
test -n "$with_compiler" && CC="$with_compiler"
if test "$with_gcc" = "no"; then dnl Try to find a non-gcc compiler
  case "$CC" in "" | *gcc* ) CC="${NON_GNU_CC-cc}" ;; esac
fi

dnl If we don't set CFLAGS here, AC_PROG_CC will set it.
dnl But we know better what's good for us, so we do our own
dnl computation of real CFLAGS later.
dnl --with_cflags overrides environment variable CFLAGS
test "${with_cflags-unset}" != unset && CFLAGS="$with_cflags"
if test "${CFLAGS-unset}" != unset
  then cflags_specified=yes;
  else cflags_specified=no;
fi

if test "${with_cflags_warning-unset}" != unset
  then cflags_warning_specified=yes;
  else cflags_warning_specified=no;
fi

if test "${with_cflags_optimization-unset}" != unset
  then cflags_optimization_specified=yes;
  else cflags_optimization_specified=no;
fi

if test "${with_cflags_debugging-unset}" != unset
  then cflags_debugging_specified=yes;
  else cflags_debugging_specified=no;
fi

xe_save_CFLAGS="$CFLAGS"

AC_AIX dnl Defines _ALL_SOURCE on AIX.

AC_PROG_CC dnl Autoconf has its own magic for compiler autodetection

dnl Retry using random guesswork if AC_PROG_CC got it wrong...
if   test "$with_gcc" = "no"  -a "$GCC" = "yes"; then
  CC=${NON_GNU_CC-cc}
  AC_PROG_CC
elif test "$with_gcc" = "yes" -a "$GCC" != "yes" ; then
  CC=gcc
  AC_PROG_CC
fi
CFLAGS="$xe_save_CFLAGS"

dnl Determine GCC version.
if test "$GCC" = "yes"; then
AC_RUN_IFELSE([AC_LANG_SOURCE([int main () {
return __GNUC__;
}])], [:], [__GCC="$?"])
AC_RUN_IFELSE([AC_LANG_SOURCE([int main () {
return __GNUC_MINOR__;
}])], [:], [__GCC_MINOR="$?"])
__GCC_VERSION=$__GCC"."$__GCC_MINOR
echo "You appear to be using GCC version" $__GCC_VERSION
fi

dnl Support for using a different compiler for xemacs itself.
dnl Useful for building XEmacs with a C++ compiler.
dnl For example, `configure --compiler=gcc --xemacs-compiler=g++

dnl The compiler used to build xemacs, as opposed to the compiler
dnl used by configure and lib-src, is determined from the following
dnl sources, in order of priority:
dnl o --with-xemacs-compiler configure flag
dnl o XEMACS_CC environment variable
dnl o same as the regular compiler, (determined previously)

dnl We don't do AC_PROG_CC for XEMACS_CC; if we can't trust these people....
test -n "$with_xemacs_compiler" && XEMACS_CC="$with_xemacs_compiler"
: ${XEMACS_CC:="$CC"}

dnl Are we using g++?

AC_MSG_CHECKING(whether we are using g++)

dnl Is it named g++*?
XEMACS_CC_GPP=no
case "$XEMACS_CC" in
  *g++* ) XEMACS_CC_GPP=yes ;;
esac

dnl If it's known to be in the GCC family, does it claim to be g++?  We don't
dnl run this test unless we know it's GCC-like, because not all compilers
dnl accept --version.
dnl
dnl It's not clear we need both tests, but it doesn't hurt.  g++ might not
dnl have always output "g++" as the first thing in its version string, and
dnl might not always in the future.
if test "$XEMACS_CC_GPP" = "no" -a "$GCC" = "yes"; then
  case "`$XEMACS_CC --version`" in
    g++* ) XEMACS_CC_GPP=yes ;;
  esac
fi

AC_MSG_RESULT($XEMACS_CC_GPP)

dnl Figure out what C preprocessor to use.

dnl On Sun systems, people sometimes set up the variable CPP
dnl with a value that is a directory, not an executable at all.
dnl Detect that case, and ignore that value.
test -n "$CPP" -a -d "$CPP" && CPP=

test -n "$NON_GNU_CPP" -a "$GCC" != "yes" -a -z "$CPP" && CPP="$NON_GNU_CPP"

AC_PROG_CPP

dnl --------------------------------------------------------------------
dnl Compiler feature macros
dnl --------------------------------------------------------------------

dnl We want feature macros defined here *and* in config.h.in, so that
dnl the compilation environment at configure time and compile time agree.

AC_MSG_CHECKING(for GNU libc)
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([#include <features.h>],[
#if ! (defined __GLIBC__ || defined __GNU_LIBRARY__)
#error Not a GNU libc system :-(
******* ======= ******** &&&&&&&&
#endif
])], have_glibc=yes, have_glibc=no)
AC_MSG_RESULT($have_glibc)
dnl I'm tired of pop being broken with GLIBC -slb
dnl Well. then why not fix fucking pop?
if test "$have_glibc" = "yes"; then
  dnl Defining _GNU_SOURCE on its own isn't helpful, since autoconf is very
  dnl enthusiastic about defining it on non-GNU systems. Make a separate
  dnl HAVE_GLIBC available.
  AC_DEFINE(HAVE_GLIBC)
  AC_DEFINE(_GNU_SOURCE)
fi

dnl We'd like to use vendor extensions, where available.
dnl We'd like to use functions from the latest Unix98 standards.
dnl See http://www.opengroup.org/onlinepubs/007908799/xsh/compilation.html
case "$opsys" in
  sol2)
   AC_DEFINE(__EXTENSIONS__)
   dnl Solaris 2 before 2.5 had some bugs with feature test macro interaction.
   if test "$os_release" -ge 505; then
     AC_DEFINE(_XOPEN_SOURCE,500)
     AC_DEFINE(_XOPEN_SOURCE_EXTENDED)
   fi ;;
  linux)
    AC_DEFINE(_POSIX_C_SOURCE,199506L)
    dnl #### should this be 600?
    AC_DEFINE(_XOPEN_SOURCE,500)
    AC_DEFINE(_XOPEN_SOURCE_EXTENDED)
    ;;
  freebsd4*)
    AC_DEFINE(_POSIX_C_SOURCE,199506L)
    dnl #### Do we want these too?  Apparently yes for _XOPEN_SOURCE=500.
    AC_DEFINE(_XOPEN_SOURCE,500)
    dnl AC_DEFINE(_XOPEN_SOURCE_EXTENDED)
    ;;
esac

dnl Identify compilers to enable compiler-specific hacks.
dnl Add support for other compilers HERE!
dnl GCC is already identified elsewhere.
AC_RUN_IFELSE([AC_LANG_SOURCE([int main () {
#if defined __SUNPRO_C
return 11;
#elif defined __DECC
return 12;
#elif defined __USLC__ && defined __SCO_VERSION__
return 13;
#elif defined __INTEL_COMPILER
return 14;
#else
return 0;
#endif
}])], [],
[case "$?" in
  11) echo "You appear to be using the SunPro C compiler." ; __SUNPRO_C=yes ;;
  12) echo "You appear to be using the DEC C compiler."    ; __DECC=yes ;;
  13) echo "You appear to be using the SCO C compiler."    ; __USLC__=yes ;;
  14) echo "You appear to be using the Intel C++ compiler."; __ICC=yes
      dnl Newer versions of icc claim to be GCC
      GCC=no ;;
esac])

dnl --------------------------------------------------------------------
dnl Extract some information from the operating system and machine files
dnl --------------------------------------------------------------------

echo "Extracting information from the machine- and system-dependent headers..."

dnl It is not important that this name contain the PID; you cannot run
dnl two configures in the same directory and have anything work
dnl anyway.
tempcname="conftest.c"

cat > $tempcname < confdefs.h
cat >> $tempcname <<EOF
#define NOT_C_CODE
#define C_SWITCH_SITE
#define C_SWITCH_X_SITE
#define LD_SWITCH_SITE
#define LD_SWITCH_X_SITE
#define LD_SWITCH_X_SITE_AUX
#define OS_RELEASE $os_release

#ifdef config_opsysfile
#include "$srcdir/src/$opsysfile"
#endif

#ifdef config_machfile
#include "$srcdir/src/$machfile"
#endif

CPP_to_sh(LIBS_MACHINE, libs_machine)
CPP_to_sh(LIBS_SYSTEM,  libs_system)
CPP_to_sh(LIBS_TERMCAP, libs_termcap)
CPP_to_sh(LIB_STANDARD, libs_standard)

CPP_to_sh(OBJECTS_MACHINE, objects_machine)
CPP_to_sh(OBJECTS_SYSTEM,  objects_system)

CPP_to_sh(C_SWITCH_MACHINE,   c_switch_machine)
CPP_to_sh(C_SWITCH_SYSTEM,    c_switch_system)

CPP_to_sh(LD_SWITCH_MACHINE,  ld_switch_machine)
CPP_to_sh(LD_SWITCH_SYSTEM,   ld_switch_system)

CPP_to_sh(UNEXEC, unexec)

CPP_to_sh(SYSTEM_TYPE, system_type)

CPP_to_sh(LD_SWITCH_SHARED, ld_switch_shared, -c)

#define ORDINARY_LD "\$(CC) \$(CFLAGS)"
configure___ ordinary_ld=ORDINARY_LD

#ifdef ORDINARY_LINK
#define LD ORDINARY_LD
#else /* no ORDINARY LINK */
#ifdef LINKER
#define LD LINKER
#else /* ! defined (LINKER) */
#define LD "ld"
#endif /* ! defined (LINKER) */
#endif /* not ORDINARY_LINK */
configure___ ld=LD

CPP_to_sh(LIB_GCC, lib_gcc)
CPP_to_sh(LD_TEXT_START_ADDR, ld_text_start_addr)

#if ! defined (ORDINARY_LINK) && !defined (START_FILES)
#ifdef NO_REMAP
#define START_FILES "pre-crt0.o /lib/crt0.o"
#else /* ! defined (NO_REMAP) */
#define START_FILES "ecrt0.o"
#endif /* ! defined (NO_REMAP) */
#endif /* no ORDINARY_LINK */
#ifndef START_FILES
#define START_FILES
#endif
configure___ start_files=START_FILES

CPP_boolean_to_sh(ORDINARY_LINK, ordinary_link)
CPP_boolean_to_sh(TERMINFO, have_terminfo)
dnl The MAIL_USE_xxx variables come from the s&m headers
CPP_boolean_to_sh(MAIL_USE_FLOCK, mail_use_flock)
CPP_boolean_to_sh(MAIL_USE_LOCKF, mail_use_lockf)
CPP_boolean_to_sh(MAIL_USE_LOCKING, mail_use_locking)
CPP_boolean_to_sh(HAVE_WIN32_PROCESSES, win32_processes)
EOF

dnl The value of CPP is a quoted variable reference, so we need to do this
dnl to get its actual value...
CPP=`eval "echo $CPP $CPPFLAGS"`
define(TAB, [	])dnl
eval `$CPP -Isrc $tempcname \
	| sed -n -e "s/[[ TAB]]*=[[ TAB\"]]*/='/" -e "s/[[ TAB\"]]*\$/'/" -e "s/^configure___//p"`

rm $tempcname

dnl s&m files shouldn't be required to define anything, or even to exist.
dnl So we default SYSTEM_TYPE to the obvious documented standard, `uname -s`,
dnl appropriately emacsulated.
test -z "$system_type" && \
  AC_DEFINE_UNQUOTED(SYSTEM_TYPE,"`uname -s | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`")

dnl If the s&m files don't define a system-specific dumper, simply use pdump.
dnl Sometime in the future, we'll remove all definitions of UNEXEC
dnl from all the s&m files.
test -z "$unexec" && with_pdump=yes

if test "$with_pdump" = "yes"; then
  ordinary_link="yes"
  ld="${ordinary_ld}"
  start_files=
  libs_standard=
  unexec=
  lib_gcc=
fi

dnl Enable KKCC by default
test -z "$with_kkcc" && with_kkcc=yes

dnl Dump into executable
if test -z "$with_dump_in_exec"; then
  if test "$with_pdump" = "yes"; then
    if test "$with_newgc" = "yes"; then
      with_dump_in_exec=no
    else
      with_dump_in_exec=yes
    fi
  fi
fi

dnl New incremental garbage collector
if test "$with_newgc" = "yes"; then
  with_kkcc=yes
fi

dnl For debugging...
test "$verbose" = "yes" && \
  PRINT_VAR(libs_machine libs_system libs_termcap libs_standard
  objects_machine objects_system c_switch_machine c_switch_system
  ld_switch_machine ld_switch_system unexec ld_switch_shared
  ld lib_gcc ld_text_start_addr start_files ordinary_link
  have_terminfo mail_use_flock mail_use_lockf) && echo ""

dnl Pick up mingw include path
dnl We only cope with headers in mingw, not mingw32: no previous version of
dnl XEmacs supported mingw and cygnus have made this incompatible change
dnl so we just go with the flow.
case "$opsys" in mingw* | cygwin*)
  cygwin_include=`eval gcc -print-search-dirs | sed -ne s'/install: //p'`
  cygwin_include=`eval "cd $cygwin_include/../../../..; pwd"`
  cygwin_include="-I$cygwin_include/include" ;
  extra_includes="$cygwin_include/mingw $cygwin_include" ;
  case "$opsys" in mingw*)
    XE_APPEND($extra_includes, c_switch_system) ;;
  esac
  ;;
esac

dnl Non-ordinary link usually requires -lc
test "$ordinary_link" = "no" -a -z "$libs_standard" && libs_standard="-lc"

dnl -----------------------
dnl Compiler-specific hacks
dnl -----------------------

dnl DEC C `-std1' means ANSI C mode
test "$__DECC" = "yes" && XE_APPEND(-std1, c_switch_site)

dnl Some versions of SCO native compiler need -Kalloca
if test "$__USLC__" = yes; then
  AC_MSG_CHECKING(for whether the -Kalloca compiler flag is needed)
  need_kalloca=no
  AC_LINK_IFELSE([AC_LANG_PROGRAM([], [void *x = alloca(4);])], [:], [
    xe_save_c_switch_system="$c_switch_system"
    c_switch_system="$c_switch_system -Kalloca"
    AC_LINK_IFELSE([AC_LANG_PROGRAM([], [void *x = alloca(4);])],
      [ need_kalloca=yes ])
    c_switch_system="$xe_save_c_switch_system"])
  AC_MSG_RESULT($need_kalloca)
  test "$need_kalloca" = "yes" && XE_APPEND(-Kalloca,c_switch_system)
fi

dnl If we're specifying XEMACS_CC, it'd better be in the same family
dnl as CC or the following flag calculations are bogus.
dnl No error/abort; detection is too fragile.

xemacs_cc_cc_mismatch=no
if test "$CC" != "$XEMACS_CC"; then
  if test "$XEMACS_CC_GPP" = "yes" -a "$GCC" != "yes"; then
    AC_MSG_WARN([CC and g++ are mismatched; XE_CFLAGS may be wrong])
    xemacs_cc_cc_mismatch=yes
  fi
  if test -n "$GCC" -a "$XEMACS_CC_GPP" != "yes" ; then
    AC_MSG_WARN([gcc and XEMACS_CC are mismatched; XE_CFLAGS may be wrong])
    xemacs_cc_cc_mismatch=yes
  fi
  dnl #### Add other detectable mismatches here.
fi

dnl Calculate optimization flags.  These will be off by default in beta
dnl versions and on in release versions.

if test -z "$with_optimization"; then
  # If user set --with-cflags-optimization, use it to unilaterally
  # determine whether optimization should be enabled.
  if test "$cflags_optimization_specified" = "yes" ; then
    if test -z "$with_cflags_optimization" ; then
      with_optimization=no
    else
      with_optimization=yes
    fi
  elif test -z "$emacs_is_beta" ; then
    with_optimization=yes
  else
    with_optimization=no
  fi
fi

AC_MSG_CHECKING([for preferred optimization flags])
if test "$cflags_optimization_specified" = "no"; then
  if test "$with_optimization" = "yes" ; then
    dnl Following values of cflags_optimization are known to work well.
    dnl Should we take debugging options into consideration?
    if test "$GCC" = "yes"; then
      dnl If you want to remove the -fno-strict-aliasing, then you will have
      dnl to rewrite all cases of "type-punning" expressions like
      dnl (* (foo *) (&bar)), which occur all over XEmacs, by making `bar' a
      dnl union (use an anonymous union if you're willing to put in an ifdef
      dnl for anon-union support, falling back to the type-punned expression.
      with_cflags_optimization="-O3 -fno-strict-aliasing"
    elif test "$__SUNPRO_C" = "yes"; then
      case "$opsys" in
        sol2    ) with_cflags_optimization="-xO4" ;;
      esac
    elif test "$__DECC" = "yes"; then
      with_cflags_optimization="-O3"
    elif test "$CC" = "xlc"; then
      dnl see http://www.nersc.gov/vendor_docs/ibm/vac/sc094959.pdf
      with_cflags_optimization="-O3 -qstrict -qnoansialias -qlibansi -qmaxmem=20000"
    elif test "$__ICC" = "yes"; then
      with_cflags_optimization="-O3 -Ob2"
    elif test "$opsys" = "irix6-5"; then
      dnl Optimize, inaccurate debugging, increase limit on size of what's
      dnl optimized.
      dnl
      dnl This should also be applicable other than on Irix 6.5, but I don't
      dnl know for which compiler versions.  -- fx
      with_cflags_optimization="-O -OPT:Olimit=3500"
    dnl #### FIXME FOR LCC:
    dnl elif test "USE_LCC" = "yes"; then
    dnl   with_cflags_optimization="-O4 -Oi"
    dnl ### Add optimal cflags_optimization support for other compilers HERE!
    else
      with_cflags_optimization="-O" ;dnl The only POSIX-approved flag
    fi
  elif test "$XEMACS_CC_GPP" = "yes" ; then
    dnl Fuck me!  g++ v4 turns on strict aliasing by default, even without
    dnl optimization.  See comment above about why we can't have strict
    dnl aliasing currently in XEmacs.
    with_cflags_optimization="-fno-strict-aliasing"
  fi
fi

AC_MSG_RESULT([${with_cflags_optimization}])

AC_MSG_CHECKING([for preferred debugging flags])
if test "$cflags_debugging_specified" = "no"; then
  if test "$GCC" = "no" -a "$opsys" = "irix6-5" -a "$with_optimization" = "yes" ; then
    dnl MIPSpro C special debugging stuff for use with optimization
    with_cflags_debugging="-g3"
  dnl ### Add optimal debugging support for other compilers HERE!
  else
    with_cflags_debugging="-g"
  fi
  
  debugging_ok_with_optimization=no
  if test "$GCC" = "yes" -o "$CC" = "xlc" -o "$__ICC" = "yes" -o "$opsys" = "irix6-5"; then
    debugging_ok_with_optimization=yes
  fi
  
  if test "$with_optimization" = "yes" -a "$debugging_ok_with_optimization" = "no"; then
    with_cflags_debugging=
  fi
fi
AC_MSG_RESULT([${with_cflags_debugging}])

dnl Calculate warning flags.  We separate the flags for warnings from
dnl the other flags because we want to force the warnings to be seen
dnl by everyone who doesn't specifically override them.

AC_MSG_CHECKING([for preferred warning flags for XEMACS_CC])

dnl If this stays nil, it will be set to cflags_warning before use.
xe_cflags_warning=""

if test "$cflags_warning_specified" = "no"; then
  dnl Following warning flags are known to work well.
  if test "$__SUNPRO_C" = "yes"; then
    case "$opsys" in
      sol2    ) with_cflags_warning="-v" ;;
    esac
  elif test "$CC" = "xlc"; then
    with_cflags_warning="-qinfo"
  elif test "$GCC" = "yes"; then
    with_cflags_warning="-Wall -Wno-switch -Wundef"
    dnl This is not very useful, as it issues warnings that may appear
    dnl or disappear rather randomly, cannot easily be fixed, and are
    dnl not a big deal.  If you want it, add it yourself.
    dnl with_cflags_warning="$with_cflags_warning -Winline"

    dnl Yuck, bad compares have been worth at least 3 crashes!
    dnl Warnings about char subscripts are pretty pointless, though,
    dnl and we use them in various places.
    with_cflags_warning="$with_cflags_warning -Wsign-compare -Wno-char-subscripts"
    test "$__GCC" -ge 3 && with_cflags_warning="$with_cflags_warning -Wpacked"
    dnl glibc is intentionally not `-Wpointer-arith'-clean.
    dnl Ulrich Drepper has rejected patches to fix the glibc header files.
    test "$have_glibc" != "yes" && \
      with_cflags_warning="$with_cflags_warning -Wpointer-arith"
    dnl
    dnl Warning flags that may differ for gcc and g++ (xemacs_compiler)
    dnl
    dnl With g++, -Wshadow produces five zillion utterly random warnings --
    dnl a local var named `buffer' conflicts with `struct buffer' for
    dnl example.  Even with gcc, -Wshadow is questionable because of its
    dnl complaints about parameters with the same names as global functions.
    dnl There is no -Wmissing-declarations, -Wmissing-prototypes, or
    dnl -Wstrict-prototypes under g++.
    dnl But gcc warns about -Weffc++ in C compiles.
    dnl
    dnl with_cflags_warning_c is for C-only warnings.
    dnl with_cflags_warning_cxx is for C++-only warnings.
    dnl with_cflags_warning_c_xe is for C-only warnings and only when
    dnl   compiling the source tree (i.e. when --xemacs-compiler is used).
    with_cflags_warning_c="-Wshadow -Wmissing-declarations"
    with_cflags_warning_c="$with_cflags_warning_c -Wmissing-prototypes -Wstrict-prototypes"
    with_cflags_warning_cxx="-Weffc++"
    with_cflags_warning_c_xe=""
    dnl -Wunused-parameter only appeared in gcc 3.
    dnl -Wdeclaration-after-statement only appeared in gcc 3.4, and is C-only.
    dnl -Wunused-parameter is too annoying for use in lib-src, partly because
    dnl the UNUSED() decl is in compiler.h and we don't include that in any
    dnl of the lib-src files.
    dnl With g++, there is no effective way to use -Wunused-parameter without
    dnl some very ugly code changes.
    if test "$__GCC" -ge 3; then
      with_cflags_warning_c_xe="$with_cflags_warning_c_xe -Wunused-parameter"
      if test "$__GCC" -gt 3 || test "$__GCC_MINOR" -ge 4; then
        with_cflags_warning_c="$with_cflags_warning_c -Wdeclaration-after-statement"
      fi
    fi
    dnl **** If more gcc/g++ flags are added, add them above, not below
    dnl
    dnl Now set warnings for the source tree (xe_cflags_warning) and for
    dnl lib-src (with_cflags_warning).  Note that if we didn't set
    dnl xe_cflags_warning, it would automatically be initialized from
    dnl with_cflags_warning.
    if test "$XEMACS_CC_GPP" = "yes"; then
      xe_cflags_warning="$with_cflags_warning $with_cflags_warning_cxx"
    else
      xe_cflags_warning="$with_cflags_warning $with_cflags_warning_c $with_cflags_warning_c_xe"
    fi
    with_cflags_warning="$with_cflags_warning $with_cflags_warning_c"
  elif test "$__ICC" = "yes"; then
    dnl This will apply to both source tree and lib-src
    with_cflags_warning="-Wall -w1 -we147"
  dnl ### Add optimal with_cflags_warning support for other compilers HERE!
  fi
fi
test -z "$xe_cflags_warning" && xe_cflags_warning="$with_cflags_warning"
AC_MSG_RESULT([${xe_cflags_warning}])

AC_MSG_CHECKING([for preferred warning flags for CC])
AC_MSG_RESULT([${with_cflags_warning}])

dnl Calculate remaining cflags.
dnl Use either command line flag, environment var, or autodetection

AC_MSG_CHECKING([for remaining CFLAGS])

if test "$cflags_specified" = "no"; then
  dnl Following values of CFLAGS are known to work well.
  if test "$CC" = "xlc"; then
    CFLAGS="-qro"
  dnl ### Add optimal CFLAGS support for other compilers HERE!
  fi
fi
AC_MSG_RESULT([${CFLAGS}])

dnl Now combine all C flags.  Put the warning and optimization flags first
dnl so that user-specified flags will override.
dnl Do XE_CFLAGS before adding flags to CFLAGS.
dnl Flags for XEMACS_CC:

XE_CFLAGS="$xe_cflags_warning $with_cflags_debugging $with_cflags_optimization $CFLAGS"
dnl Flags for CC:
CFLAGS="$with_cflags_warning $with_cflags_debugging $with_cflags_optimization $CFLAGS"

AC_MSG_CHECKING([total value of XE_CFLAGS])
AC_MSG_RESULT([${XE_CFLAGS}])
AC_MSG_CHECKING([total value of CFLAGS])
AC_MSG_RESULT([${CFLAGS}])

dnl Search for GCC specific build problems we know about
if test "$GCC" = "yes"; then
AC_MSG_CHECKING(for buggy gcc versions)
GCC_VERSION=`$CC --version`
case `uname -s`:`uname -m`:$GCC_VERSION in
	dnl egcs 2.90.21 (egcs-1.00 release)
	dnl egcs 2.90.29 (egcs-1.0.3 release)
    *:sun4*:2.8.1|*:sun4*:egcs-2.90.*)
        dnl Don't use -O2 with gcc 2.8.1 and egcs 1.0 under SPARC architectures
        dnl without also using `-fno-schedule-insns'.
        case "$CFLAGS" in
            *-O2*|*-O3*)
                case "$CFLAGS" in
                    *-fno-schedule-insns*) ;;
                    *)
                        AC_MSG_RESULT(yes)
                        AC_MSG_WARN([Don't use -O2 with gcc 2.8.1 and egcs 1.0 under SPARC architectures])
                        AC_MSG_WARN([without also using -fno-schedule-insns.])
                        AC_MSG_ERROR([Aborting due to known problem])
                        ;;
                esac
                ;;
        esac
        ;;
	dnl egcs-2.91.57 (egcs-1.1 release)
	dnl egcs-2.91.66 (egcs-1.1.2 release)
    Linux:alpha:egcs-2.91.*)
        AC_MSG_RESULT(yes)
        AC_MSG_WARN([There have been reports of egcs-1.1 not compiling XEmacs correctly on])
        AC_MSG_WARN([Alpha Linux.  There have also been reports that egcs-1.0.3a is O.K.])
        AC_MSG_ERROR([Aborting due to known problem])
        ;;
    *:i*86*:2.7.2*)
	case "$CFLAGS" in
            *-O2*|*-O3*)
		case "$GCC_VERSION" in
		    2.7.2)
                	case "$CFLAGS" in
	                    *-fno-strength-reduce*) ;;
        	            *)
                                AC_MSG_RESULT(yes)
                      	        AC_MSG_WARN([Don't use -O2 with gcc 2.7.2 under Intel/XXX without also using])
	                        AC_MSG_WARN([-fno-strength-reduce.])
        	                AC_MSG_ERROR([Aborting due to known problem])
	                        ;;
	                esac
	                ;;
		esac
	        case "$CFLAGS" in
		 *-fno-caller-saves*) ;;
		 *)
	            AC_MSG_RESULT(yes)
		    AC_MSG_WARN([Don't use -O2 with gcc 2.7.2 under Intel/XXX without also using])
		    AC_MSG_WARN([-fno-caller-saves.])
	            AC_MSG_ERROR([Aborting due to known problem])
		    ;;
	        esac
		;;
	esac
	;;
esac
AC_MSG_RESULT(no)
fi

dnl GNU ld now defaults to combreloc, which screws up unexec, but not pdump.
dnl Note that it's OK if the GNU style long option causes non-GNU ld to barf
dnl a usage message, that's often good enough.  Please report it, though.
dnl #### Should make this Solaris-friendly.
dnl Link with -z nocombreloc for now.
if test "$with_pdump" != "yes"; then
  AC_MSG_CHECKING([for "-z nocombreloc" linker flag])
  case "`ld --help 2>&1`" in
    *-z\ nocombreloc* ) AC_MSG_RESULT(yes)
      XE_PREPEND(-z nocombreloc, ld_switch_site) ;;
    *) AC_MSG_RESULT(no) ;;
  esac
fi

dnl Inform compiler that certain flags are meant for the linker
XE_PROTECT_LINKER_FLAGS(ld_switch_system)
XE_PROTECT_LINKER_FLAGS(ld_switch_machine)
XE_PROTECT_LINKER_FLAGS(ld_switch_site)
XE_PROTECT_LINKER_FLAGS(LDFLAGS)
XE_PROTECT_LINKER_FLAGS(ld_call_shared)

dnl Add s&m-determined objects (including unexec) to link line
test -n "$objects_machine" && XE_ADD_OBJS($objects_machine)
test -n "$objects_system"  && XE_ADD_OBJS($objects_system)
test -n "$unexec"          && test ! "$with_pdump" = "yes" && XE_ADD_OBJS($unexec)
test "$with_pdump" = "yes" && XE_ADD_OBJS(dumper.o)

dnl Feed s&m crud to src/Makefile

dnl Linux/powerpc needs the following magic for some reason
dnl [Not needed with YellowDog 2.3 and causes link problems with YellowDog 3.0,
dnl the two most popular PowerPC distributions.]
dnl test "$machine$opsys" = "powerpclinux" && start_flags="-T $srcdir/src/ppc.ldscript"

AC_LANG(C)
if test "$unexec" = "unexaix.o"; then
dnl AIX needs various hacks to make static linking work.
  if   test "$with_dynamic" = "no"; then
  start_flags="-Wl,-bnso,-bnodelcsect"
  test "$GCC" = "yes" && start_flags="-B/bin/ ${start_flags}"
  for f in "/lib/syscalls.exp" "/lib/threads.exp"; do
    if test -r "$f"; then start_flags="${start_flags},-bI:${f}"; fi
  done
  for f in "/usr/lpp/X11/bin/smt.exp" "/usr/bin/X11/smt.exp"; do
    if test -r "$f"; then start_flags="${start_flags},-bI:${f}"; break; fi
  done
  AC_CHECK_LIB([c], [terminateAndUnload], [XE_APPEND(-lC, libs_system)])
  fi
elif test -n "$ld_text_start_addr"; then
  start_flags="-T $ld_text_start_addr -e __start"
fi
AC_SUBST(start_flags)

AC_SUBST(ld_switch_shared)
AC_SUBST(start_files)
if test "$ordinary_link" = "no" -a "$GCC" = "yes"; then
 test -z "$linker" &&  linker='$(CC) -nostdlib'
 test -z "$lib_gcc" && lib_gcc='`$(CC) -print-libgcc-file-name`'
fi
test "$GCC" != "yes" && lib_gcc=
AC_SUBST(ld)
AC_SUBST(lib_gcc)

dnl ---------------------------------------------------------------
dnl Get version information for:
dnl C compiler, libc
dnl #### should do CC compiler, too, if different from XEMACS_CC
dnl ---------------------------------------------------------------

compiler_version=""
gcc_compiler_specs=""
libc_version=""

AC_MSG_CHECKING([for compiler version information])

dnl First try portable compilers, then crack system secrets
dnl #### Is this code correct if $XEMACS_CC != $CC?  XEMACS_CC hasn't been
dnl run through the AC_PROG_CC mill.
dnl Would anybody really build libsrc with GCC and XEmacs with non-GCC?
if test "$GCC" = "yes"; then
  compiler_version=`$XEMACS_CC --version | sed 1q`
  gcc_compiler_specs=`$XEMACS_CC -v 2>&1 | sed 's/.* \([[^ ]]\)/\1/' | sed 1q`
else case "$XEMACS_CC" in
  dnl The Intel cc compiler
  ic*)
    compiler_version=`icc -V 2>&1 | sed 1q`
    ;;
  dnl non-gcc machine-specific magic - contributions welcome
  *) case "$ac_cv_build" in
	*-*-aix*   ) 
          dnl Yes, it's this ugly for AIX...
	  realcc=`which $XEMACS_CC`
	  dnl Might be a symlink created by replaceCset command
	  if test -L $realcc ; then
	    ccdir=`dirname $realcc`
	    ccprog=`/bin/ls -l $realcc | sed 's/.* \([[^ ]]\)/\1/'`
	    dnl This doesn't handle ../../xlc type stuff, but I've not seen one...
	    case $ccprog in
		*/*) realcc=$ccprog;;
		*) realcc=$ccdir/$ccprog;;
	    esac
	  fi
	  lpp=`lslpp -wqc $realcc | cut -f2 -d:`
	  if test ! -z "$lpp" ; then
	    lppstr=`lslpp -Lqc $lpp`
	    lpplev=`echo "$lppstr" | cut -f3 -d:`
	    lppdesc=`echo "$lppstr" | cut -f8 -d:`
	  fi
	  if test ! -z "$lpplev" ; then
	    compiler_version="$lpp $lpplev - $lppdesc"
	  fi
	;;

	*-*-solaris*)
	  compiler_version=`$XEMACS_CC -V 2>&1 | sed 1q`
	;;

	alpha*-dec-osf*)
	  compiler_version=`$XEMACS_CC -V | tr '\n' ' '`
	;;

	mips-sgi-irix*)
	  compiler_version=`$XEMACS_CC -version`
	;;
    esac
  esac
fi

dnl Awww, shucks.
if test -z "$compiler_version"; then
  compiler_version="detection failed (please report this)"
fi
AC_MSG_RESULT([$compiler_version])

AC_MSG_CHECKING(for standard C library version information)

case "$ac_cv_build" in
	*-*-linux*)
	  dnl #### who would ever _not_ be running the distro's libc?
	  dnl Maybe it would be better to get/augment this info with ldd?
	  if test -f /etc/redhat-release ; then
	    libc_version=`rpm -q glibc`
	  elif test -f /etc/debian_version ; then
	    libc_version=`dpkg-query --showformat='${version}' --show libc6`
	    libc_version="GNU libc $libc_version (Debian)"
	  dnl need SuSE et al checks here...
	  fi
	  dnl #### Tested on Debian, does this actually work elsewhere?  ;-)
          if test -z "$libc_version"; then
	    libc_version=`ls /lib/libc-*.so | sed -e 's,/lib/libc-\(.*\)\.so,\1,'`
          fi
	;;

	*-*-aix*)
	  libc_version="bos.rte.libc `lslpp -Lqc bos.rte.libc | cut -f3 -d:`" 
	;;

	*-*-solaris*)
	  libc=`pkginfo -l SUNWcsl | grep VERSION: | awk '{print $2}'`
	  libc_version="SUNWcsl $libc"

	;;

	mips-sgi-irix*)
	  libc_version="IRIX libc `uname -sRm`"
	;;
	  
	alpha*-dec-osf*)
	dnl Another ugly case
	  (cd /usr/.smdb.;
		libc_version=` grep -h libc.so *.inv | awk '$9 == "f" {print $12}' | tr '\n' ','`
	  )
	;;
esac

dnl Awww, shucks.
if test -z "libc_version"; then
  libc_version="detection failed (please report this)"
fi
AC_MSG_RESULT([$libc_version])

dnl ---------------------------------------------------------------
dnl Add site and system specific flags to compile and link commands
dnl ---------------------------------------------------------------

dnl --with-site-libraries (multiple dirs)
COLON_TO_SPACE(with_site_libraries)
if test -n "$with_site_libraries"; then
  for arg in $with_site_libraries; do
    case "$arg" in
     -* ) ;;
     * ) test -d "$arg" || \
           XE_DIE("Invalid site library \`$arg': no such directory")
       arg="-L${arg}" ;;
    esac
    XE_APPEND($arg, ld_switch_site)
  done
fi

dnl --with-site-includes (multiple dirs)
COLON_TO_SPACE(with_site_includes)
if test -n "$with_site_includes"; then
  for arg in $with_site_includes; do
    case "$arg" in
      -* ) ;;
      * ) test -d "$arg" || \
           XE_DIE("Invalid site include \`$arg': no such directory")
      arg="-I${arg}" ;;
    esac
    XE_APPEND($arg, c_switch_site)
  done
fi

dnl --with-site-prefixes (multiple dirs)
dnl --with-site-prefixes=dir1:dir2 is a convenient shorthand for
dnl --with-site-libraries=dir1/lib:dir2/lib --with-site-includes=dir1/include:dir2/include
dnl Site prefixes take precedence over the standard places, but not over
dnl with-site-includes and with-site-libraries.
COLON_TO_SPACE(with_site_prefixes)
if test -n "$with_site_prefixes"; then
  for dir in $with_site_prefixes; do
    lib_dir="${dir}/lib"
    inc_dir="${dir}/include"
    if test ! -d "$dir"; then
      XE_DIE("Invalid site prefix \`$dir': no such directory")
    elif test ! -d "$lib_dir"; then
      XE_DIE("Invalid site prefix \`$dir': no such directory \`$lib_dir'")
    else
      if test -d "$inc_dir"; then
	XE_APPEND("-I$inc_dir", c_switch_site)
      fi
      XE_APPEND("-L$lib_dir", ld_switch_site)
    fi
  done
fi

dnl GNU software installs by default into /usr/local/{include,lib}
dnl if test -d "/usr/local/include" -a -d "/usr/local/lib"; then
dnl   XE_APPEND("-L/usr/local/lib",    ld_switch_site)
dnl   XE_APPEND("-I/usr/local/include", c_switch_site)
dnl fi

dnl Extra system-specific library directories - please add to list
for dir in "/usr/ccs/lib"; do
  test -d "$dir" && XE_APPEND(-L${dir}, ld_switch_system)
done

dnl --with-site-runtime-libraries (multiple dirs)
COLON_TO_SPACE(with_site_runtime_libraries)
if test -n "$with_site_runtime_libraries"; then
  LD_RUN_PATH="`echo $with_site_runtime_libraries | sed -e 's/  */:/g'`"
  export LD_RUN_PATH
fi

dnl Linux systems have dynamic runtime library directories listed in
dnl /etc/ld.so.conf.  Since those are used at run time, it seems pretty
dnl safe to use them at link time, and less controversial than forcing
dnl the run-time to use the link-time libraries.  This also helps avoid
dnl mismatches between the link-time and run-time libraries.

dnl #### Unfortunately, there are horrible libc4 and libc5 libraries
dnl listed in /etc/ld.so.conf on some systems, and including them on
dnl the link path leads to linking in utterly broken libc's.
dnl There are many clever ways of approaching this problem,
dnl but finding one that actually works...

dnl if test -z "$LD_RUN_PATH" -a -r "/etc/ld.so.conf"; then
dnl   for dir in `cat /etc/ld.so.conf`; do
dnl     test -d "$dir" && XE_APPEND(-L${dir}, ld_switch_system)
dnl   done
dnl   add_runtime_path=no
dnl fi

dnl -------------------------------------
dnl Compute runtime library path
dnl -------------------------------------

if test -n "$add_runtime_path"; then :;
elif test "$with_dynamic" = "no"; then add_runtime_path=no
elif test -n "$LD_RUN_PATH"; then add_runtime_path=yes
else case "$opsys" in
       sol2 | irix* | *bsd* ) add_runtime_path=yes ;;
       * ) add_runtime_path=no ;;
     esac
fi

if test "$add_runtime_path" = "yes"; then
  dnl Try to autodetect runtime library flag (usually -R),
  dnl and whether it works (or at least does no harm)
  AC_MSG_CHECKING([for runtime libraries flag])
  case "$opsys" in
    sol2 ) dash_r="-R" ;;
    linux* | irix*) dash_r="-rpath " ;;
    *)
      dash_r=""
      for try_dash_r in "-R" "-R " "-rpath "; do
        xe_check_libs="${try_dash_r}/no/such/file-or-directory"
        XE_PROTECT_LINKER_FLAGS(xe_check_libs)
        AC_LINK_IFELSE([], dash_r="$try_dash_r")
        xe_check_libs=""
        test -n "$dash_r" && break
      done ;;
  esac
  if test -n "$dash_r";
    then AC_MSG_RESULT(["${dash_r}"])
    else AC_MSG_RESULT(NONE)
  fi
fi

xe_add_unique_runpath_dir='
  xe_add_p=yes
  for xe_dir in $runpath_dirs; do   dnl Uniquify
    test "$xe_dir" = "$xe_runpath_dir" && xe_add_p=no
  done
  if test "$xe_add_p" = "yes"; then
    test -n "$runpath" && runpath="${runpath}:"
    runpath="${runpath}${xe_runpath_dir}"
    runpath_dirs="$runpath_dirs $xe_runpath_dir"
  fi'

XE_COMPUTE_RUNPATH()

dnl -----------------------------------
dnl Do some misc autoconf-special tests
dnl -----------------------------------

dnl We used to include a copy of gmalloc.c, and would usually use that. Now
dnl that most Linuxes have gmalloc, and now that that's more maintained than
dnl is our copy, use the system malloc() instead, even on non-Linux
dnl platforms.

AC_MSG_CHECKING(whether __after_morecore_hook exists)
AC_LINK_IFELSE([AC_LANG_PROGRAM([extern void (* __after_morecore_hook)();],
[__after_morecore_hook = 0])],
[AC_MSG_RESULT(yes)
 after_morecore_hook_exists=yes],
[AC_MSG_RESULT(no)
 after_morecore_hook_exists=no])
if test "$after_morecore_hook_exists" = "yes" ; then
  AC_DEFINE(HAVE_MALLOC_WARNING)
fi

dnl Use the support for for malloc debugging in libc if available.
have_libmcheck=no
if test "$with_error_checking_malloc" = "yes" -a "$have_glibc" = "yes" ; then
  AC_CHECK_HEADERS(mcheck.h)
  AC_CHECK_LIB(mcheck, mcheck, have_libmcheck=yes, have_libmcheck=no)
fi

if test "$have_libmcheck" = "yes"; then
  AC_DEFINE(HAVE_LIBMCHECK)
  libmcheck=-lmcheck
  AC_SUBST(libmcheck)
fi

dnl Some other nice autoconf tests.  If you add a test here which
dnl should make an entry in src/config.h, do not forget to add an
dnl #undef clause to src/config.h.in for autoconf to modify.

dnl Sun likes to hide these utilities.  Steve Baur asked that we make
dnl the failure occur at configure time, not at use time.
AC_CHECK_PROG(AR,ar,ar,not_found)
if test "$AR" = "not_found"; then
  XE_DIE(["ar not found -- is PATH set correctly?"])
fi
dnl These tests don't necessarily check that the program exists.
AC_PROG_RANLIB
AC_PROG_INSTALL
AC_PROG_YACC

dnl We need a recent version of makeinfo
AC_MSG_CHECKING([for makeinfo >= 4.12])
MAKEINFO=
for prog in `which -a makeinfo`; do
  mi_verstr=[`$prog --version | sed -n '1s/^.* \([0-9][0-9]*\.[0-9][0-9]*\)$/\1/p'`]
  mi_major=`echo $mi_verstr | cut -d. -f1`
  mi_minor=`echo $mi_verstr | cut -d. -f2`
  if test "$mi_major" -gt 4 || ( test "$mi_major" -eq 4 && test "$mi_minor" -gt 11 );
  then
    MAKEINFO=$prog
    break
  fi
done
if test -z $MAKEINFO; then
  AC_MSG_RESULT([no])
  AC_MSG_WARN([Found Makeinfo $mi_verstr.  4.12 or later required.])
else
  AC_MSG_RESULT([yes])
fi
AC_CONFIG_FILES([man/Makefile])

dnl checks for header files
AC_CHECK_HEADERS(dnl
  a.out.h dnl
  elf.h dnl
  cygwin/version.h dnl
  fcntl.h dnl
  libgen.h dnl
  locale.h dnl
  wchar.h dnl
  mach/mach.h dnl
  sys/param.h dnl
  sys/pstat.h dnl
  sys/resource.h dnl
  sys/time.h dnl
  sys/timeb.h dnl
  sys/times.h dnl
  sys/un.h dnl
  sys/vlimit.h dnl
  ulimit.h dnl
)
AC_HEADER_SYS_WAIT
AC_HEADER_STDC
AC_HEADER_TIME
AC_CHECK_DECLS([sys_siglist],,,
[#include <signal.h>
/* NetBSD declares sys_siglist in unistd.h.  */
#if HAVE_UNISTD_H
# include <unistd.h>
#endif
])


dnl ----------------------------------------------------------------
dnl Checking for utime() or utimes().
dnl We prefer utime, since it is more standard.
dnl Some systems have utime.h but do not declare the struct anyplace,
dnl so we use a more sophisticated test for utime than AC_CHECK_FUNCS.
dnl ----------------------------------------------------------------
AC_MSG_CHECKING(for utime)
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([#include <sys/types.h>
#include <utime.h>],
[struct utimbuf x; x.actime = x.modtime = 0; utime ("/", &x);])],
  [AC_MSG_RESULT(yes)
   AC_DEFINE(HAVE_UTIME)],
  [AC_MSG_RESULT(no)
   dnl We don't have utime(); how about utimes()?
   AC_CHECK_FUNCS(utimes)])


dnl checks for typedefs
AC_TYPE_SIGNAL
AC_TYPE_SIZE_T
AC_TYPE_PID_T
AC_TYPE_UID_T
AC_TYPE_MODE_T
AC_TYPE_OFF_T
dnl #### Translated from deprecated 2.13-ism.
dnl We probably want to DTRT with #ifdef HAVE_SSIZE_T in src/config.h.in.
dnl Specifically, we should typedef st sizeof(ssize_t) == sizeof(size_t).
AC_CHECK_TYPE([ssize_t],,
              [AC_DEFINE_UNQUOTED([ssize_t], [int],
                                  [Define to `int' if
                                   <sys/types.h> does not define.])])

dnl not AC_CHECK_TYPE; lisp.h does hairy conditional typedef
if test "$ac_cv_header_inttypes_h" != "yes"; then
AC_MSG_CHECKING(for intptr_t in sys/types.h)
AC_COMPILE_IFELSE([AC_LANG_SOURCE([#include <sys/types.h>
intptr_t x;
])],[AC_MSG_RESULT(yes)
      AC_DEFINE(HAVE_INTPTR_T_IN_SYS_TYPES_H,1)],
     [AC_MSG_RESULT(no)])
fi

dnl check for Unix98 socklen_t
AC_MSG_CHECKING(for socklen_t)
AC_COMPILE_IFELSE([AC_LANG_SOURCE([#include <sys/types.h>
#include <sys/socket.h>
socklen_t x;
])],[AC_MSG_RESULT(yes)],[
AC_COMPILE_IFELSE([AC_LANG_SOURCE([#include <sys/types.h>
#include <sys/socket.h>
int accept (int, struct sockaddr *, size_t *);
])],[
AC_MSG_RESULT(size_t)
AC_DEFINE(socklen_t,size_t)], [
AC_MSG_RESULT(int)
AC_DEFINE(socklen_t,int)])])

AC_MSG_CHECKING(for struct timeval)
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([#ifdef TIME_WITH_SYS_TIME
#include <sys/time.h>
#include <time.h>
#else
#ifdef HAVE_SYS_TIME_H
#include <sys/time.h>
#else
#include <time.h>
#endif
#endif], [static struct timeval x; x.tv_sec = x.tv_usec;])],
  [AC_MSG_RESULT(yes)
  HAVE_TIMEVAL=yes
  AC_DEFINE(HAVE_TIMEVAL)],
  [AC_MSG_RESULT(no)
   HAVE_TIMEVAL=no])

dnl checks for structure members
AC_STRUCT_TM
AC_STRUCT_TIMEZONE

dnl checks for compiler characteristics
AC_C_CONST

dnl check for Make feature
AC_PROG_MAKE_SET

dnl check byte order
AC_C_BIGENDIAN

dnl define SIZEOF_TYPE
AC_CHECK_SIZEOF(short)
if test "$ac_cv_sizeof_short" = 0; then
  echo ""
  echo "*** PANIC *** Configure tests are not working - compiler is broken."
  echo "*** PANIC *** Please examine config.log for compilation errors."
  exit 1
fi
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(void *)
AC_CHECK_SIZEOF(double)

dnl check for long file names
AC_SYS_LONG_FILE_NAMES

dnl check for large file support
AC_SYS_LARGEFILE
AC_FUNC_FSEEKO
AC_CHECK_SIZEOF(off_t)

dnl -lm is required for floating point support, among other things
AC_CHECK_FUNC(sin, ,AC_CHECK_LIB(m, sin))

AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <math.h>],
  [return atanh(1.0) + asinh(1.0) + acosh(1.0); ])],
  AC_DEFINE(HAVE_INVERSE_HYPERBOLIC))

dnl See if mkstemp is available
AC_CHECK_FUNCS(mkstemp)

dnl Determine type of mail locking from configure args and s&m headers
AC_MSG_CHECKING([type of mail spool file locking])
AC_MSG_RESULT()
AC_CHECK_FUNCS(lockf flock)
dnl The mail_use_xxx variables are set according to the s&m headers.
test -z "$with_mail_locking" -a "$mail_use_flock" = "yes" && with_mail_locking=flock
test -z "$with_mail_locking" -a "$mail_use_lockf" = "yes" && with_mail_locking=lockf
test -z "$with_mail_locking" -a "$mail_use_locking" = "yes" && with_mail_locking=locking
if   test -z "$with_mail_locking"; then
  case "$opsys" in cygwin* | mingw*)
    with_mail_locking=pop ;;
  esac
fi

if   test "$with_mail_locking" = "lockf"; then AC_DEFINE(MAIL_LOCK_LOCKF)
elif test "$with_mail_locking" = "flock"; then AC_DEFINE(MAIL_LOCK_FLOCK)
elif test "$with_mail_locking" = "locking"; then AC_DEFINE(MAIL_LOCK_LOCKING)
elif test "$with_mail_locking" = "pop"; then
  with_pop=yes
  with_mail_locking=
elif test "$with_mail_locking" = "mmdf"; then AC_DEFINE(MAIL_LOCK_MMDF)
else with_mail_locking="file"; AC_DEFINE(MAIL_LOCK_DOT)
fi
test "$with_mail_locking" = "lockf" -a "$ac_cv_func_lockf" != "yes" && \
  XE_DIE("lockf mail locking requested but not available.")
test "$with_mail_locking" = "flock" -a "$ac_cv_func_flock" != "yes" && \
  XE_DIE("flock mail locking requested but not available.")
test "$with_mail_locking" = "locking" -a "$ac_cv_func_locking" != "yes" && \
  XE_DIE("locking mail locking requested but not available.")

dnl ----------------------------------------------------------------
dnl Miscellaneous flags
dnl ----------------------------------------------------------------

AC_MSG_CHECKING(whether the -xildoff compiler flag is required)
if   ${CC-cc} '-###' -xildon  no_such_file.c 2>&1 | grep '^[^ ]*/ild ' > /dev/null ; then
  if ${CC-cc} '-###' -xildoff no_such_file.c 2>&1 | grep '^[^ ]*/ild ' > /dev/null ;
    then AC_MSG_RESULT(no);
    else AC_MSG_RESULT(yes); XE_APPEND(-xildoff, ld_switch_site)
  fi
  else AC_MSG_RESULT(no)
fi

dnl Link with "-z ignore" on Solaris if supported
if test "$opsys" = "sol2"; then
  if test "$os_release" -ge 506; then
    AC_MSG_CHECKING([for "-z ignore" linker flag])
    case "`ld -h 2>&1`" in
      *-z\ ignore\|record* ) AC_MSG_RESULT(yes)
        XE_PREPEND(-z ignore, ld_switch_site) ;;
      *) AC_MSG_RESULT(no) ;;
    esac
  fi
fi

dnl Disable ASLR on systems where it breaks pdump. Use start_flags for this
dnl rather than LDFLAGS, so it's only done for the XEmacs binary, and
dnl gnuclient, movemail and so on get ASLR if the system defaults to it.
AC_MSG_CHECKING([whether ASLR needs to be disabled])
AC_RUN_IFELSE([AC_LANG_SOURCE([#include <stdio.h>
static int test_func(void) { return 42; }
int main (int c, char **v) { if (--c) { printf ("%p", &test_func); } return 0; }])],
[test_func_address=`./conftest t`
if test "$test_func_address" = `./conftest t`    \
        -a "$test_func_address" = `./conftest t` \
        -a "$test_func_address" = `./conftest t` \
        -a "$test_func_address" = `./conftest t`; then
   dnl If your implementation of ASLR gives the same address for the same
   dnl function five times in a row within the lifetime of the universe, 
   dnl your implementation of ASLR needs significant revision.
   dnl (Yes, yes, if someone sat down and ran ./configure a huge number of
   dnl times on XEmacs code with the intention of making this give the wrong
   dnl answer, they might manage it, but there is no payoff for doing this.)
   AC_MSG_RESULT(no)
 else
   for try_no_pie in "-no-pie" "-Wl,-no_pie" "-nopie"; do
     xe_check_libs="${try_no_pie}"
     AC_LINK_IFELSE([], no_pie="${try_no_pie}")
     xe_check_libs=""
     if test -n "$no_pie"; then 
       dnl Don't be tempted to apply XE_PROTECT_LINKER_FLAGS() to this.
       dnl On Debian 9.2 Stretch the linker does not recognise -no-pie, it
       dnl needs to be handled by the GCC invocation.
       XE_APPEND($no_pie, start_flags)
       break;
     fi
   done
   if test -z "$no_pie"; then
     AC_MSG_ERROR([don't know how to disable ASLR on $ac_cv_build])
   fi
   AC_MSG_RESULT([yes, disabling address space layout randomization, xemacs binary])
 fi])

dnl ----------------------
dnl Choose a window system
dnl ----------------------

AC_MSG_CHECKING([for specified window system])
AC_MSG_RESULT()

dnl Autodetection of Gdk libraries and includes
dnl -------------------------------------------
dnl On some systems (FreeBSD springs to mind), they use
dnl versions on the utility routines, so instead of gtk-config
dnl you must use gtk12-config, etc, etc.

GNOME_CONFIG=no
GTK_CONFIG=no

if test "$with_gnome" != "no"; then
   AC_MSG_CHECKING(for GNOME configuration script)
   for possible in gnome-config
   do
      possible_version=`${possible} --version 2> /dev/null`
      if test "x${possible_version}" != "x"; then
              GNOME_CONFIG="${possible}"
              with_gnome=yes
              with_gtk=yes
              break
      fi
   done
   AC_MSG_RESULT([${GNOME_CONFIG}])
fi

if test "${GNOME_CONFIG}" != "no"; then
      GNOME_LIBS=`${GNOME_CONFIG} --libs gnomeui`
      GNOME_CFLAGS=`${GNOME_CONFIG} --cflags gnomeui`
      AC_DEFINE(HAVE_GNOME)
      XE_APPEND(${GNOME_LIBS}, libs_gtk)
      XE_APPEND(${GNOME_CFLAGS}, c_switch_gtk)
fi

if test "$with_gtk" != "no";then
   AC_MSG_CHECKING(for GTK configuration script)
   for possible in gtk12-config gtk14-config gtk-config
   do
      possible_version=`${possible} --version 2> /dev/null`
      if test "x${possible_version}" != "x"; then
              GTK_CONFIG="${possible}"
	      case "${possible_version}" in
        	1.0.*) AC_MSG_WARN([GTK 1.2 is required, please upgrade your version of GTK.]); with_gtk=no;;
	        1.3.*) AC_MSG_WARN([GTK 1.3 is not supported right now]); with_gtk=no;;
		1.2.*)
			with_gtk=yes
			break
			;;
	        *)     AC_MSG_WARN([Found unsupported version of GTK: $possible_version]);;
	      esac
      fi
   done
   AC_MSG_RESULT([${GTK_CONFIG}])
fi

if test "${GTK_CONFIG}" != "no"; then
      AC_MSG_CHECKING(gtk version)
      GTK_VERSION=`${GTK_CONFIG} --version`
      AC_MSG_RESULT(${GTK_VERSION})

      AC_MSG_CHECKING(gtk libs)
      GTK_LIBS=`${GTK_CONFIG} --libs`
      XE_APPEND(${GTK_LIBS}, libs_gtk)
      AC_MSG_RESULT(${GTK_LIBS})

      AC_MSG_CHECKING(gtk cflags)
      GTK_CFLAGS=`${GTK_CONFIG} --cflags`
      if test "$GCC" = "yes"; then
      	GTK_CFLAGS="${GTK_CFLAGS} -Wno-shadow"
      fi
      XE_APPEND(${GTK_CFLAGS}, c_switch_gtk)
      AC_MSG_RESULT(${GTK_CFLAGS})

      AC_CHECK_LIB(gdk_imlib, main, XE_PREPEND(-lgdk_imlib, libs_gtk))
      AC_CHECK_LIB(Imlib, Imlib_init, XE_APPEND(-lImlib, libs_gtk))
      AC_CHECK_FUNCS(gdk_imlib_init)

      AC_DEFINE(HAVE_XPM)
      AC_DEFINE(HAVE_GTK)
      AC_SUBST(GTK_CONFIG)

      window_system=gtk
      with_gtk=yes
      if test "$with_x11" != "no"; then
	AC_MSG_WARN([Configuring GTK, forcing with_x11 to no])
	with_x11=no
      fi

      for feature in scrollbars toolbars menubars dialogs widgets
      do
        eval "feature_value=\${with_${feature}}"
	case "${feature_value}" in
	yes|no|gtk|"" )
	    ;;
	* )
	  feature_conflict_with_gtk=yes
	  AC_MSG_WARN([--with-${feature}=${feature_value} is incompatible with --with-gtk]) ;;
	esac
      done
      if test "${feature_conflict_with_gtk}" = "yes"; then
	XE_DIE(["One or more GUI toolkit features conflict with GTK"])
      fi

      test "${with_scrollbars}" != "no" && with_scrollbars=gtk
      test "${with_toolbars}" != "no" && with_toolbars=gtk
      test "${with_menubars}" != "no" && with_menubars=gtk
      test "${with_dialogs}" != "no" && with_dialogs=gtk
      test "${with_widgets}" != "no" && with_widgets=gtk

      dnl Check for libglade support (it rocks)
      OLD_CFLAGS="${CFLAGS}"
      OLD_CPPFLAGS="${CPPFLAGS}"
      OLD_LDFLAGS="${LDFLAGS}"
      CFLAGS="${GTK_CFLAGS} ${CFLAGS}"
      CPPFLAGS="${GTK_CFLAGS} ${CFLAGS}"
      LDFLAGS="${LDFLAGS} ${GTK_LIBS}"
      AC_CHECK_HEADERS(glade/glade.h glade.h)
      AC_CHECK_LIB(xml, main, XE_PREPEND(-lxml, libs_gtk))
      AC_CHECK_LIB(glade, main, XE_PREPEND(-lglade, libs_gtk))
      AC_CHECK_LIB(glade-gnome, main, XE_PREPEND(-lglade-gnome, libs_gtk))
      AC_EGREP_HEADER([char \*txtdomain;], [glade/glade-xml.h],
                      [AC_MSG_RESULT(yes)
                       AC_DEFINE(LIBGLADE_XML_TXTDOMAIN,1)],
                      [AC_MSG_RESULT(no)])
      CFLAGS="${OLD_CFLAGS}"
      CPPFLAGS="${OLD_CPPFLAGS}"
      LDFLAGS="${OLD_LDFLAGS}"
fi

dnl We may eventually prefer gtk/gdk over vanilla X11...

if test "$with_x11" != "no"; then
  dnl User-specified --x-includes or --x-libraries implies --with-x11.
  test "$x_includes $x_libraries" != "NONE NONE" && \
   window_system=x11 with_x11=yes

  dnl Autodetection of X11 libraries and includes
  dnl -------------------------------------------
  dnl AC_PATH_XTRA thinks it can find our X headers and includes, but
  dnl it often gets it wrong, so we only use it as a last resort.

  dnl $OPENWINHOME implies --x-includes and --x-libraries
  dnl Not (yet) handled by autoconf2
  if test "$x_includes $x_libraries" = "NONE NONE" \
    -a -n "$OPENWINHOME" \
    -a "$OPENWINHOME" != "/usr/openwin" \
    -a -d "$OPENWINHOME"; then
      test -d "$OPENWINHOME/lib"           && x_libraries="$OPENWINHOME/lib"
      test -d "$OPENWINHOME/include"       && x_includes="$OPENWINHOME/include"
      test -d "$OPENWINHOME/share/include" && x_includes="$OPENWINHOME/share/include"
  fi

  if test "$x_includes" = "NONE"; then
    dnl AC_PATH_XTRA often guesses /usr/include, when some other
    dnl include directory is a MUCH better guess (Linux, HP-UX 10.20).
    dnl This is a workaround for idiot (esp. HP) system vendors, who
    dnl provide a /usr/include/X11, but DON'T FULLY POPULATE IT.
    for dir in "/usr/X11" "/usr/X11R6"; do
      if test -d "$dir/include/X11"; then x_includes="$dir/include"; break; fi
    done
  fi

  if test "$x_libraries" = "NONE"; then
    for dir in "/usr/X11/lib" "/usr/X11R6/lib" "/usr/lib/X11R6"; do
      if test -r "$dir/libX11.a"; then x_libraries="$dir"; break; fi
    done
  fi

  AC_PATH_XTRA # Autoconf claims to find X library and include dirs for us.
  if test "$no_x" = "yes"
  then with_x11=no  window_system=none HAVE_X_WINDOWS=no
  else with_x11=yes window_system=x11  HAVE_X_WINDOWS=yes
  fi
fi

dnl #### wmperry:: !x11 != NONE
dnl case "$with_x11" in
dnl  yes ) window_system=x11  HAVE_X_WINDOWS=yes ;;
dnl  no  ) window_system=none HAVE_X_WINDOWS=no  ;;
dnl esac

if test "$with_x11" = "yes"; then
  AC_DEFINE(HAVE_X_WINDOWS)
  XE_APPEND(lwlib, MAKE_SUBDIR)
  XE_APPEND(lwlib, SRC_SUBDIR_DEPS)

  dnl Look for Motif, but only if not found in $x_includes and $x_libraries
  AC_CHECK_HEADER(Xm/Xm.h, [AC_CHECK_LIB(Xm, XmStringFree, got_motif=yes)])

  if test "$got_motif" != "yes"; then
    dnl Try to find Motif/CDE/Tooltalk dirs
    dnl These take precedence over other X libs/includes, so PRE-pend
    for lib_dir in "/usr/dt/lib" "/usr/lib/Motif2.1" \
                   "/usr/lib/Motif1.2" "/usr/lib/Motif1.1"; do
      inc_dir=`echo $lib_dir | sed -e 's/lib/include/'`
      if test -d "$lib_dir" -a -d "$inc_dir"; then
	case "$x_libraries" in *"$lib_dir"* ) ;; *)
	  x_libraries="$lib_dir $x_libraries"
	  XE_PREPEND(-L${lib_dir}, X_LIBS) ;;
	esac
	case "$x_includes" in "$inc_dir"* ) ;; *)
	  x_includes="$inc_dir $x_includes"
	  XE_PREPEND(-I${inc_dir}, X_CFLAGS) ;;
	esac
	break; dnl only need ONE Motif implementation!
	fi
    done
  fi

  dnl Contrib X libs/includes do NOT take precedence, so AP-pend
  for rel in "X11R6" "X11R5" "X11R4"; do
    lib_dir="/usr/contrib/$rel/lib" inc_dir="/usr/contrib/$rel/include"
    if test -d "$lib_dir" -a -d "$inc_dir"; then
      case "$x_libraries" in *"$lib_dir"* ) ;; *)
        x_libraries="$x_libraries $lib_dir"
	XE_APPEND(-L${lib_dir}, X_LIBS)
      esac
      case "$x_includes" in "$inc_dir"* ) ;; *)
        x_includes="$x_includes $inc_dir"
        XE_APPEND(-I${inc_dir}, X_CFLAGS)
      esac
      break; dnl Only need ONE X11 implementation !
    fi
  done

  ld_switch_x_site="$X_LIBS"

  XE_COMPUTE_RUNPATH()

  if test "$verbose" = "yes"; then
    echo; echo "X11 compilation variables:"
    PRINT_VAR(x_libraries x_includes X_CFLAGS X_LIBS X_PRE_LIBS X_EXTRA_LIBS)
    echo
  fi

  dnl Set up bitmaps search path.
  dnl The original suggestion was to unconditionally to append X11/bitmaps
  dnl to each element of $x_includes, I'm pretty sure this is the wrong
  dnl thing to do.  We test for bitmaps and X11/bitmaps directories on each
  dnl element and add them to BITMAPDIR if they exist.
  bitmapdirs=
  if test "$x_includes" != NONE; then
    for i in $x_includes; do
      if test -d "$i/bitmaps"; then
	bitmapdirs="$i/bitmaps:$bitmapdirs"
      fi
      if test -d "$i/X11/bitmaps"; then
	bitmapdirs="$i/X11/bitmaps:$bitmapdirs"
      fi
    done
    bitmapdirs=`echo "$bitmapdirs" | sed s/.$//`
  fi
  test ! -z "$bitmapdirs" && AC_DEFINE_UNQUOTED(BITMAPDIR, "$bitmapdirs")

  dnl Autodetect defines extracted from X config by xmkmf, e.g. NARROWPROTO
  AC_MSG_CHECKING([for X defines extracted by xmkmf])
  AC_MSG_RESULT()
  rm -fr conftestdir
  if mkdir conftestdir; then
    cd conftestdir
    cat > Imakefile <<'EOF'
xetest:
	@echo ${PROTO_DEFINES} ${STD_DEFINES}
EOF
    if (xmkmf) >/dev/null 2>/dev/null && test -f Makefile; then
      # GNU make sometimes prints "make[1]: Entering...", which would confuse us.
      xmkmf_defines=`${MAKE-make} xetest 2>/dev/null | grep -v make`
    fi
    cd ..
    rm -fr conftestdir
    for word in $xmkmf_defines; do
      case "$word" in
      -D__STDC__*) ;;
      -D* )
	sym=`echo '' $word | sed -e 's:^ *-D::' -e 's:=.*::'`
	case "$word" in
	  -D*=* ) val=`echo '' $word | sed -e 's:^.*=::'` ;;
	  *     ) val=1 ;;
	esac
dnl Avoid re-AC_DEFINE-ing xmkmf symbols we've already defined above.
dnl Also, glibc doesn't like two of the traditional POSIX macros that xmkmf 
dnl likes us to define; ignore them if appropriate. 
       if grep "^#define $sym " confdefs.h >/dev/null          || \ 
           test "$have_glibc" = "yes" -a "$sym" = "_BSD_SOURCE" || \ 
           test "$have_glibc" = "yes" -a "$sym" = "_SVID_SOURCE"; 
        then :; else 
	  if test "$val" = "1"
	    then AC_DEFINE_UNQUOTED($sym)
	    else AC_DEFINE_UNQUOTED($sym,$val)
	  fi
	fi  ;;
      esac
    done
  fi

  dnl make sure we can find Intrinsic.h
  AC_CHECK_HEADER(X11/Intrinsic.h, ,
   [AC_MSG_ERROR([Unable to find X11 header files.])])

  dnl -lXt and -lX11 are required
  dnl Some broken systems require the magic "-b i486-linuxaout" flag
  AC_CHECK_LIB(X11, XOpenDisplay, have_lib_x11=yes)
  if test "$have_lib_x11" != "yes"; then
    AC_CHECK_LIB(X11, XGetFontProperty,
      ld_switch_x_site="-b i486-linuxaout $ld_switch_x_site",
      [AC_MSG_ERROR([Unable to find X11 libraries.])],
      -b i486-linuxaout)
  fi
  libs_x="-lX11"
  test "$verbose" = "yes" && echo "    Setting libs_x to \"-lX11\""

  dnl Autodetect -lXext
  AC_CHECK_LIB(Xext, XShapeSelectInput, XE_PREPEND(-lXext, libs_x))

  dnl Require -lXt
  AC_CHECK_LIB(Xt, XtOpenDisplay, XE_PREPEND(-lXt, libs_x),
    AC_MSG_ERROR([Unable to find X11 libraries.]))

  AC_MSG_CHECKING(the version of X11 being used)
  AC_RUN_IFELSE([AC_LANG_SOURCE([#include <X11/Intrinsic.h>
    int main(int c, char **v) { return c>1 ? XlibSpecificationRelease : 0; }])],
    [./conftest foobar; x11_release=$?],[x11_release=4],[x11_release=4])
  AC_MSG_RESULT(R${x11_release})
  AC_DEFINE_UNQUOTED(THIS_IS_X11R${x11_release})

  if test "${x11_release}" = "4"; then
    case "$with_widgets" in
      "" | "no") with_widgets=no ;;
      *) XE_DIE("Widget support requires X11R5 or greater") ;;
    esac
  fi

  AC_CHECK_FUNCS(XConvertCase XtRegisterDrawable)

  AC_CHECK_HEADERS(X11/Xlocale.h X11/Xfuncproto.h)

  dnl XFree86 has a non-standard prototype for this X11R6 function
  AC_CHECK_FUNCS(XRegisterIMInstantiateCallback)
  AC_MSG_CHECKING(for standard XRegisterIMInstantiateCallback prototype)
  AC_COMPILE_IFELSE([AC_LANG_SOURCE([
#define NeedFunctionPrototypes 1
#include <X11/Xlib.h>
extern Bool XRegisterIMInstantiateCallback(
   Display*, struct _XrmHashBucketRec*, char*, char*, XIMProc, XPointer*);
])],
  [AC_MSG_RESULT(yes)],
  [AC_MSG_RESULT(no)
   AC_DEFINE(XREGISTERIMINSTANTIATECALLBACK_NONSTANDARD_PROTOTYPE)])

  dnl autodetect -lXmu
  AC_CHECK_LIB(Xmu, XmuReadBitmapDataFromFile, with_xmu=yes, with_xmu=no)
  if test "$with_xmu" = "no"; then
    AC_MSG_ERROR([We're sorry, but we thought there were no systems without Xmu by now.
You cannot build this version of XEmacs for X11 without Xmu.  Please report
this to xemacs-beta@xemacs.org.  As a workaround, revert to XEmacs 21.5.29.])
  else
    XE_PREPEND(-lXmu, libs_x)
  fi

  dnl Autodetect -lXbsd
  dnl #### Someone, please add a better function than main
  AC_CHECK_LIB(Xbsd, main, XE_PREPEND(-lXbsd, libs_x))

  dnl Problem with the MIT distribution of X on AIX
  if test "$unexec" = "unexaix.o" -a "$x11_release" = "6"; then
    dnl X11R6 requires thread-safe code on AIX for some reason
    if test "$GCC" = "yes"; then
      XE_PREPEND(-mthreads, X_CFLAGS)
      XE_PREPEND(-mthreads, libs_x)
    else
      case "$CC" in
        "xlc" ) CC="xlc_r" ;;
        "xlC" ) CC="xlC_r" ;;
        "cc"  ) CC="cc_r" ;;
      esac
    fi
  fi

  dnl include xft/AA support?
  dnl #### need to check for includes here (especially, freetype.h for v.2)

  if test "$with_xft_emacs" = "yes"; then
    AC_MSG_CHECKING([for Xrender, fontconfig, and Xft])
    xft_includes_found=no
    dnl try pkg-config
    xft_config_prog="pkg-config xft"
    xft_config_ok=`$xft_config_prog --cflags 2>/dev/null`
    if test "$?" = 0 ; then
	xft_cflags=`$xft_config_prog --cflags`
        dnl #### I tried to create XE_REMOVE_DUPS(original,cleaned),
        dnl but it didn't work.
        cleaned_xft_cflags=""
        for xft_cflag in $xft_cflags; do
          case $xft_cleaned_cflags in
          *${xft_cflag}* ) ;;
          * ) xft_cleaned_cflags="$xft_cleaned_cflags $xft_cflag" ;;
          esac
        done
        xft_cflags=$xft_cleaned_cflags
        unset xft_cflag xft_cleaned_cflags
	xft_libs=`$xft_config_prog --libs`
	c_switch_site="$c_switch_site $xft_cflags"
	ld_switch_site="$ld_switch_site $xft_libs"
	xft_includes_found=yes
    else
      AC_CHECK_HEADERS([freetype/config/ftheader.h],
		       [xft_includes_found=yes],
		       [
	dnl #### How about /sw/include, and /opt/local/include?
	dnl these directories need to be the parent of the freetype directory
	for freetype_include_top in "/usr/local/include/freetype2" \
				    "/usr/X11R6/include/freetype2" \
				    "/usr/include/freetype2"
	do
	  if test -d $freetype_include_top; then
	    AC_MSG_CHECKING([in ${freetype_include_top}])
	    dnl disable autoconf's fucking cache; why these fuckheads think it
	    dnl is better to be broken than to be slow, I don't know!
	    dnl #### there's gotta be a better-looking way to do this!!
	    unset "$as_ac_Header"
	    save_c_switch_site="$c_switch_site"
	    c_switch_site="$c_switch_site -I${freetype_include_top}"
	    AC_CHECK_HEADERS([freetype/config/ftheader.h],
			     [xft_includes_found=yes],
			     [c_switch_site=$save_c_switch_site])
	  fi
	done])
    fi
    if test "$xft_includes_found" != "yes"; then
      XE_DIE(["Unable to find headers for --with-xft"])
    else
      AC_CHECK_LIB(Xrender, XRenderQueryExtension, XE_PREPEND(-lXrender, libs_x),
          [XE_DIE(["Unable to find libXrender for --with-xft"])])
      AC_CHECK_LIB(fontconfig, FcPatternCreate, XE_PREPEND(-lfontconfig, libs_x),
          [XE_DIE(["Unable to find libfontconfig for --with-xft"])])
      AC_CHECK_LIB(Xft, XftFontOpen, XE_PREPEND(-lXft, libs_x),
          [XE_DIE(["Unable to find libXft for --with-xft"])])

      AC_CHECK_FUNCS(FcConfigGetRescanInterval)
      AC_CHECK_FUNCS(FcConfigSetRescanInterval)
      dnl #### detect fontconfig properly!!!!
      with_fontconfig=yes
      AC_DEFINE(HAVE_FONTCONFIG)
      AC_DEFINE(HAVE_XFT)
      dnl Due to interactions with other libraries, must postpone AC_DEFINE
      dnl of HAVE_XFT_MENUBARS, HAVE_XFT_TABS, and HAVE_XFT_GAUGES.
      unset xft_includes_found
    fi
  fi

fi dnl $with_x11 = yes

if test "$with_msw" != "no"; then
  AC_MSG_CHECKING([for MS-Windows])
  AC_MSG_RESULT()
  AC_CHECK_LIB(gdi32,main,with_msw=yes)
  if test "$with_msw" = "yes"; then
    AC_DEFINE(HAVE_MS_WINDOWS)

    dnl The net installer only works with MS-Windows currently
    if test "$with_netinstall" = "yes"; then
      XE_APPEND(netinstall, MAKE_SUBDIR)
      XE_APPEND(netinstall, SRC_SUBDIR_DEPS)
      XE_APPEND(netinstall, INSTALL_ARCH_DEP_SUBDIR)
    fi

    install_pp="$srcdir/lib-src/installexe.sh"
    XE_APPEND(-L/usr/lib/w32api -limm32 -lshell32 -lgdi32 -luser32 -lcomdlg32 -lcomctl32 -lole32 -luuid -lwinspool -lmpr, libs_system)
    if test "$with_dragndrop" != no; then
      XE_APPEND(msw, dragndrop_proto)
      with_dragndrop=yes
    fi
    if test "$window_system" != x11; then
      window_system=msw
      test "$with_scrollbars" != "no" && with_scrollbars=msw
      test "$with_menubars"   != "no" && with_menubars=msw
      test "$with_toolbars"   != "no" && with_toolbars=msw
      test "$with_dialogs"    != "no" && with_dialogs=msw
      test "$with_widgets"    != "no" && with_widgets=msw
    fi
    dnl check for our special version of select
    AC_RUN_IFELSE([AC_LANG_SOURCE([#include <fcntl.h>
    int main() { return (open("/dev/windows", O_RDONLY, 0) > 0)? 0 : 1; }])],
    [AC_DEFINE(HAVE_MSG_SELECT)])
  fi
fi

AC_SUBST(install_pp)

test -z "$with_dragndrop" && with_dragndrop="$with_dragndrop_default"
test -z "$window_system" && window_system="none"

dnl Test for features that require a window system - ANY window system
if test "$window_system" = "none"; then
  for feature in menubars scrollbars toolbars dialogs dragndrop xface
  do
    if eval "test -n \"\$with_${feature}\" -a \"\$with_${feature}\" != no" ; then
       AC_MSG_WARN([--with-$feature ignored:  Not valid without window system support])
    fi
    eval "with_${feature}=no"
  done
else
  test -z "$with_toolbars" && with_toolbars=yes
fi

dnl ### Test for features that require mswindows support - currently none
dnl ### MS-Windows folks: add code here..... (martin)
if test "$with_msw" != "yes"; then
  for feature in   MARTIN_IS_CLUELESS_ABOUT_MSW_FEATURES
  do
    if eval "test -n \"\$with_${feature}\" -a \"\$with_${feature}\" != no" ; then
       AC_MSG_WARN([--with-$feature ignored:  Not valid without MS-Windows support])
    fi
    eval "with_${feature}=no"
  done
else
:
fi

dnl Test for features that require X11 support
if test "$with_x11" != "yes"; then
  dnl It ought to be reasonable to have no output device at all, and only use
  dnl XEmacs in --batch mode.
  dnl if test "$with_tty" = "no" ; then
  dnl   AC_MSG_ERROR([No window system support and no TTY support - Unable to proceed.])
  dnl fi
  for feature in with_tooltalk with_cde with_wmcommand with_xim with_sound_nas
  do
    if eval "test -n \"\$${feature}\" -a \"\$${feature}\" != \"no\"" ; then
       AC_MSG_WARN([--$feature ignored:  Not valid without X support])
    fi
    eval "${feature}=no"
  done
fi

dnl Balloon Help requires the Shape extension, not available everywhere,
dnl for example not on AIX 4.3.
if test "$with_x11" = "yes"; then
  AC_CHECK_HEADER(X11/extensions/shape.h, [
   AC_DEFINE(HAVE_BALLOON_HELP)
   ],[],
[
#include <X11/Xlib.h>
#include <X11/Xutil.h>
])
fi

dnl FSF 19.29 has some bitmapdir stuff here.
bitmapdir=

case "$window_system" in
  x11  ) HAVE_X_WINDOWS=yes; echo "  Using X11." ;;
  msw  ) HAVE_X_WINDOWS=no ; echo "  Using MS-Windows." ;;
  gtk  )
       HAVE_X_WINDOWS=no
       test "$with_gnome" = "yes" && echo "  Using GNOME."
       test "$with_gnome" = "no" && echo "  Using GTK."
       ;;
  none ) HAVE_X_WINDOWS=no ; echo "  Using no window system." ;;
esac

dnl Enable or disable proper handling of WM_COMMAND
AC_MSG_CHECKING([for WM_COMMAND option])
dnl if test "$with_wmcommand" = "yes"; then
if test "$with_wmcommand" != "no"; then
  AC_DEFINE(HAVE_WMCOMMAND)
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi

dnl Autodetect Xauth
dnl -lXau is only used by gnuclient, so use a special variable for Xauth X libs
test -z "$with_xauth" && test "$window_system" = "none" && with_xauth=no
test -z "$with_xauth" && { AC_CHECK_HEADER(X11/Xauth.h,          ,with_xauth=no) }
test -z "$with_xauth" && { AC_CHECK_LIB(Xau, XauGetAuthByAddr,[:],with_xauth=no) }
test -z "$with_xauth" && with_xauth=yes
if test "$with_xauth" = "yes"; then
  AC_DEFINE(HAVE_XAUTH)
  XE_SPACE(libs_xauth, $GTK_LIBS $X_EXTRA_LIBS -lXau $libs_x $X_PRE_LIBS)
fi
AC_SUBST(libs_xauth)

dnl This one is for the static initializeds variables in
dnl offix.c, so that the thing is dumped after lastfile.o
AC_SUBST(dnd_objs)

dnl Autodetect dll support

dnl If g++ is used, we have to explicitly link modules with -lstdc++ on Cygwin
dnl to avoid undefined symbol errors.  This will never hurt, so just do it on
dnl all platforms in case others have the same brain damage.
if test "$XEMACS_CC_GPP" = "yes"; then
  LIBSTDCPP=-lstdc++
else
  LIBSTDCPP=
fi
AC_SUBST(LIBSTDCPP)

dnl Tell the pathname handling code about a couple of Darwin-specific things
dnl it needs to know:
if test "$opsys" = "darwin"; then
  AC_DEFINE(REALPATH_CORRECTS_CASE)
  AC_DEFINE(DEFAULT_FILE_SYSTEM_IGNORE_CASE)
fi

dnl This must come before the detection code for anything that is in a module
if test "$with_modules" != "no"; then
  AC_MSG_CHECKING([for module support])
  AC_MSG_RESULT()

  case "$opsys" in
    mingw* | cygwin* ) have_dl=yes ;;
    *)
      dnl Check for the ELFish dlopen()
      AC_CHECK_HEADER(dlfcn.h, [
	AC_MSG_CHECKING([for dlopen in -lc])
	AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <dlfcn.h>],
	 [dlopen ("", 0);])], [ have_dl=yes ; AC_MSG_RESULT($have_dl)], [
	  AC_MSG_RESULT([no])
	  AC_MSG_CHECKING([for dlopen in -ldl])
	  ac_save_LIBS="$LIBS"
	  LIBS="$LIBS -ldl"
	  AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <dlfcn.h>],
	   [dlopen ("", 0);])], [ have_dl=yes; AC_MSG_RESULT($have_dl)], [
	    AC_MSG_RESULT([no])
	    AC_MSG_CHECKING([for dlopen in -lsvld])
	    LIBS="$ac_save_LIBS -lsvld"
	    AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <dlfcn.h>],
	     [dlopen ("", 0);])], [ have_dl=yes; AC_MSG_RESULT($have_dl) ],
	     [LIBS="$ac_save_LIBS" ; AC_MSG_RESULT([no])])])])])
      if test "$have_dl" = "yes"; then
	AC_DEFINE(HAVE_DLOPEN)
      else
        dnl On Darwin, the DYLD API is deprecated, so we prefer dlopen if
        dnl available, above.
        if test "$opsys" = "darwin"; then 
          have_dl=yes
          AC_DEFINE(HAVE_DYLD)
          AC_DEFINE(DLSYM_NEEDS_UNDERSCORE)
        else
          dnl Check for HP/UX shl_load
          AC_CHECK_HEADER(dl.h, [
            AC_MSG_CHECKING([for shl_load in -lc])
            AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <dl.h>],
             [shl_load ("", 0, 0);])], [have_dl=yes; AC_MSG_RESULT($have_dl)],[
              AC_MSG_RESULT([no])
              AC_MSG_CHECKING([for shl_load in -ldl])
              ac_save_LIBS="$LIBS"
              LIBS="$LIBS -ldld"
              AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <dl.h>],
               [shl_load ("", 0, 0);])], [have_dl=yes],
               [LIBS="$ac_save_LIBS"; AC_MSG_RESULT([no])])])])
          if test "$have_dl" = "yes"; then
            AC_DEFINE(HAVE_SHL_LOAD) 
          else
            dnl Check for libtool's libltdl
            AC_CHECK_HEADER(ltdl.h, [
              AC_MSG_CHECKING([for lt_dlinit in -lltdl])
              ac_save_LIBS="$LIBS"
              LIBS="$LIBS -lltdl"
              AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <ltdl.h>],
               [lt_dlinit ();])], [have_dl=yes], [LIBS="$ac_save_LIBS"])])
            AC_MSG_RESULT($have_dl)
            if test "$have_dl" = "yes"; then
              AC_DEFINE(HAVE_LTDL)
            fi
          dnl end !HP/UX
    	  fi
       fi
      dnl end !dlopen
      fi
      ac_save_LIBS=
  esac

  if test -n "$have_dl"; then
    dnl XE_SHLIB_STUFF (in aclocal.m4) defines $can_build_shared
    XE_SHLIB_STUFF
  fi

  if test "$can_build_shared" = "yes"; then
    AC_DEFINE(HAVE_SHLIB)
    dnl src must be built before modules on MacOSX and Windows platforms, since
    dnl the binary must be available to properly link the modules
    dnl For no-module builds, this is added *after* the module directories
    XE_APPEND(src, MAKE_SUBDIR)
    XE_APPEND(src, INSTALL_ARCH_DEP_SUBDIR)
    test -n "$libdl" && XE_PREPEND(-l${libdl}, LIBS)
    AC_CHECK_FUNCS(dlerror _dlerror)
    with_modules=yes
    MOD_CC="../../lib-src/ellcc"
    MODCFLAGS="\$(CFLAGS) --mode=compile --mod-output=\$@ -I../../src -I\$(srcdir)/../../src"
    INSTALLPATH="\$(moduledir)"
    MOD_INSTALL_PROGRAM=${INSTALL_PROGRAM}
    OBJECT_TO_BUILD="\$(MODNAME).ell"
  else
    if test "$with_modules" = "yes"; then
      XE_DIE("Required module support cannot be provided.")
    else
      echo "    No module support."
    fi
    with_modules=no
  fi
fi
if test "$with_modules" != "yes"; then
  MOD_CC="$XEMACS_CC"
  MODCFLAGS="\$(XE_CFLAGS) -I../../src -I\$(srcdir)/../../src"
  INSTALLPATH=""
  MOD_INSTALL_PROGRAM="true"
  OBJECT_TO_BUILD="\$(MODNAME).o"
fi
MODARCHDIR=
MAKE_DOCFILE="../../lib-src/make-docfile"
AC_SUBST(with_modules, $with_modules)
AC_SUBST(MOD_CC)
AC_SUBST(MODARCHDIR)
AC_SUBST(MAKE_DOCFILE)
AC_SUBST(MODCFLAGS)
AC_SUBST(INSTALLPATH)
AC_SUBST(MOD_INSTALL_PROGRAM)
AC_SUBST(OBJECT_TO_BUILD)

dnl Autodetect tooltalk
if test "$with_tooltalk" != "no" ; then
  dnl autodetect the location of tt_c.h
  dnl tt_c.h might be in Tt or desktop include directories
  for dir in "" "Tt/" "desktop/" ; do
    AC_CHECK_HEADER(${dir}tt_c.h, tt_c_h_file="${dir}tt_c.h"; break)
  done
  if test -z "$tt_c_h_file"; then
    if test "$with_tooltalk" = "yes"; then
      USAGE_ERROR("Unable to find required tooltalk header files.")
    fi
    with_tooltalk=no
  fi
fi
if test "$with_tooltalk" != "no" ; then
  for extra_libs in "" "-lI18N -lce" "-lcxx"; do
    AC_CHECK_LIB(tt, tt_message_create,
      tt_libs="-ltt $extra_libs"; break, [:],$extra_libs)
  done
  if test -z "$tt_libs"; then
    if test "$with_tooltalk" = "yes"; then
      USAGE_ERROR("Unable to find required tooltalk libraries.")
    fi
    with_tooltalk=no
  fi
fi
test -z "$with_tooltalk" && with_tooltalk=yes
if test "$with_tooltalk" = "yes"; then
  AC_DEFINE(TOOLTALK)
  AC_DEFINE_UNQUOTED(TT_C_H_FILE, "$tt_c_h_file")
  XE_PREPEND($tt_libs, libs_x)
fi

dnl Autodetect CDE
test -z "$with_cde" && { AC_CHECK_HEADER(Dt/Dt.h,               , with_cde=no) }
test -z "$with_cde" && { AC_CHECK_LIB(DtSvc, DtDndDragStart, [:], with_cde=no) }
if test "$with_dragndrop" = "no" ; then
  if test "$with_cde" = "yes" ; then
    AC_MSG_WARN([--with-cde forced to `no'; no generic Drag'n'Drop support])
  fi
  with_cde=no
fi
test -z "$with_cde" && with_cde=yes
if test "$with_cde" = "yes" ; then
  AC_DEFINE(HAVE_CDE)
  XE_PREPEND(-lDtSvc, libs_x)
  XE_APPEND(CDE, dragndrop_proto)
  with_tooltalk=yes # CDE requires Tooltalk
  need_motif=yes    # CDE requires Motif
fi

if test "$with_gtk" = "yes"; then
   XE_APPEND(GTK, dragndrop_proto)
fi

dnl Autodetect Drag'n'Drop support
dnl always included if CDE or MSWindows is defined
if test "$with_dragndrop" != "no" ; then
  AC_MSG_CHECKING(if drag and drop API is needed)
  if test -n "$dragndrop_proto" ; then
    with_dragndrop=yes
    AC_MSG_RESULT([yes (${dragndrop_proto} )])
    AC_DEFINE(HAVE_DRAGNDROP)
    XE_APPEND(dragdrop.o, extra_objs)
  else
    with_dragndrop=no
    AC_MSG_RESULT(no)
  fi
fi

dnl Autodetect LDAP
AC_MSG_CHECKING([for LDAP])
AC_MSG_RESULT()
ldap_libs=
test -z "$with_ldap" && { AC_CHECK_HEADER(ldap.h, ,with_ldap=no) }
test -z "$with_ldap" && { AC_CHECK_HEADER(lber.h, ,with_ldap=no) }
if test "$with_ldap" != "no"; then
  AC_CHECK_LIB(ldap, ldap_search, with_ldap=yes)
  dnl Check for other libraries we need to link with to get the main routines.
  test "$with_ldap" != "yes" && { AC_CHECK_LIB(ldap, ldap_open, [with_ldap=yes with_ldap_lber=yes], , -llber) }
  test "$with_ldap" != "yes" && { AC_CHECK_LIB(ldap, ldap_open, [with_ldap=yes with_ldap_lber=yes with_ldap_krb=yes], , -llber -lkrb) }
  test "$with_ldap" != "yes" && { AC_CHECK_LIB(ldap, ldap_open, [with_ldap=yes with_ldap_lber=yes with_ldap_krb=yes with_ldap_des=yes], , -llber -lkrb -ldes) }
  dnl Recently, we need -lber even though the main routines are elsewhere,
  dnl because otherwise be get link errors w.r.t. ber_pvt_opt_on.  So just
  dnl check for that (it's a variable not a fun but that doesn't seem to
  dnl matter in these checks)  and stick in -lber if so.  Can't hurt (even to
  dnl stick it in always shouldn't hurt, I don't think) ... #### Someone who
  dnl #### understands LDAP needs to fix this properly.
  test "$with_ldap_lber" != "yes" && { AC_CHECK_LIB(lber, ber_pvt_opt_on, with_ldap_lber=yes) }
fi
if test "$with_ldap" = "yes"; then
  AC_DEFINE(HAVE_LDAP)
  if test "$with_ldap_des" = "yes" ; then
    XE_PREPEND(-ldes, ldap_libs)
  fi
  if test "$with_ldap_krb" = "yes" ; then
    XE_PREPEND(-lkrb, ldap_libs)
  fi
  if test "$with_ldap_lber" = "yes" ; then
    XE_PREPEND(-llber, ldap_libs)
  fi
  XE_PREPEND(-lldap, ldap_libs)
  save_LIBS="$LIBS" LIBS="$LIBS $ldap_libs"
  AC_CHECK_FUNCS(ldap_set_option ldap_get_lderrno ldap_result2error ldap_parse_result)
  LIBS="$save_LIBS"
  if test "$with_modules" = "yes"; then
    XE_APPEND(modules/ldap, MAKE_SUBDIR)
    XE_APPEND(modules/ldap, INSTALL_ARCH_DEP_SUBDIR)
  else
    mkdir src
    for fil in eldap.c eldap.h; do
      ${LN_S} "$srcdir/modules/ldap/$fil" "src/$fil"
    done
  fi
fi
AC_SUBST(ldap_libs)

dnl Autodetect PostgreSQL
dnl On many Linux systems, PostgreSQL is packaged to be installed in /usr;
dnl in this case, configure will easily detect it there.
dnl
dnl If PostgreSQL is installed into a different prefix,
dnl (such as the default /usr/local/pgsql when building from source),
dnl that prefix must be specified using the --with-site-prefixes flag.
postgresql_libs=
if test "$with_postgresql" != "no"; then
  AC_MSG_CHECKING([for PostgreSQL])
  AC_MSG_RESULT()

  case "$with_postgresql" in
  "" | "yes" | "no" | "true" | "false" | "auto")
    pg_header_dir="" ;;
  *)
    pg_header_dir="$with_postgresql" ;;
  esac

  dnl Look in standard header file locations.
  dnl These are known to be used on Linux or MacPorts.
  dnl Assume that the most recent version available is the most likely to be
  dnl found in an unversioned directory.
  libpq_fe_h_file=""
  for header_dir in $pg_header_dir "" "pgsql" "postgresql" "postgresql94" "postgresql-9.4" "postgresql/9.4" "postgresql84" "postgresql-8.4" "postgresql/8.4"; do
    AC_CHECK_HEADER(${header_dir}/libpq-fe.h,
                    libpq_fe_h_file=${header_dir}/libpq-fe.h; break)
  done

  if test -n "$pg_header_dir" -a "$header_dir" != "$pg_header_dir"; then
    AC_WARN([--with-postgresql="$pg_header_dir" specified but not found; using "$libpq_fe_h_file"])
  fi

  pq_libs=
  extra_libs=
  if test -n "$libpq_fe_h_file"; then
    dnl #### Would it be nicer to do this with a loop?
    dnl It seems unlikely that checking for SSL/crypto support can hurt,
    dnl even if it's found.
    AC_CHECK_LIB(pq, PQconnectdb,[pq_libs="-lpq"],[
      unset ac_cv_lib_pq_PQconnectdb;
      AC_CHECK_LIB(pq, PQconnectdb,[pq_libs="-lpq -lcrypto -lssl"],,
        [-lcrypto -lssl])])
    if test -z "$pq_libs"; then
      have_libpq="no"
    else
      have_libpq="yes"
    fi
  fi

  if test -n "$libpq_fe_h_file" -a "$have_libpq" = "yes"; then
    with_postgresql=yes
    AC_DEFINE(HAVE_POSTGRESQL)
    AC_CHECK_LIB(pq,PQconnectStart, [
                 with_postgresqlv7=yes;
                 AC_DEFINE(HAVE_POSTGRESQLV7)], [:], $extra_libs)
    AC_DEFINE_UNQUOTED(LIBPQ_FE_H_FILE, "$libpq_fe_h_file")
    XE_PREPEND([$pq_libs], postgresql_libs)
    if test "$with_modules" = "yes"; then
      XE_APPEND(modules/postgresql, MAKE_SUBDIR)
      XE_APPEND(modules/postgresql, INSTALL_ARCH_DEP_SUBDIR)
    else
      mkdir src
      for fil in postgresql.c postgresql.h; do
        ${LN_S} "$srcdir/modules/postgresql/$fil" "src/$fil"
      done
    fi
  elif test "$with_postgresql" = "yes"; then
    XE_DIE("Required PostgreSQL support cannot be provided.  Check --with-site-prefixes.")
  fi
fi
AC_SUBST(postgresql_libs)

dnl ----------------------
dnl Graphics libraries
dnl ----------------------

if test "$window_system" != "none"; then
  AC_MSG_CHECKING([for graphics libraries])
  AC_MSG_RESULT()

  dnl add special code to handle xpm-nox on Cygwin (csw)
  dnl   -- should only happen if CYGWIN && WITH_XPM && WITH_MSW && !WITH_X
  libpath_xpm=
  incpath_xpm=
  libname_xpm="-lXpm"
  case "$opsys" in 
    cygwin*)
      cygwin_top=`eval gcc -print-search-dirs | sed -ne s'/install: //p'`
      cygwin_top=`eval "cd $cygwin_top/../../../..; pwd"`
      case "$window_system" in
        dnl use "standard" search pattern
        x11)  ;;
        dnl hardcode "standard" non-X11 xpm lib/inc dirs
        msw) libpath_xpm="-L${cygwin_top}/lib/noX"
             incpath_xpm="-I${cygwin_top}/include/noX"
             libname_xpm="-lXpm-noX"
              ;;
        dnl not supported on cygwin (yet?)
        gtk)  ;;
        dnl probably not reached...
        none) ;;
        dnl ditto
        *)    ;;
      esac
      ;;
    dnl use "standard" search pattern for all other OS's
    *) ;;
  esac
  dnl Autodetect Xpm
  xpm_problem=""
  if test -z "$with_xpm"; then
    XE_PREPEND("$incpath_xpm", CFLAGS)
    XE_PREPEND("$incpath_xpm", XE_CFLAGS)
    XE_PREPEND("$libpath_xpm", LDFLAGS)
    AC_MSG_CHECKING(for Xpm - no older than 3.4f)
    xe_check_libs="$libname_xpm"
    AC_RUN_IFELSE([AC_LANG_SOURCE([#define XPM_NUMBERS
#include <X11/xpm.h>
    int main(int c, char **v) {
    return c == 1 ? 0 :
      XpmIncludeVersion != XpmLibraryVersion() ? 1 :
      XpmIncludeVersion < 30406 ? 2 : 0 ;}])],
    [./conftest dummy_arg; xpm_status=$?;
      if test "$xpm_status" = "0"; then
        with_xpm=yes;
      else
        with_xpm=no;
        if test "$xpm_status" = "1"; then
          xpm_problem="Xpm library version and header file version don't match!"
        elif test "$xpm_status" = "2"; then
          xpm_problem="Xpm library version is too old!"
        else
          xpm_problem="Internal xpm detection logic error!"
        fi
        echo "
*** WARNING *** $xpm_problem
  I'm not touching that with a 10-foot pole!
  If you really want to use the installed version of Xpm, rerun
  configure and add '--with-xpm=yes', but don't blame me if XEmacs crashes!"
    fi],
    [with_xpm=no])
    xe_check_libs=
    AC_MSG_RESULT($with_xpm)
  fi
  if test "$with_xpm" = "yes"; then
    dnl #### This code assumes that if AC_CHECK_LIB fails,
    dnl #### then it will succeed if FOR_MSW is defined,
    dnl #### but doesn't actually verify this assumption.
    AC_DEFINE(HAVE_XPM)
    XE_PREPEND("$libpath_xpm", LDFLAGS)
    XE_PREPEND("$libname_xpm", libs_x)
    XE_PREPEND("$incpath_xpm", CFLAGS)
    XE_PREPEND("$incpath_xpm", XE_CFLAGS)
    AC_MSG_CHECKING([for "FOR_MSW" xpm])
    xe_check_libs="$libname_xpm"
    AC_LINK_IFELSE([AC_LANG_PROGRAM([],[XpmCreatePixmapFromData();])],
    [xpm_for_msw=no],
    [xpm_for_msw=yes])
    xe_check_libs=
    AC_MSG_RESULT($xpm_for_msw)
    if test "$xpm_for_msw" = "yes"; then
      AC_DEFINE(FOR_MSW)
    fi
  fi

  dnl Autodetect XFACE
  test -z "$with_xface" && { AC_CHECK_HEADER(compface.h,          ,with_xface=no) }
  test -z "$with_xface" && { AC_CHECK_LIB(compface, UnGenFace,[:] ,with_xface=no) }
  test -z "$with_xface" && with_xface=yes
  if test "$with_xface" = "yes"; then
    AC_DEFINE(HAVE_XFACE)
    XE_PREPEND(-lcompface, libs_x)
  fi

  dnl autodetect GIF
  test -z "$with_gif" && { AC_CHECK_HEADER(gif_lib.h, , with_gif=no) }
  if test "$with_gif" != "no"; then
    with_gif="yes"
    dnl Versions of libgif and libungif prior to the introduction of
    dnl EGifPutExtensionLast caused Emacs crashes.  We'll require that
    dnl function, too, in hopes that we can avoid similar crashes.
    AC_CHECK_LIB(gif, EGifPutExtensionTrailer,
      [XE_PREPEND(-lgif, libs_x)],
      AC_CHECK_LIB(gif, EGifPutExtensionLast,
        [XE_PREPEND(-lgif, libs_x)],
        [AC_CHECK_LIB(ungif, EGifPutExtensionLast,
          [XE_PREPEND(-lungif, libs_x)], with_gif=no)]))
  fi
  if test "$with_gif" != "no"; then
    AC_DEFINE(HAVE_GIF)
  fi

  dnl Too many stupid linkers can't detect cascaded lib dependencies until runtime
  dnl So we always search for libz compression support.
  if test "$with_png $with_tiff" != "no no"; then
    AC_CHECK_LIB(c,  inflate, [:], [
    AC_CHECK_LIB(z,  inflate, [XE_PREPEND(-lz,  libs_x)],[
    AC_CHECK_LIB(gz, inflate, [XE_PREPEND(-lgz, libs_x)])])])
  fi

  dnl autodetect JPEG
  test -z "$with_jpeg" && { AC_CHECK_HEADER(jpeglib.h,                    ,with_jpeg=no) }
  test -z "$with_jpeg" && { AC_CHECK_LIB(jpeg, jpeg_destroy_decompress,[:],with_jpeg=no) }
  test -z "$with_jpeg" && with_jpeg=yes
  if test "$with_jpeg" = "yes"; then
    AC_DEFINE(HAVE_JPEG)
    XE_PREPEND(-ljpeg, libs_x)
  fi

  dnl autodetect PNG
  png_problem=""
  test -z "$with_png" && { AC_CHECK_FUNC(pow,                  ,with_png=no) }
  test -z "$with_png" && { AC_CHECK_HEADER(png.h,              ,with_png=no) }
  test -z "$with_png" && { AC_CHECK_LIB(png, png_read_image,[:],with_png=no,[-lz]) }
  if test -z "$with_png"; then
    AC_MSG_CHECKING(for workable png version information)
    xe_check_libs="-lpng -lz"
    AC_RUN_IFELSE([AC_LANG_SOURCE([#include <png.h>
    int main(int c, char **v) {
    if (c == 1) return 0;
    if (strcmp(png_libpng_ver, PNG_LIBPNG_VER_STRING) != 0) return 1;
    return (PNG_LIBPNG_VER < 10002) ? 2 : 0 ;}])],
    [./conftest dummy_arg; png_status=$?;
      if test "$png_status" = "0"; then
	with_png=yes;
      else
	with_png=no;
	if test "$png_status" = "1"; then
	  png_problem="PNG library version and header file don't match!"
        elif test "$png_status" = "2"; then
	  png_problem="PNG library version too old (pre 1.0.2)!"
	fi
	echo "
*** WARNING *** $png_problem
  I'm not touching that with a 10-foot pole!
  If you really want to use the installed version of libPNG, rerun
  configure and add '--with-png=yes', but don't blame me if XEmacs crashes!"
    fi],
    [with_png=no])
    xe_check_libs=
    AC_MSG_RESULT($with_png)
  fi
  if test "$with_png" = "yes"; then
    AC_DEFINE(HAVE_PNG)
    XE_PREPEND(-lpng, libs_x)
  fi

  dnl autodetect TIFF
  test -z "$with_tiff" && { AC_CHECK_HEADER(tiffio.h,            ,with_tiff=no) }
  test -z "$with_tiff" && { AC_CHECK_LIB(tiff, TIFFClientOpen,[:],with_tiff=no,[-lz]) }
  test -z "$with_tiff" && with_tiff=yes
  if test "$with_tiff" = "yes"; then
    AC_DEFINE(HAVE_TIFF)
    XE_PREPEND(-ltiff, libs_x)
  fi
fi

dnl ----------------------
dnl GTK-Specific Graphics libraries
dnl ----------------------

if test "$with_gtk" = "yes"; then
  dnl Autodetect XFACE
  test -z "$with_xface" && { AC_CHECK_HEADER(compface.h,          ,with_xface=no) }
  test -z "$with_xface" && { AC_CHECK_LIB(compface, UnGenFace,[:] ,with_xface=no) }
  test -z "$with_xface" && with_xface=yes
  if test "$with_xface" = "yes"; then
    AC_DEFINE(HAVE_XFACE)
    XE_PREPEND(-lcompface, libs_gtk)
  fi
fi

dnl ----------------------
dnl X-Specific Graphics libraries
dnl ----------------------

if test "$with_x11" = "yes"; then
  AC_MSG_CHECKING([for X11 graphics libraries])
  AC_MSG_RESULT()
fi

case "$with_widgets" in
  "" | "yes" | "athena")	detect_athena=yes ;;
   *)				detect_athena=no ;;
esac

case "$with_dialogs" in
  "" | "yes" | "athena")	detect_athena=yes ;;
esac

if test "$with_x11" = "yes" -a "$detect_athena" = "yes" ; then
  AC_MSG_CHECKING([for the Athena widgets])
  AC_MSG_RESULT()

  dnl What in heck did the user actually want?
  case "$with_athena" in
    dnl This is the default, old fashioned flat Athena.
    "xaw" | "")	athena_variant=Xaw	athena_3d=no  ;;
    "3d")	athena_variant=Xaw3d	athena_3d=yes ;;
    "next")	athena_variant=neXtaw	athena_3d=yes ;;
    "95")	athena_variant=Xaw95	athena_3d=yes ;;
    "xpm")	athena_variant=XawXpm	athena_3d=yes ;;
    *)		XE_DIE("Unknown Athena widget set \`$with_athena'. This should not happen.") ;;
  esac

  athena_3d_function=Xaw3dComputeBottomShadowRGB

  dnl Search for the Athena library...
  if test "$athena_3d" = "no"; then
    AC_CHECK_LIB($athena_variant, XawScrollbarSetThumb,
      [
        dnl Must not be a 3d library...
        AC_CHECK_LIB($athena_variant, $athena_3d_function,
          [AC_MSG_WARN([Could not find a non-3d Athena widget library.])],
          athena_lib=$athena_variant)
      ],
      AC_MSG_WARN([Could not find an Athena widget library.]))
  else
    dnl The real configuration, need 3d library
    AC_CHECK_LIB($athena_variant, $athena_3d_function, athena_lib=$athena_variant,
      dnl OK, couldn't find it with a proper name, try the standard Athena lib
      dnl If that is 3d, presume the user asked for what they have installed.
      AC_CHECK_LIB(Xaw, $athena_3d_function,
        [
          athena_lib=Xaw;
          AC_MSG_WARN([Assuming that libXaw is actually $athena_variant.]);
        ],
        [AC_MSG_WARN([Could not find a 3d Athena widget library that looked like $athena_variant.])]))
  fi

  dnl Now we locate the Athena headers that we need.
  if test "$athena_3d" = "no"; then
    AC_CHECK_HEADER(X11/Xaw/ThreeD.h,
      [AC_MSG_WARN([Could not find a non-3d Athena header set.])],
      [AC_CHECK_HEADER(X11/Xaw/XawInit.h,
        [athena_h_path=X11/Xaw],
        [AC_MSG_WARN([Could not find a non-3d Athena header set.])],
[
#include <X11/Intrinsic.h>
])])
  else
    dnl The three-d Athena headers are so much more slippery.
    dnl Curse this `Lets replace standard libraries' thing that they did. :/
    AC_CHECK_HEADER(X11/$athena_variant/XawInit.h,
      [AC_CHECK_HEADER(X11/$athena_variant/ThreeD.h,
        [athena_h_path=X11/$athena_variant])],[],
[
#if HAVE_X11_XFUNCPROTO_H
#include <X11/Xfuncproto.h>
#endif
#include <X11/Intrinsic.h>
])

    dnl Is the variant specific header directory directly under include?
    if test -z "$athena_h_path"; then
      AC_CHECK_HEADER($athena_variant/XawInit.h,
        [AC_CHECK_HEADER($athena_variant/ThreeD.h,
          athena_h_path=$athena_variant)],[],
[
#if HAVE_X11_XFUNCPROTO_H
#include <X11/Xfuncproto.h>
#endif
#include <X11/Intrinsic.h>
])
    fi

    dnl If we couldn't find the specific variant, try the generic Athena 3d headers
    if test -z "$athena_h_path" -a "$athena_variant" != "Xaw3d"; then
      AC_CHECK_HEADER(X11/Xaw3d/XawInit.h,
        [AC_CHECK_HEADER(X11/Xaw3d/ThreeD.h,
          [
            AC_MSG_WARN([Assuming that X11/Xaw3d headers are suitable for $athena_variant.])
            athena_h_path=X11/Xaw3d
          ])],[],
[
#if HAVE_X11_XFUNCPROTO_H
#include <X11/Xfuncproto.h>
#endif
#include <X11/Intrinsic.h>
])
    fi

    dnl Also generic 3d headers directly under include dir
    if test -z "$athena_h_path" -a "$athena_variant" != "Xaw3d"; then
      AC_CHECK_HEADER(Xaw3d/XawInit.h,
        [AC_CHECK_HEADER(Xaw3d/ThreeD.h,
          [
            AC_MSG_WARN([Assuming that Xaw3d headers are suitable for $athena_variant.])
            athena_h_path=Xaw3d
          ])],[],
[
#if HAVE_X11_XFUNCPROTO_H
#include <X11/Xfuncproto.h>
#endif
#include <X11/Intrinsic.h>
])
    fi

    dnl If nothing yet found, see if Xaw is a 3d header set...
    dnl We AC_MSG_WARN if we fail because I am all out of ideas...
    if test -z "$athena_h_path"; then
      AC_CHECK_HEADER(X11/Xaw/ThreeD.h,
        [
          AC_MSG_WARN([Assuming that X11/Xaw headers are suitable for $athena_variant.])
          athena_h_path=X11/Xaw
        ],
        [AC_MSG_WARN([Could not find a suitable 3d Athena header set.])])
    fi
  fi

  dnl Do we actually have a usable Athena widget set? Please?
  if test -n "$athena_lib" -a -n "$athena_h_path"; then
    have_xaw=yes
    have_athena_i18n=unset
    dnl   X.org at some point added .international to SimplePart, protected
    dnl by #ifdef XAW_INTERNATIONALIZATION in Xaw3d (only?).  Unfortunately,
    dnl the distributed headers for Xaw3d don't set this to correspond to
    dnl the distributed library.  (pkg-config does, if present.)
    if test "$athena_variant" = "Xaw3d"; then
      save_libs_x=$libs_x
      XE_PREPEND(-lXaw3d, libs_x)
      dnl The test below was provided by Ralf Soergel.
      AC_MSG_CHECKING([for "international" resource in Xaw3d SimpleWidget])
      AC_RUN_IFELSE(
      [AC_LANG_PROGRAM(
       [#include <stdlib.h>
        #include <string.h>
        #undef XAW_INTERNATIONALIZATION
        #include <$athena_h_path/Simple.h>
       ],
       [[int i = simpleWidgetClass->core_class.num_resources;
         while (i-- > 0)
           if (!strcmp(simpleWidgetClass->core_class.resources[i].resource_name,
                       "international"))
             exit(0);
         exit(253);
       ]])],
      [have_athena_i18n=yes],
      [have_athena_i18n=no])
      libs_x=$save_libs_x
      AC_MSG_RESULT([$have_athena_i18n])
    fi
  else
    have_xaw=no
  fi

else
  have_xaw=no
fi dnl "$with_x11" = "yes" -a "detect_athena" = "yes"

if test "$with_x11" = "yes"; then
  dnl autodetect Motif - but only add to libs_x later (if necessary)
  dnl Use a different function to the earlier test to avoid problems with the
  dnl internal cache.
  AC_CHECK_HEADER(Xm/Xm.h,
   [AC_CHECK_LIB(Xm, XmStringCreate, have_motif=yes, have_motif=no)],
   have_motif=no)

  if test "$have_motif" = "yes"; then
    dnl autodetect lesstif
    AC_MSG_CHECKING(for Lesstif)
    AC_EGREP_CPP(yes,
[#include <Xm/Xm.h>
#ifdef LESSTIF_VERSION
yes
#endif
], have_lesstif=yes, have_lesstif=no)
  AC_MSG_RESULT($have_lesstif)
  fi

fi dnl "$with_x11" = "yes"

dnl Finish ensuring that we have values for the various toolkit items.
dnl Not all toolkits support all widgets

dnl Avoid using Motif :-(
case "$opsys" in
  *linux* | *darwin* | *bsd* | *cygwin* )  lucid_prefers_motif="no"  ;;
  * )        lucid_prefers_motif="yes" ;;
esac

case "$with_menubars" in "" | "yes" | "athena" )
  with_menubars="lucid" ;;
esac
dnl this is not in xft reloaded #3
if test "$with_xft_menubars" != "no" ; then
  if test "$with_xft_emacs" = "yes" -a "$with_menubars" != "no" ; then
    with_xft_menubars="yes"
  else
    with_xft_menubars="no"
  fi
fi
case "$with_dialogs" in "" | "yes" | "lucid" )
  if test "$lucid_prefers_motif" = "yes"; then
    if   test "$have_motif"     = "yes"; then with_dialogs="motif"
    elif test "$have_xaw"       = "yes"; then with_dialogs="athena"
    elif test "$with_msw"       = "yes"; then with_dialogs="msw"
    else with_dialogs=no
    fi
  else
    if   test "$have_xaw"       = "yes"; then with_dialogs="athena"
    elif test "$have_motif"     = "yes"; then with_dialogs="motif"
    elif test "$with_msw"       = "yes"; then with_dialogs="msw"
    else with_dialogs=no
    fi
  fi ;;
esac
case "$with_scrollbars" in "" | "yes" )
  with_scrollbars="lucid" ;;
esac
case "$with_widgets" in "" | "yes" | "lucid")
  if test "$lucid_prefers_motif" = "yes"; then
    if   test "$have_motif" = "yes"; then with_widgets="motif"
    elif test "$have_xaw"   = "yes"; then with_widgets="athena"
    elif test "$with_msw"   = "yes"; then with_widgets="msw"
    else with_widgets=no
    fi
  else
    if   test "$have_xaw"   = "yes"; then with_widgets="athena"
    elif test "$have_motif" = "yes"; then with_widgets="motif"
    elif test "$with_msw"   = "yes"; then with_widgets="msw"
    else with_widgets=no
    fi
  fi ;;
esac
dnl this is not in xft reloaded #3
if test "$with_xft_tabs" != "no" ; then
  if test "$with_xft_emacs" = "yes" -a "$with_widgets" != "no" ; then
    with_xft_tabs="yes"
  else
    with_xft_tabs="no"
  fi
fi
dnl this is not in xft reloaded #3
if test "$with_xft_gauges" != "no" ; then
  if test "$with_xft_emacs" = "yes" -a "$with_widgets" != "no" ; then
    with_xft_gauges="yes"
  else
    with_xft_gauges="no"
  fi
fi

all_widgets="$with_menubars $with_scrollbars $with_dialogs $with_toolbars $with_widgets"

case "$all_widgets" in
  *athena* )
    if test "$have_xaw" != "yes"; then
      XE_DIE("Could not find a suitable Athena library to build with.")
    fi

    dnl Add the Lucid widget Athena code
    XE_APPEND(lwlib-Xaw.o, lwlib_objs)

    dnl Add the Athena widget library we located earlier
    XE_PREPEND(-l$athena_lib, libs_x)

    dnl Tell lwlib where to find the Athena header files.
    dnl Many people have tried to create a `smart' way of doing this,
    dnl but all have failed.  Before changing the following ugly definitions,
    dnl consult the veterans of many a battle.
    AC_DEFINE_UNQUOTED(ATHENA_Scrollbar_h_,"$athena_h_path/Scrollbar.h")
    AC_DEFINE_UNQUOTED(ATHENA_Dialog_h_,"$athena_h_path/Dialog.h")
    AC_DEFINE_UNQUOTED(ATHENA_Form_h_,"$athena_h_path/Form.h")
    AC_DEFINE_UNQUOTED(ATHENA_Command_h_,"$athena_h_path/Command.h")
    AC_DEFINE_UNQUOTED(ATHENA_Label_h_,"$athena_h_path/Label.h")
    AC_DEFINE_UNQUOTED(ATHENA_LabelP_h_,"$athena_h_path/LabelP.h")
    AC_DEFINE_UNQUOTED(ATHENA_Toggle_h_,"$athena_h_path/Toggle.h")
    AC_DEFINE_UNQUOTED(ATHENA_ToggleP_h_,"$athena_h_path/ToggleP.h")
    AC_DEFINE_UNQUOTED(ATHENA_AsciiText_h_,"$athena_h_path/AsciiText.h")
    AC_DEFINE_UNQUOTED(ATHENA_XawInit_h_,"$athena_h_path/XawInit.h")

    AC_DEFINE(LWLIB_USES_ATHENA)
    AC_DEFINE(NEED_ATHENA)
    need_athena="yes"
    if test "$athena_3d" = "yes"; then
      AC_DEFINE(HAVE_ATHENA_3D)
      if test "$have_athena_i18n" = "yes"; then
        AC_DEFINE(HAVE_ATHENA_I18N)
      fi
    fi
  ;;
esac

case "$all_widgets" in *motif* )
  AC_DEFINE(LWLIB_USES_MOTIF)
  AC_DEFINE(NEED_MOTIF)
  XE_APPEND(lwlib-Xm.o, lwlib_objs)
  need_motif=yes ;;
esac

test "$with_menubars"   = "lucid" && XE_APPEND(xlwmenu.o, lwlib_objs)
test "$with_menubars"   = "motif" && XE_APPEND(xlwmenu.o, lwlib_objs)
test "$with_scrollbars" = "lucid" && XE_APPEND(xlwscrollbar.o, lwlib_objs)
test "$with_widgets"   != "no" && test "$with_widgets" != "msw" && \
	XE_APPEND(xlwtabs.o xlwgcs.o, lwlib_objs)
case "$with_widgets" in athena* )
	XE_APPEND(xlwradio.o xlwcheckbox.o xlwgauge.o, lwlib_objs);;
esac
case "$all_widgets" in *lucid* )
  AC_DEFINE(NEED_LUCID)
  XE_APPEND(lwlib-Xlw.o, lwlib_objs) ;;
esac

AC_SUBST(lwlib_objs)

test "$with_scrollbars" = "athena" && AC_DEFINE(LWLIB_SCROLLBARS_ATHENA)
test "$with_dialogs"    = "athena" && AC_DEFINE(LWLIB_DIALOGS_ATHENA)

if test "$athena_3d" = "yes"; then
  test "$with_scrollbars" = "athena" && AC_DEFINE(LWLIB_SCROLLBARS_ATHENA3D)
  test "$with_dialogs"    = "athena" && AC_DEFINE(LWLIB_DIALOGS_ATHENA3D)
fi

case "$with_widgets" in athena* ) AC_DEFINE(LWLIB_WIDGETS_ATHENA);; esac
test "$with_widgets" != "no" && test "$with_widgets" != "msw" && \
	AC_DEFINE(LWLIB_TABS_LUCID)

test "$with_menubars"   != "no"    && AC_DEFINE(HAVE_MENUBARS)
test "$with_scrollbars" != "no"    && AC_DEFINE(HAVE_SCROLLBARS)
test "$with_dialogs"    != "no"    && AC_DEFINE(HAVE_DIALOGS)
test "$with_toolbars"   != "no"    && AC_DEFINE(HAVE_TOOLBARS)
test "$with_widgets"    != "no"    && AC_DEFINE(HAVE_WIDGETS)

test "$with_menubars"   = "lucid"  && AC_DEFINE(LWLIB_MENUBARS_LUCID)
test "$with_scrollbars" = "lucid"  && AC_DEFINE(LWLIB_SCROLLBARS_LUCID)

test "$with_menubars"   = "motif"  && AC_DEFINE(LWLIB_MENUBARS_MOTIF)
test "$with_scrollbars" = "motif"  && AC_DEFINE(LWLIB_SCROLLBARS_MOTIF)
test "$with_dialogs"    = "motif"  && AC_DEFINE(LWLIB_DIALOGS_MOTIF)
test "$with_widgets"    = "motif"  && AC_DEFINE(LWLIB_WIDGETS_MOTIF)

test "$with_xft_menubars" = "yes"  && AC_DEFINE(HAVE_XFT_MENUBARS)
test "$with_xft_tabs" = "yes"  && AC_DEFINE(HAVE_XFT_TABS)
test "$with_xft_gauges" = "yes"  && AC_DEFINE(HAVE_XFT_GAUGES)

dnl ----------------------
dnl Mule-dependent options
dnl ----------------------

if test "$with_unicode_internal" = "yes"; then
  test "$with_mule" = "no" && \
	USAGE_ERROR("Cannot give \`--with-mule=no' and \`--with-unicode-internal=yes'.
Unicode-internal requires Mule.")
  test "$with_mule" != "yes" && \
	AC_MSG_WARN([\`--with-mule' forced to \`yes': Unicode-internal requires Mule.])
  with_mule=yes
  AC_DEFINE(UNICODE_INTERNAL)
fi

test -z "$with_mule" && with_mule=no

dnl if test "$with_mule" = "yes" && test ! -d "$srcdir/lisp/mule"; then
dnl	echo "Attempt to Build with Mule without Mule/Lisp"
dnl	echo "Please install the XEmacs/Mule tarball or"
dnl	echo "rerun configure with --with-mule=no"
dnl	exit 1
dnl fi

if test "$with_default_eol_detection" = "yes"; then
  AC_DEFINE(HAVE_DEFAULT_EOL_DETECTION)
fi

dnl initialize _libs variables for possible modules at top level
canna_libs=
wnn_libs=

if test "$with_mule" = "yes" ; then
  AC_MSG_CHECKING([for Mule-related features])
  AC_DEFINE(MULE)

  dnl Use -lintl to get internationalized strerror for Mule
  AC_CHECK_HEADERS(libintl.h)
  AC_CHECK_LIB(intl, strerror)

  AC_MSG_CHECKING([for Mule input methods])
  dnl Do we have the XmIm* routines?  And if so, do we want to use them?
  case "$with_xim" in "" | "yes" )
    AC_MSG_CHECKING([for XIM])
    AC_CHECK_LIB(X11, XOpenIM, with_xim=xlib, with_xim=no)
    dnl XIM + Lesstif is not (yet?) usable
    dnl Only use Motif if linking Motif anyway, or don't have xlib XIM
    if test "$need_motif $have_lesstif" = "yes no"; then
      AC_CHECK_LIB(Xm, XmImMbLookupString, with_xim=motif)
    dnl #### This is always false.
    dnl Not clear what we want, although "yes no yes" is insufficient.
    elif test "$have_motif $have_lesstif $with_xim" = "yes no no"; then
      AC_CHECK_LIB(Xm, XmImMbLookupString, with_xim=motif)
    fi ;;
  esac
  if test "$with_xim" != "no"; then
    AC_DEFINE(HAVE_XIM)
    if test "$with_xim" = "xlib"; then
      AC_DEFINE(XIM_XLIB)
      XE_ADD_OBJS(input-method-xlib.o)
    fi
    if test "$with_xim" = "motif"; then
      AC_DEFINE(XIM_MOTIF)
      need_motif=yes
      XE_ADD_OBJS(input-method-motif.o)
    fi
    if test "$with_xim" = "motif"; then
      with_xfs=no
    fi
  fi

  dnl "with_xfs" = "yes"
  if test "$with_xfs" = "yes" ; then
    AC_MSG_CHECKING([for XFontSet])
    AC_CHECK_LIB(X11, XmbDrawString, [:], with_xfs=no)
    if test "$with_xfs" = "yes" && test "$with_menubars" = "lucid"; then
      AC_DEFINE(USE_XFONTSET)
      if test "$with_xim" = "no" ; then
        XE_ADD_OBJS(input-method-xlib.o)
      fi
    fi
  fi dnl with_xfs

  dnl Autodetect WNN
  test "$with_wnn6" = "yes" && with_wnn=yes # wnn6 implies wnn support
  test -z "$with_wnn" && { AC_CHECK_HEADER(wnn/jllib.h, ,with_wnn=no) }
  dnl gcc 2.97 fixincludes breaks inclusion of wnn/commonhd.h
  test -z "$with_wnn" && { AC_CHECK_HEADER(wnn/commonhd.h, ,with_wnn=no) }
  dnl Detour to find crypt
  if test "$with_wnn" != "no"; then
    AC_CHECK_FUNCS(crypt)
    test "$ac_cv_func_crypt" != "yes" && { AC_CHECK_LIB(crypt, crypt) }
  fi
  dnl Back to our regularly scheduled wnn hunting
  if test -z "$with_wnn" -o "$with_wnn" = "yes"; then
    AC_CHECK_LIB(wnn,jl_dic_list_e,libwnn=wnn,
      AC_CHECK_LIB(wnn4,jl_dic_list_e,libwnn=wnn4,
	AC_CHECK_LIB(wnn6,jl_dic_list_e,libwnn=wnn6,
	  AC_CHECK_LIB(wnn6_fromsrc,dic_list_e,libwnn=wnn6_fromsrc,with_wnn=no))))
  fi
  test -z "$with_wnn" && with_wnn=yes
  if test "$with_wnn" = "yes"; then
    AC_DEFINE(HAVE_WNN)
    XE_PREPEND(-l$libwnn, libs_x)
    if test "$with_wnn6" != "no"; then
      AC_CHECK_LIB($libwnn, jl_fi_dic_list, with_wnn6=yes)
      test "$with_wnn6" = "yes" && AC_DEFINE(WNN6)
    fi
  fi

  dnl Configure canna
  dnl canna_libs variable is initialized at toplevel
  dnl #### the hard-coding of /usr/local/canna/include is bogus and
  dnl      my Mac OS X 10.4 system needs /usr/local/canna/lib, too
  dnl #### this whole mess should be in modules/canna, no? maybe not
  have_canna=no
  if test "$with_canna" != "no"; then
    save_c_switch_site="$c_switch_site"
    for canna_include_path in "" " -I/usr/local/canna/include"; do
      for canna_wchar_aware in "" " -DCANNA_NEW_WCHAR_AWARE=1"; do
        c_switch_site="$save_c_switch_site$canna_include_path$canna_wchar_aware"
        # defeat autoconf's cache mechanism
        $as_unset ac_cv_header_canna_jrkanji_h
        $as_unset ac_cv_header_canna_RK_h
        # using $ac_header_compiler is a hack, but autoconf doesn't let us
        # get at this information otherwise :-(
        AC_CHECK_HEADER(canna/jrkanji.h,[AC_CHECK_HEADER(canna/RK.h,have_canna=$ac_header_compiler)])
        test "$have_canna" = "yes" && break
        AC_MSG_WARN([You may ignore any *Present but not compiled* message
        from autoconf.  We detect that condition and recheck, but there
        is no way to suppress autoconf's message.])
      done
      test "$have_canna" = "yes" && break
    done
    if test "$have_canna" = "yes"; then
      c_switch_site="$save_c_switch_site$canna_include_path"
    else
      c_switch_site="$save_c_switch_site"
    fi
  fi

  test "$have_canna" = "yes" && { AC_CHECK_LIB(RKC, RkBgnBun,       [:],have_canna=no) }
  test "$have_canna" = "yes" && { AC_CHECK_LIB(canna,jrKanjiControl,[:],have_canna=no) }
  if test "$have_canna" = "yes"; then
    AC_DEFINE(HAVE_CANNA)
    test -n "$canna_wchar_aware" && AC_DEFINE(CANNA_NEW_WCHAR_AWARE)
    if test "$with_modules" = "yes"; then
      XE_APPEND(modules/canna, MAKE_SUBDIR)
      XE_APPEND(modules/canna, INSTALL_ARCH_DEP_SUBDIR)
    else
      mkdir src
      ${LN_S} "$srcdir/modules/canna/canna_api.c" "src/canna_api.c"
    fi
    XE_PREPEND(-lcanna -lRKC, canna_libs)
  elif test "$with_canna" != "no"; then
    AC_MSG_WARN([Canna configuration failed.  If you expected success,
maybe you need --with-site-prefixes=/usr/local/canna?])
  fi
AC_SUBST(canna_libs)

else dnl "$with_mule" = "no"
  for feature in xim canna wnn; do
    if eval "test -n \"\$with_${feature}\" -a \"\$with_${feature}\" != no" ; then
      AC_MSG_WARN([--with-${feature} ignored:  Not valid without Mule support])
    fi
    eval "with_${feature}=no"
  done
fi dnl with_mule


dnl At this point, we know whether we need the motif lib or not.
if test "$need_motif" = "yes" ; then
  XE_PREPEND(-lXm, libs_x)
  dnl AIX needs the following library for use with Motif
  AC_CHECK_LIB(i18n, layout_object_getvalue, [XE_PREPEND(-li18n, libs_x)])
  XE_COMPUTE_RUNPATH()
fi

dnl Check for UTF-8 path-conversion functions in Cygwin 1.7 and on
case "$opsys" in
  *cygwin* ) AC_CHECK_FUNCS(cygwin_conv_path)
	 ;;
esac

dnl ----------------------------------------------------------------
dnl Check for POSIX functions.
dnl ----------------------------------------------------------------

AC_CHECK_FUNCS(cbrt closedir dup2 eaccess fmod fpathconf frexp fsync ftime ftruncate getaddrinfo gethostname getnameinfo getpagesize getrlimit gettimeofday getcwd link logb lrand48 matherr mkdir mktime perror poll random readlink rename res_init rint rmdir select setitimer setpgid setsid sigblock sighold sigprocmask snprintf strerror strlwr strupr symlink tzset ulimit umask usleep vlimit vsnprintf waitpid wcscmp wcslen wcwidth)

dnl getaddrinfo() is borked under hpux11
if test "$ac_cv_func_getaddrinfo" != "no" ; then
  case "$opsys" in
    hpux11 )
      AC_MSG_WARN([Use of getaddrinfo is disabled for HP-UX 11.XX.])
      ac_cv_func_getaddrinfo=no
      ;;
  esac
fi

dnl check for vdb-related stuff
if test "$check_vdb_posix" = "yes" ; then
  dnl no mprotect, no vdb
  AC_CHECK_FUNC(mprotect,AC_DEFINE(HAVE_MPROTECT) have_vdb_mprotect=yes,)

  dnl sigaction needs either struct siginfo or siginfo_t
  AC_CHECK_FUNC(sigaction, AC_DEFINE(HAVE_SIGACTION) have_vdb_sigaction=yes, 
	        have_vdb_sigaction=no)
  AC_CHECK_MEMBER(struct siginfo.si_addr, 
		  AC_DEFINE(HAVE_STRUCT_SIGINFO_SI_ADDR) have_si_addr=yes,,
	          [#include <signal.h>])
  AC_CHECK_MEMBER(siginfo_t.si_addr,
		  AC_DEFINE(HAVE_SIGINFO_T_SI_ADDR) have_si_addr=yes,,
	          [#include <signal.h>])
  if test "$have_si_addr" != "yes" ; then
    have_vdb_sigaction=no
  fi

  dnl signal needs struct sigcontext
  AC_CHECK_FUNC(signal, AC_DEFINE(HAVE_SIGNAL) have_vdb_signal=yes,)
  AC_CHECK_MEMBER(struct sigcontext.cr2, 
	          AC_DEFINE(HAVE_STRUCT_SIGCONTEXT_CR2) have_cr2=yes,, 
		  [#include <signal.h>])

  if test "$have_cr2" != "yes" ; then
    have_vdb_signal=no
  fi

  if test "$have_vdb_mprotect" != "yes" ; then 
    have_vdb_sigaction=no
    have_vdb_signal=no
  fi

  if test "$have_vdb_sigaction" != "yes" -a "$have_vdb_signal" != "yes" ; then
    have_vdb_posix=no
    have_vdb_fake=yes
    XE_DIE("No working write-barrier implementation found for this system.
       Please report this and provide information about your system.")
  else
    have_vdb_posix=yes
    have_vdb_fake=no
  fi
fi

dnl ----------------------------------------------------------------
dnl Check for Unixoid pty/process support.
dnl ----------------------------------------------------------------

dnl There is no "standard" pty allocation method.  Every system is different.
dnl  getpt()  is the preferred pty allocation method on glibc systems.
dnl _getpty() is the preferred pty allocation method on SGI systems.
dnl grantpt(), unlockpt(), ptsname() are defined by Unix98.
AC_CHECK_FUNCS(getpt _getpty grantpt unlockpt ptsname killpg tcgetpgrp)

dnl openpty() is the preferred pty allocation method on BSD and Tru64 systems.
dnl openpty() might be declared in:
dnl - pty.h (Tru64 or Linux)
dnl - libutil.h (FreeBSD)
dnl - util.h (NetBSD)
AC_CHECK_FUNC(openpty, have_openpty=yes, [
  AC_CHECK_LIB(util, openpty, have_openpty=yes need_libutil=yes)])
if test "$have_openpty" = "yes"; then
  AC_DEFINE(HAVE_OPENPTY)
  AC_CHECK_HEADERS(libutil.h util.h, break)
  test "$need_libutil" = "yes" && XE_APPEND(-lutil, libs_system)
fi

dnl Check for system-specific pty header files
dnl Often the TIOCSIG* symbols are hiding there.
case "$opsys" in
  dnl HPUX pty.h #defines TRUE and FALSE, so just use ptyio.h there.
  hpux*) AC_CHECK_HEADERS(sys/ptyio.h) ;;
  *) AC_CHECK_HEADERS(pty.h)
     test "$ac_cv_header_pty_h" = "no" && AC_CHECK_HEADERS(sys/pty.h)
     ;;
esac

dnl Check for STREAM support functions.
dnl Confusingly, "str" means both "string" and "SysV Streams".
AC_CHECK_HEADERS(stropts.h)
if test "$ac_cv_header_stropts_h" = "yes"; then
  AC_CHECK_FUNCS(isastream)
  AC_CHECK_HEADERS(strtio.h) dnl TIOCSIGNAL
fi

dnl There is also AC_FUNC_GETLOADAVG; why don't we use it?
dnl Check whether the system provides getloadavg().
AC_CHECK_FUNCS(getloadavg)

if test "$ac_cv_func_getloadavg" = "yes"; then
  dnl Solaris 8 declares getloadavg() in <sys/loadavg.h>.
  dnl glibc 2.2 declares getloadavg() in <stdlib.h>...
  dnl   ...if we #define _GNU_SOURCE, which we do.
  AC_CHECK_HEADERS(sys/loadavg.h)
else
  dnl We define our own getloadavg() using lower level functions.
  XE_ADD_OBJS(getloadavg.o)

  dnl Used by getloadavg() - does not require root privileges
  AC_CHECK_LIB(kstat, kstat_open)
  AC_CHECK_HEADERS(kstat.h)

  dnl Another way to get the load average
  AC_CHECK_LIB(kvm, kvm_read)
fi

dnl If netdb.h does not declare h_errno, we must declare it by hand.
AC_MSG_CHECKING(whether netdb declares h_errno)
AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <netdb.h>],
  [return h_errno;])],
  [AC_MSG_RESULT(yes)
   AC_DEFINE(HAVE_H_ERRNO)],
  [AC_MSG_RESULT(no)])

AC_MSG_CHECKING(for sigsetjmp)
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([#include <setjmp.h>],
	[sigjmp_buf bar; sigsetjmp (bar, 0);])],
  [AC_MSG_RESULT(yes)
   AC_DEFINE(HAVE_SIGSETJMP)],
  [AC_MSG_RESULT(no)])

AC_MSG_CHECKING(whether localtime caches TZ)
AC_CACHE_VAL(emacs_cv_localtime_cache,
[if test "$ac_cv_func_tzset" = "yes"; then
AC_RUN_IFELSE([AC_LANG_SOURCE([#include <time.h>
#if STDC_HEADERS
# include <stdlib.h>
#endif
extern char **environ;
unset_TZ ()
{
  char **from, **to;
  for (to = from = environ; (*to = *from); from++)
    if (! (to[[0]][[0]] == 'T' && to[[0]][[1]] == 'Z' && to[[0]][[2]] == '='))
      to++;
}
char TZ_GMT0[[]] = "TZ=GMT0";
char TZ_PST8[[]] = "TZ=PST8";
main()
{
  time_t now = time ((time_t *) 0);
  int hour_GMT0, hour_unset;
  if (putenv (TZ_GMT0) != 0)
    exit (1);
  hour_GMT0 = localtime (&now)->tm_hour;
  unset_TZ ();
  hour_unset = localtime (&now)->tm_hour;
  if (putenv (TZ_PST8) != 0)
    exit (1);
  if (localtime (&now)->tm_hour == hour_GMT0)
    exit (1);
  unset_TZ ();
  if (localtime (&now)->tm_hour != hour_unset)
    exit (1);
  exit (0);
}])], emacs_cv_localtime_cache=no, emacs_cv_localtime_cache=yes,
[# If we have tzset, assume the worst when cross-compiling.
emacs_cv_localtime_cache=yes])
else
	# If we lack tzset, report that localtime does not cache TZ,
	# since we can't invalidate the cache if we don't have tzset.
	emacs_cv_localtime_cache=no
fi],[:])dnl
AC_MSG_RESULT($emacs_cv_localtime_cache)
if test $emacs_cv_localtime_cache = yes; then
  AC_DEFINE(LOCALTIME_CACHE)
fi

if test "$HAVE_TIMEVAL" = "yes"; then
AC_MSG_CHECKING(whether gettimeofday accepts one or two arguments)
AC_LINK_IFELSE([AC_LANG_PROGRAM([
#ifdef TIME_WITH_SYS_TIME
#include <sys/time.h>
#include <time.h>
#else
#ifdef HAVE_SYS_TIME_H
#include <sys/time.h>
#else
#include <time.h>
#endif
#endif
  ],
  [
  struct timeval time;
  gettimeofday (&time, 0);
])],
  [AC_MSG_RESULT(two)],
  [AC_MSG_RESULT(one)
   AC_DEFINE(GETTIMEOFDAY_ONE_ARGUMENT)])
fi


AC_C_INLINE
test "$ac_cv_c_inline" != "no" -a "$GCC" = "yes" && XE_ADD_OBJS(inline.o)

dnl check for the typeof extension
AC_MSG_CHECKING(for typeof)
AC_COMPILE_IFELSE([AC_LANG_SOURCE([int i; __typeof__(i) j;])],
  typeofname="__typeof__",
  [AC_COMPILE_IFELSE([AC_LANG_SOURCE([int i; typeof(i) j;])],
   typeofname="typeof",
   typeofname=no)])
AC_MSG_RESULT($typeofname)
if test "$typeofname" != "no"; then
  AC_DEFINE_UNQUOTED(TYPEOF, $typeofname)
fi

dnl HP-UX has a working alloca in libPW.
dnl case "${GCC}${opsys}" in hpux* )
dnl  AC_CHECK_FUNC(alloca, [:], [AC_CHECK_LIB(PW, alloca)])
dnl esac

dnl AC_FUNC_ALLOCA doesn't know about DEC C's #pragma intrinsic(alloca)
if test "$__DECC" != "yes"; then
  AC_FUNC_ALLOCA
  test -n "$ALLOCA" && XE_ADD_OBJS($ALLOCA)
fi

AC_MSG_CHECKING(for working alloca in function calls)
AC_RUN_IFELSE([AC_LANG_SOURCE([
#if defined (__CYGWIN__)
#include <alloca.h>
#elif defined (__GNUC__)
#define alloca __builtin_alloca
#elif defined (__DECC)
#include <alloca.h>
#pragma intrinsic(alloca)
#elif defined (HAVE_ALLOCA_H)
#include <alloca.h>
#elif defined (_AIX)
#pragma alloca
#elif ! defined (alloca)
#ifdef C_ALLOCA
#define alloca xemacs_c_alloca
#else
void *alloca ();
#endif /* C_ALLOCA */
#endif /* !defined (alloca) */

void
f1 (double a, void *ptr, int b)
{
  unsigned char *ptr2 = (unsigned char *) ptr;
  if (ptr2[[0]] != 0xBF || ptr2[[1]] != 0xBF || ptr2[[3000]] != 0xBF)
    exit (1);
  if (a != 3.1415 || b != -5490)
    exit (1);
}

int
f2 (short c, void *ptr, long e)
{
  unsigned char *ptr2 = (unsigned char *) ptr;
  if (ptr2[[0]] != 0xFB || ptr2[[1]] != 0xFB || ptr2[[1000]] != 0xFB)
    exit (1);
  if (c != 665 || e != 776776776)
    exit (1);
  f1 (3.1415, memset (alloca (3001), 0xBF, 3001), -5490);
  return 42;
}

int
main (int argc, char **argv)
{
  if (f2 (665, memset (alloca (1001), 0xFB, 1001), 776776776) != 42)
    return 1;
  return 0;
}
])], working_alloca_in_function_calls=yes, working_alloca_in_function_calls=no)
AC_MSG_RESULT($working_alloca_in_function_calls)
test "$working_alloca_in_function_calls" != "yes" && \
  AC_DEFINE(BROKEN_ALLOCA_IN_FUNCTION_CALLS)

AC_MSG_CHECKING([for working scanf])
AC_RUN_IFELSE([AC_LANG_SOURCE([
int
main (int argc, char **argv)
{
  int ret, cp1, cp2, endcount;
  char *p = "0x7d   0x000E  ";
  ret = sscanf (p, "%i %i%n", &cp1, &cp2, &endcount);
  /* endcount should be 13 but it's 11 in Cygwin newlib after 6/04;
     this breaks unicode.c */
  return endcount != 13;
}
])], working_scanf=yes, working_scanf=no)
AC_MSG_RESULT($working_scanf)
test "$working_scanf" != "yes" && \
  AC_DEFINE(CYGWIN_SCANF_BUG)

dnl Check whether strcoll exists and works correctly. (This does more
dnl than just check for its existence.) If so, it defines HAVE_STRCOLL.
AC_FUNC_STRCOLL

dnl If `getpgrp' takes no argument (the POSIX.1 version), define
dnl `GETPGRP_VOID'.  Otherwise, it is the BSD version, which takes a
dnl process ID as an argument.
AC_CHECK_FUNCS(getpgrp)
AC_FUNC_GETPGRP

dnl We used to call AC_FUNC_MMAP here
dnl Instead we now use following, suggested by Neal Becker
AC_MSG_CHECKING(for working mmap)
AC_RUN_IFELSE([AC_LANG_SOURCE([#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/mman.h>

#ifndef MAP_VARIABLE
#define MAP_VARIABLE 0
#endif

#ifndef MAP_FAILED
#define MAP_FAILED -1
#endif

int main (int argc, char **argv)
{
  int fd = -1;
#if defined(MAP_ANON) && !defined(MAP_ANONYMOUS)
#define MAP_ANONYMOUS MAP_ANON
#endif
#ifndef MAP_ANONYMOUS
  fd = open ("/dev/zero", O_RDWR);
  if (fd < 0)
    return 1;
#define MAP_ANONYMOUS 0
#endif
  if (mmap(0, 1024, PROT_READ | PROT_WRITE,
	   MAP_PRIVATE | MAP_VARIABLE | MAP_ANONYMOUS,
	   fd, 0) != (void *) MAP_FAILED)
    return 0;
  perror ("conftest: mmap failed");
  return 1;
}])], have_mmap=yes, have_mmap=no)
AC_MSG_RESULT($have_mmap)
test "$have_mmap" = "yes" && AC_DEFINE(HAVE_MMAP)

dnl By default we switch off rel-alloc on cygwin as it generally causes us grief
case "$opsys" in cygwin*)
	test "$with_rel_alloc" = "default" && with_rel_alloc=no ;;
esac

dnl rel_alloc requires system malloc with mmap. We only turn rel_alloc on by
dnl default if mmap is available.
test "$have_mmap" != "yes" && with_rel_alloc=no
if test "$with_rel_alloc $have_mmap" = "default yes"; then
  dnl Check if malloc() calls mmap(), making rel_alloc pointless.
  AC_MSG_CHECKING(for M_MMAP_THRESHOLD)
  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([#include <malloc.h>],[
#ifndef M_MMAP_THRESHOLD
#error No M_MMAP_THRESHOLD :-(
!@+$%^&*_)(_ - unlikely to compile...
#endif
])], [with_rel_alloc=no; AC_MSG_RESULT(yes);],
  [with_rel_alloc=yes; AC_MSG_RESULT(no);])
fi
test "$with_rel_alloc" = "yes" && AC_DEFINE(REL_ALLOC)

dnl Check for terminal I/O variants
dnl TERMIOS systems may have termio.h, but not vice-versa, I think.
AC_CHECK_HEADER(termios.h,
  AC_DEFINE(HAVE_TERMIOS)
  AC_DEFINE(SIGNALS_VIA_CHARACTERS)
  AC_DEFINE(NO_TERMIO),
  [AC_CHECK_HEADER(termio.h, [AC_DEFINE(HAVE_TERMIO)])])


dnl Check for Internet sockets.
AC_CHECK_FUNC(socket,
 [AC_CHECK_HEADER(netinet/in.h,
   [AC_CHECK_HEADER(arpa/inet.h, [
  AC_DEFINE(HAVE_SOCKETS)
      AC_MSG_CHECKING([for sun_len member in struct sockaddr_un])
      AC_LINK_IFELSE([AC_LANG_PROGRAM([
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/un.h>
      ],
      [static struct sockaddr_un x; x.sun_len = 1;])],
      [AC_MSG_RESULT(yes); AC_DEFINE(HAVE_SOCKADDR_SUN_LEN)],
      [AC_MSG_RESULT(no)])
      AC_MSG_CHECKING([for ip_mreq struct in netinet/in.h])
      AC_LINK_IFELSE([AC_LANG_PROGRAM([
#include <sys/types.h>
#include <netinet/in.h>
      ],
      [static struct ip_mreq x;])],
      [AC_MSG_RESULT(yes); AC_DEFINE(HAVE_MULTICAST)],
      [AC_MSG_RESULT(no)])])])])

dnl Check for SYS V IPC. (Inferior to sockets.)
AC_CHECK_FUNC(msgget,
  [AC_CHECK_HEADER(sys/ipc.h,
    [AC_CHECK_HEADER(sys/msg.h,
      [AC_DEFINE(HAVE_SYSVIPC)])])])

dnl Check for directory variants
AC_CHECK_HEADER(dirent.h, [AC_DEFINE(SYSV_SYSTEM_DIR)],
  [AC_CHECK_HEADER(sys/dir.h, , [AC_DEFINE(NONSYSTEM_DIR_LIBRARY)])])

dnl Check for nlist.h
AC_CHECK_HEADER(nlist.h, AC_DEFINE(NLIST_STRUCT), )

dnl Check for sound of various sorts.
AC_MSG_CHECKING([for sound support])
AC_MSG_RESULT()

dnl Autodetect native sound
test -n "$with_native_sound_lib" && with_sound_native=yes

if test "$with_sound_native" != "no"; then
  dnl Maybe sound is already on include path...
  if test -n "$with_native_sound_lib"; then
    AC_CHECK_HEADER(multimedia/audio_device.h,
      [sound_found=yes sound_cflags=""
      XE_ADD_OBJS(sunplay.o)])
  fi

  dnl Autodetect Sun native sound from SUNWaudmo package
  if test -z "$sound_found" -a -d "/usr/demo/SOUND"; then
    if test -d "/usr/demo/SOUND/include/multimedia"; then
      sun_sound_cflags="-I/usr/demo/SOUND/include"
    elif test -d "/usr/demo/SOUND/multimedia"; then
      sun_sound_cflags="-I/usr/demo/SOUND"
    fi

    if test -n "$with_native_sound_lib"; then
      sun_sound_lib="$with_native_sound_lib"
    elif test -r "/usr/demo/SOUND/lib/libaudio.a"; then
      sun_sound_lib="/usr/demo/SOUND/lib/libaudio.a"
    elif test -r "/usr/demo/SOUND/libaudio.a"; then
      sun_sound_lib="/usr/demo/SOUND/libaudio.a"
    fi

    if test -n "$sun_sound_cflags" -a -n "$sun_sound_lib"; then
      with_native_sound_lib="$sun_sound_lib"
      sound_cflags="$sun_sound_cflags"
      sound_found=yes
      XE_ADD_OBJS(sunplay.o)
    fi
  fi

  dnl Check for SGI and HP native sound libs
  if test -z "$sound_found"; then
    case "$ac_cv_build" in
    *-sgi-* )
      if test -z "$with_native_sound_lib"; then
        AC_CHECK_LIB(audio, ALopenport, with_native_sound_lib="-laudio")
      fi
      if test -n "$with_native_sound_lib"; then
        sound_found=yes sound_cflags=""
        XE_ADD_OBJS(sgiplay.o)
      fi ;;
    hppa*-hp-hpux* )
      if test -z "$with_native_sound_lib"; then
	AC_CHECK_LIB(Alib, AOpenAudio, with_native_sound_lib="-lAlib")
      fi
      if test -n "$with_native_sound_lib"; then
        sound_found=yes
        XE_ADD_OBJS(hpplay.o)
        if test "$GCC" = "yes" # Kludge city
          then sound_cflags="-Dconst= -Dvolatile= -I/usr/audio/examples"
          else sound_cflags="+e -I/usr/audio/examples"
        fi
      fi ;;
    esac
  fi

  dnl Win32 uses native sound
  if test -z "$sound_found"; then
    case "$opsys" in cygwin* | mingw* )
      sound_found=yes
      with_native_sound_lib=
      XE_ADD_OBJS(ntplay.o)
      ;;
    esac
  fi

  dnl Check for Linux/BSD native sound (also on recent Cygwins)
  if test -z "$sound_found"; then
    for dir in "machine" "sys" "linux"; do
      AC_CHECK_HEADER([${dir}/soundcard.h], [
        sound_found=yes
        case "${ac_cv_build}" in
        *netbsd* )
	  # #### this is probably not the right way to do this
	  # we should port to native NetBSD stuff

	  dnl Aidan says: We have other things to be doing. If some
	  dnl energetic NetBSD partisan volunteers, then yeah, cool,
	  dnl but as it is, this works, and is unlikely to stop
	  dnl working any time soon.

	  AC_CHECK_LIB(ossaudio, _oss_ioctl,
		[with_native_sound_lib=-lossaudio
		 AC_MSG_WARN([Using NetBSD-deprecated -lossaudio])],
		[sound_found=no])
          ;;
	  dnl Aidan sez: OpenBSD as well can use Linux's sound API, and needs
	  dnl the same library.  Add here!
    	esac
        break])
    done

    if test "$sound_found" = "yes"; then
       need_miscplay=yes
       XE_ADD_OBJS(linuxplay.o)
       AC_DEFINE_UNQUOTED(SOUNDCARD_H_FILE, ["${dir}/soundcard.h"])
    fi
  fi

  if test "$sound_found" = "yes"; then
    with_sound_native=yes
  else
    if test "$with_sound_native" = "yes" ; then
      AC_MSG_WARN([No native libraries found.  Disabling native sound support.])
    fi
    with_sound_native=no     
  fi
fi

if test "$with_sound_native" = "yes"; then
  AC_DEFINE(HAVE_NATIVE_SOUND)
  test -n "$with_native_sound_lib" && XE_PREPEND($with_native_sound_lib, LIBS)
fi

dnl ALSA sound support
if test "$with_sound_alsa" != "no"; then
  AC_CHECK_HEADER([alsa/input.h], [
    AC_CHECK_LIB(asound, snd_pcm_open, have_alsa_sound=yes)])
  if test "$have_alsa_sound" = "yes"; then
    with_sound_alsa=yes
    AC_DEFINE(HAVE_ALSA_SOUND)
    XE_ADD_OBJS(alsaplay.o)
    XE_PREPEND(-lasound, LIBS)
  else
    test "$with_sound_alsa" = "yes" && \
      XE_DIE("Required ALSA sound support cannot be provided.")
    with_sound_alsa=no
  fi
fi

dnl NAS Sound support
if test "$with_sound_nas" != "no"; then
  AC_CHECK_HEADER(audio/audiolib.h, [
    AC_CHECK_LIB(audio, AuOpenServer, have_nas_sound=yes)])
  if test "$have_nas_sound" = "yes"; then
    with_sound_nas=yes
    AC_DEFINE(HAVE_NAS_SOUND)
    XE_ADD_OBJS(nas.o)
    XE_PREPEND(-laudio, libs_x)
    dnl If the nas library does not contain the error jump point,
    dnl then we force safer behavior.
    AC_EGREP_HEADER(AuXtErrorJump,audio/Xtutil.h,,[old_nas=yes; AC_DEFINE(NAS_NO_ERROR_JUMP)])
  else
    test "$with_sound_nas" = "yes" && \
      XE_DIE("Required NAS sound support cannot be provided.")
    with_sound_nas=no
  fi
fi

dnl ESD Sound support
if test "$with_sound_esd" != "no"; then
  AC_CHECK_PROG(have_esd_config, esd-config, yes, no)
  if test "$have_esd_config" = "yes"; then
    save_c_switch_site="$c_switch_site" save_LIBS="$LIBS"
    XE_APPEND(`esd-config --cflags`, c_switch_site)
    XE_PREPEND(`esd-config --libs`, LIBS)
    AC_CHECK_FUNC(esd_play_stream,
      have_esd_sound=yes,
      c_switch_site="$save_c_switch_site" LIBS="$save_LIBS")
  fi

  if test "$have_esd_sound" = "yes"; then
    with_sound_esd=yes
    need_miscplay=yes
    XE_ADD_OBJS(esd.o)
    AC_DEFINE(HAVE_ESD_SOUND)
  else
    test "$with_sound_esd" = "yes" && \
      XE_DIE("Required ESD sound support cannot be provided.")
    with_sound_esd=no
  fi
fi

test "$need_miscplay" = "yes" && XE_ADD_OBJS(miscplay.o)

dnl ---------------------
dnl TTY-dependent options
dnl ---------------------

test -z "$with_tty" && with_tty=yes

if test "$with_tty" = "yes"  ; then
  AC_MSG_CHECKING([for TTY-related features])
  AC_MSG_RESULT()
  AC_DEFINE(HAVE_TTY)

  dnl Autodetect ncurses.
  if test -z "$with_ncurses"; then
    AC_CHECK_LIB(ncurses, tgetent, with_ncurses=yes, with_ncurses=no)
  fi
  if test "$with_ncurses" = "yes"; then
    AC_DEFINE(HAVE_NCURSES)
    AC_CHECK_HEADER(ncurses/curses.h, curses_h_file=ncurses/curses.h)
    AC_CHECK_HEADER(ncurses/term.h, term_h_file=ncurses/term.h)
    XE_ADD_OBJS(terminfo.o)
    XE_PREPEND(-lncurses, LIBS)

    if test "$ac_cv_header_ncurses_curses_h" != "yes" ; then
      dnl Try again, and check for the bogus ncurses/ include bug.
      dnl (i.e. ncurses/curses.h bogusly includes <unctrl.h> instead of
      dnl <ncurses/unctrl.h>)
      save_c_switch_site="$c_switch_site"
      c_switch_site="$c_switch_site -I/usr/include/ncurses"
      AC_CHECK_HEADER(ncurses/curses.h, curses_h_file=ncurses/curses.h)
      if test "$ac_cv_header_ncurses_curses_h" = "yes"
        then AC_MSG_WARN([Your system has the bogus ncurses include bug.])
        else c_switch_site="$save_c_switch_site"
      fi
    fi
  else dnl "$with_ncurses" = "no"
    dnl Autodetect terminfo/-lcurses/-ltermlib/-ltermcap
    if test "$have_terminfo" = "yes"; then
      XE_ADD_OBJS(terminfo.o)
      if test -n "$libs_termcap"; then
	XE_PREPEND($libs_termcap, LIBS)
      else
	for lib in curses termlib termcap; do
	  AC_CHECK_LIB($lib, tgetent, XE_PREPEND(-l${lib}, LIBS); break)
	done
      fi
    else dnl "$have_terminfo" = "no" && "with_ncurses" = "no"
      XE_ADD_OBJS(tparam.o)
      dnl The HP-UX curses library seems to have a badly broken version of select(2)
      dnl that makes "poll: interrupted system call" messages to appear and
      dnl Emacs subprocesses to hang (e.g. TeX compilation w/ AUCTeX) */
      case "$opsys" in *-hp-hpux* ) libs_termcap="-ltermcap" ;; esac
      if test -n "$libs_termcap"; then
	XE_PREPEND($libs_termcap, LIBS)
      else
	AC_CHECK_LIB(curses, tgetent, XE_PREPEND(-lcurses, LIBS),
	  AC_CHECK_LIB(termcap, tgetent, XE_PREPEND(-ltermcap, LIBS),
            XE_ADD_OBJS(termcap.o)))
      fi
    fi
  fi
  AC_DEFINE_UNQUOTED(CURSES_H_FILE, "${curses_h_file-curses.h}")
  AC_DEFINE_UNQUOTED(TERM_H_FILE, "${term_h_file-term.h}")

  dnl General Purpose Mouse (libgpm) support
  if test "$with_gpm" != "no"; then
    AC_CHECK_HEADER(gpm.h, [
      AC_CHECK_LIB(gpm, Gpm_Open, have_gpm=yes)])
    if test "$have_gpm" = "yes"; then
      with_gpm=yes
      AC_DEFINE(HAVE_GPM)
      XE_PREPEND(-lgpm, LIBS)
    elif test "$with_gpm" = "yes"; then
      XE_DIE(["GPM requested, but gpm.h or libgpm seems to be missing."])
    else
      with_gpm=no
    fi
  fi

else dnl "$with_tty" = "no"
  for feature in ncurses gpm; do
    if eval "test -n \"\$with_${feature}\" -a \"\$with_${feature}\" != no" ; then
      AC_MSG_WARN([--with-${feature} ignored:  Not valid without TTY support])
    fi
    eval "with_${feature}=no"
  done
fi dnl with_tty

dnl Database support
dnl We do not necessarily have to have libdb/lib(g)dbm for DB/(G)DBM support.
dnl On FreeBSD, both DB and DBM are part of libc.
dnl By default, we check for DBM support in libgdbm, then libc, then libdbm.

test "$with_database_gdbm $with_database_dbm $with_database_berkdb" \
  != "no no no" && AC_MSG_CHECKING([for database support]) && \
  AC_MSG_RESULT()

dnl Check for ndbm.h, required for either kind of DBM support.
dnl #### Should we check for gdbm.h, too?  (Seen on MacPorts.)
if test "$with_database_gdbm $with_database_dbm" != "no no"; then
  ndbm_h_file=""
  AC_CHECK_HEADERS([ndbm.h gdbm/ndbm.h],[ndbm_h_file=$ac_header; break;],[],[])
  if test "x$ndbm_h_file" = "x"; then
    test "$with_database_gdbm" = "yes" -o \
         "$with_database_dbm"  = "yes" && \
      XE_DIE("Required DBM support cannot be provided.")
    with_database_gdbm=no with_database_dbm=no]
  fi
fi

dnl Check for DBM support in libgdbm.
if test "$with_database_gdbm" != "no"; then
  AC_CHECK_LIB(gdbm, dbm_open, [
   with_database_gdbm=yes with_database_dbm=no libdbm=-lgdbm], [
       AC_CHECK_LIB(gdbm_compat, dbm_open, [
       with_database_gdbm=yes with_database_dbm=no libdbm="-lgdbm_compat -lgdbm"], [
   if test "$with_database_gdbm" = "yes"; then
     XE_DIE("Required GNU DBM support cannot be provided.")
   fi
   with_database_gdbm=no], -lgdbm)
  ])
fi

dnl Check for DBM support in libc and libdbm.
if test "$with_database_dbm" != "no"; then
  AC_CHECK_FUNC(dbm_open, [with_database_dbm=yes libdbm=], [
    AC_CHECK_LIB(dbm, dbm_open, [with_database_dbm=yes libdbm=-ldbm], [
      test "$with_database_dbm" = "yes" && \
        XE_DIE("Required DBM support cannot be provided.")
      with_database_dbm=no])])
fi

dnl Tell make about the DBM support we detected.
test -n "$libdbm" && XE_PREPEND("$libdbm", LIBS)
if test "$with_database_gdbm" = "yes" -o \
        "$with_database_dbm"  = "yes"; then
  AC_DEFINE_UNQUOTED(NDBM_H_FILE,"$ndbm_h_file")
  AC_DEFINE(HAVE_DBM)
  dnl gdbm's ndbm.h has old-style prototypes with missing arguments.
  dnl These just don't cut it for c++.  So if we're using c++, then
  dnl test whether we can make a dbm call, using dbm_close(DBM *).
  if test "$XEMACS_CC_GPP" = "yes"; then
    AC_MSG_RESULT()
    AC_LANG_PUSH(C++)
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([#include "$ndbm_h_file"],
    [dbm_close((DBM *) 0);])],
      [AC_MSG_CHECKING(whether ndbm.h is compatible with g++)
       AC_MSG_RESULT(yes)
       AC_DEFINE(TRUST_NDBM_H_PROTOTYPES)],
      [AC_MSG_CHECKING(whether ndbm.h is compatible with g++)
       AC_MSG_RESULT(no)])
    AC_LANG_POP()
  else
    AC_DEFINE(TRUST_NDBM_H_PROTOTYPES)
  fi
  $as_unset ndbm_h_file
fi

dnl Check for u_int*_t typedefs.
AC_CHECK_TYPES([u_int8_t, u_int16_t, u_int32_t])

dnl Check for Berkeley DB.
if test "$with_database_berkdb" != "no"; then
  AC_MSG_CHECKING(for Berkeley db.h)
  for header in "db/db.h" "db.h"; do
    AC_COMPILE_IFELSE([AC_LANG_SOURCE([
#include <stdlib.h>
#if !(defined __GLIBC__ && __GLIBC_MINOR__ >= 1)
#ifdef HAVE_INTTYPES_H
#define __BIT_TYPES_DEFINED__
#include <inttypes.h>
#if !HAVE_U_INT8_T
typedef uint8_t  u_int8_t;
#endif
#if !HAVE_U_INT16_T
typedef uint16_t u_int16_t;
#endif
#if !HAVE_U_INT32_T
typedef uint32_t u_int32_t;
#endif
#ifdef WE_DONT_NEED_QUADS
#if !HAVE_U_INT64_T
typedef uint64_t u_int64_t;
#endif
#endif
#endif
#endif
#include <$header>
])], db_h_file="$header"; break)
  done
  if test -z "$db_h_file"
  then AC_MSG_RESULT(no); with_database_berkdb=no
  else AC_MSG_RESULT($db_h_file)
  fi

  if test "$with_database_berkdb" != "no"; then
    AC_MSG_CHECKING(for Berkeley DB version)
    AC_EGREP_CPP(yes,
[#include <$db_h_file>
#if DB_VERSION_MAJOR > 1
yes
#endif
], [AC_EGREP_CPP(yes,
[#include <$db_h_file>
#if DB_VERSION_MAJOR > 2
yes
#endif
], [AC_EGREP_CPP(yes,
[#include <$db_h_file>
#if DB_VERSION_MAJOR > 3
yes
#endif
], [AC_MSG_RESULT(4); dbfunc=db_create; dbver=4],[
    AC_MSG_RESULT(3); dbfunc=db_create; dbver=3])],[
    AC_MSG_RESULT(2); dbfunc=db_open; dbver=2])],[
    AC_MSG_RESULT(1); dbfunc=dbopen; dbver=1])
    AC_CHECK_FUNC($dbfunc,     with_database_berkdb=yes need_libdb=no, [
    AC_CHECK_LIB(db, $dbfunc,  with_database_berkdb=yes need_libdb=yes)])
  fi

  dnl Berk db 4.1 decorates public functions with version information
  if test "$with_database_berkdb" = "yes" -a "$dbver" = "4"; then
    rm -f $tempcname
    echo "#include <$db_h_file>" > $tempcname
    echo "configure___ dbfunc=db_create" >> $tempcname
    define(TAB, [	])dnl
    eval `$CPP -Isrc $tempcname \
	| sed -n -e "s/[[ TAB]]*=[[ TAB\"]]*/='/" -e "s/[[ TAB\"]]*\$/'/" -e "s/^configure___//p"`
    rm -f $tempcname
    AC_MSG_WARN("db_create is really $dbfunc")
    AC_CHECK_LIB(db, $dbfunc,  with_database_berkdb=yes need_libdb=yes)
  fi

  if test "$with_database_berkdb" = "yes"; then
    AC_DEFINE_UNQUOTED(DB_H_FILE, "$db_h_file")
    AC_DEFINE(HAVE_BERKELEY_DB)
    test "$need_libdb" = "yes" && XE_PREPEND(-ldb, LIBS)
  else with_database_berkdb=no
  fi
fi

if test "$with_database_gdbm $with_database_dbm $with_database_berkdb" \
     != "no no no"; then
  AC_DEFINE(HAVE_DATABASE)
fi

dnl Socks support
if test "$with_socks" = "yes"; then
  AC_CHECK_LIB(socks, SOCKSinit)
  test -n "$ac_cv_lib_socks_SOCKSinit" && AC_DEFINE(HAVE_SOCKS)
fi

dnl Usage tracking (undocumented and likely unused option)
if test "$usage_tracking" = "yes"; then
  AC_DEFINE(USAGE_TRACKING)
  XE_PREPEND(-Bstatic -lut -Bdynamic, LIBS)
fi

dnl Enhanced number support
if test "$with_bignum" = "gmp"; then
  AC_CHECK_HEADER(gmp.h, [
    AC_CHECK_LIB(gmp, __gmpz_init, have_mpz_init=yes)])
  if test "$have_mpz_init" = "yes"; then
    AC_DEFINE(WITH_NUMBER_TYPES)
    AC_DEFINE(WITH_GMP)
    XE_PREPEND(-lgmp, LIBS)
  else
    XE_DIE("Required GMP numeric support cannot be provided.")
  fi
elif test "$with_bignum" = "mpir"; then
  AC_CHECK_HEADER(mpir.h, [
    AC_CHECK_LIB(mpir, __gmpz_init, have_mpz_init=yes)])
  if test "$have_mpz_init" = "yes"; then
    AC_DEFINE(WITH_NUMBER_TYPES)
    AC_DEFINE(WITH_MPIR)
    XE_PREPEND(-lmpir, LIBS)
  else
    XE_DIE("Required MPIR numeric support cannot be provided.")
  fi
elif test "$with_bignum" = "mp"; then
  for library in "" "-lcrypto"; do
    AC_CHECK_HEADER(mp.h, [
      AC_CHECK_LIB(mp, mp_mfree, have_mp_mfree=yes; break, [
	AC_CHECK_LIB(mp, mfree, have_mfree=yes; break, , $library)],
	$library)])
  done
  if test "$have_mp_mfree" = "yes"; then
    AC_DEFINE(MP_PREFIX)
    XE_APPEND(-lmp, LIBS)
    if test "$library" != ""; then
      XE_APPEND($library, LIBS)
    fi
    AC_CHECK_FUNC(mp_move, [AC_DEFINE(HAVE_MP_MOVE)])
  elif test "$have_mfree" = "yes"; then
    XE_APPEND(-lmp, LIBS)
    if test "$library" != ""; then
      XE_APPEND($library, LIBS)
    fi
    AC_CHECK_FUNC(move, [AC_DEFINE(HAVE_MP_MOVE)])
  else
    XE_DIE("Required MP numeric support cannot be provided.")
  fi
  AC_CHECK_FUNC(mp_set_memory_functions,
    [AC_DEFINE(HAVE_MP_SET_MEMORY_FUNCTIONS)],
    [AC_CHECK_FUNC(__gmp_set_memory_functions,
      [AC_DEFINE(HAVE_MP_SET_MEMORY_FUNCTIONS)])])
  AC_DEFINE(WITH_NUMBER_TYPES)
  AC_DEFINE(WITH_MP)
fi

dnl TLS support
if test "$with_tls" = "gnutls"; then
  AC_CHECK_HEADER([gnutls/gnutls.h],
    [AC_CHECK_LIB(gnutls, gnutls_global_init, [with_tls=gnutls],
      [XE_DIE("Required gnutls support cannot be provided.")])],
    [XE_DIE("Required gnutls support cannot be provided.")])
elif test "$with_tls" = "nss"; then
  AC_CHECK_HEADER([nss.h],
    [AC_CHECK_LIB(nss3, NSS_InitContext, [with_tls=nss],
      [XE_DIE("Required NSS support cannot be provided.")])],
    [XE_DIE("Required NSS support cannot be provided.")])
elif test "$with_tls" = "openssl"; then
  AC_CHECK_HEADER([openssl/ssl.h],
    [AC_CHECK_LIB(ssl, SSL_library_init, [with_tls=openssl],
      [AC_CHECK_LIB(ssl, OPENSSL_init_crypto, [with_tls=openssl],
        [XE_DIE("Required openssl support cannot be provided.")])])],
    [XE_DIE("Required openssl support cannot be provided.")])
fi
dnl Autodetection
dnl Must be requested explicitly with --with-tls.
dnl To default to autodetection, change the next three tests to
dnl if test "$with_tls" != "no".
if test "$with_tls" = "yes"; then
  AC_CHECK_HEADER([gnutls/gnutls.h],
    [AC_CHECK_LIB(gnutls, gnutls_global_init, [with_tls=gnutls])])
fi
if test "$with_tls" = "yes"; then
  AC_CHECK_HEADER([nss.h],
    [AC_CHECK_LIB(nss3, NSS_InitContext, [with_tls=nss])])
fi
if test "$with_tls" = "yes"; then
  AC_CHECK_HEADER([openssl/ssl.h],
    [AC_CHECK_LIB(ssl, SSL_library_init, [with_tls=openssl], [with_tls=no])])
fi
if test "$with_tls" != "no"; then
  if test "$with_tls" = "gnutls"; then
    AC_DEFINE(HAVE_GNUTLS)
    gnutls_cflags=`pkg-config --cflags gnutls`
    if test "$?" = 0; then
      XE_PREPEND("$gnutls_cflags", CPPFLAGS)
    fi
    gnutls_libs=`pkg-config --libs gnutls`
    if test "$?" = 0; then
      XE_APPEND("$gnutls_libs", LIBS)
    fi
    AC_CHECK_FUNC(gnutls_certificate_verification_status_print,
	[AC_DEFINE(HAVE_GNUTLS_CERTIFICATE_VERIFICATION_STATUS_PRINT)])
    AC_CHECK_FUNC(gnutls_certificate_verify_peers3,
	[AC_DEFINE(HAVE_GNUTLS_CERTIFICATE_VERIFY_PEERS3)])
  elif test "$with_tls" = "nss"; then
    AC_DEFINE(HAVE_NSS)
    nss_cflags=`pkg-config --cflags nss`
    if test "$?" = 0; then
      XE_PREPEND("$nss_cflags", CPPFLAGS)
    fi
    nss_libs=`pkg-config --libs nss`
    if test "$?" = 0; then
      XE_APPEND("$nss_libs", LIBS)
    fi
  elif test "$with_tls" = "openssl"; then
    AC_DEFINE(HAVE_OPENSSL)
    openssl_cflags=`pkg-config --cflags openssl`
    if test "$?" = 0; then
      XE_PREPEND("$openssl_cflags", CPPFLAGS)
    fi
    openssl_libs=`pkg-config --libs openssl`
    if test "$?" = 0; then
      XE_APPEND("$openssl_libs", LIBS)
    fi
    dnl Check whether X509_check_host can be linked in.
    AC_CHECK_FUNC(X509_check_host,
        AC_COMPILE_IFELSE(
            dnl It can; check that its declaration is compatible with five
            dnl arguments. An early version of the function took only four.
            [AC_LANG_PROGRAM([#include <openssl/x509v3.h>],
                 [return X509_check_host ((void *) 0,
                                          (const char *) 0, 0, 0, 
                                          (void *) 0); ])],
            dnl Now check that it is *not* compatible with just one argument,
            dnl as would be the case if no declaration was in the header, and
            dnl the header was old, compared to the DLL. This sort of version
            dnl sanity-checking is particularly necessary with OpenSSL. E.g. on
            dnl OS X there has always been an installed system version of it,
            dnl but pkg-config, above, will pick up the MacPorts version.
            [ AC_MSG_CHECKING(that X509_check_host is declared)
              AC_COMPILE_IFELSE([AC_LANG_PROGRAM([#include <openssl/x509v3.h>],
                                               [return X509_check_host (-1);])],
                                AC_MSG_RESULT(no),
                                [AC_MSG_RESULT(yes)
                                 AC_DEFINE(HAVE_X509_CHECK_HOST)])]))
  else
    with_tls=no
  fi
fi
if test "$with_tls" != "no"; then
  AC_DEFINE(WITH_TLS)
fi

dnl Unfortunately, just because we can link doesn't mean we can run.
dnl One of the above link tests may have succeeded but caused resulting
dnl executables to fail to run.  Also any tests using AC_RUN_IFELSE will
dnl have reported incorrect results.
AC_RUN_IFELSE([AC_LANG_SOURCE([int main(int c,char **v){return 0;}])],[:],[
  echo ""
  echo "*** PANIC *** The C compiler can no longer build working executables."
  echo "*** PANIC *** Please examine the tail of config.log for runtime errors."
  echo "*** PANIC *** The most likely reason for this problem is that configure"
  echo "*** PANIC *** links with shared libraries, but those libraries cannot be"
  echo "*** PANIC *** found at run time."
  echo "*** PANIC ***"
  echo "*** PANIC *** On a Linux system, edit /etc/ld.so.conf and re-run ldconfig."
  echo "*** PANIC *** On other systems, try telling configure where to find the"
  echo "*** PANIC *** shared libraries using the --with-site-runtime-libraries option"
  echo "*** PANIC ***"
  echo "*** PANIC *** Another way to shoot yourself in the foot is to specify"
  echo "*** PANIC *** --with-FEATURE when FEATURE is not actually installed"
  echo "*** PANIC *** on your system.  Don't do that."
  exit 1])

dnl Process support
if test "$win32_processes" != "yes"; then
  AC_DEFINE(HAVE_UNIX_PROCESSES)
fi

dnl --------------------------------
dnl Compute SUBST-itutable variables
dnl --------------------------------

dnl We ignore (C|LD)_SWITCH_X_(MACHINE|SYSTEM)
dnl Use XE_SPACE instead of plain assignment statements to remove extraneous blanks
if test "$with_modules" = "yes"; then
  ld_libs_module=
else
  XE_SPACE(ld_libs_module, $ldap_libs $postgresql_libs $canna_libs)
fi

XE_SPACE(CFLAGS, $CFLAGS)
XE_SPACE(extra_objs, $extra_objs)
XE_SPACE(c_switch_general, -DHAVE_CONFIG_H $c_switch_site $c_switch_machine $c_switch_system)
XE_SPACE(c_switch_window_system, $c_switch_x_site $c_switch_gtk $X_CFLAGS)
XE_SPACE(c_switch_all, $c_switch_general $c_switch_window_system)
XE_SPACE(ld_switch_general, $ld_switch_site $ld_switch_machine $ld_switch_system $ld_switch_run)
XE_SPACE(ld_switch_window_system, $ld_switch_x_site)
XE_SPACE(ld_switch_all, $ld_switch_general $ld_switch_window_system)
XE_SPACE(ld_libs_general, $LIBS $libs_machine $libs_system $libs_standard)
XE_SPACE(ld_libs_window_system, $X_EXTRA_LIBS $libs_x $libs_gtk $X_PRE_LIBS)
XE_SPACE(ld_libs_all, $ld_libs_window_system $ld_libs_general $ld_libs_module)

dnl For no-module builds, make the src dir last
if test "$with_modules" = "no"; then
  XE_APPEND(src, MAKE_SUBDIR)
fi

dnl Compute lists of Makefiles and subdirs
AC_SUBST(SRC_SUBDIR_DEPS)
internal_makefile_list="Makefile.in src/.gdbinit.in"
SUBDIR_MAKEFILES=''
test -d lock || mkdir lock
for dir in $MAKE_SUBDIR; do
  case "$dir" in */* ) dnl Implement mkdir -p
    ( for d in `echo $dir | sed 's:/: :g'` ; do
        test -d "$d" || mkdir "$d"; cd "$d"
      done ) ;;
   * ) test -d "$dir" || mkdir "$dir" ;;
  esac
  XE_SPACE(SUBDIR_MAKEFILES, $SUBDIR_MAKEFILES $dir/Makefile $dir/GNUmakefile)
  XE_SPACE(internal_makefile_list, $internal_makefile_list $dir/Makefile.in)
done
AC_SUBST(INSTALL_ARCH_DEP_SUBDIR)
AC_SUBST(MAKE_SUBDIR)
AC_SUBST(SUBDIR_MAKEFILES)

dnl Make s&m symlinks in the src directory, for config.h.
for dir in src/s src/m; do
  if test ! -d "$dir" ; then
    echo Making symbolic link to "$srcdir/$dir"
    ${LN_S} "$srcdir/$dir" "$dir"
  fi
done

dnl Also make modules/common link if needed for the module Makefiles.
if test "$with_modules" = "yes"; then
  for dir in modules/common; do
    if test ! -d "$dir" ; then
      echo Making symbolic link to "$srcdir/$dir"
      ${LN_S} "$srcdir/$dir" "$dir"
    fi
  done
fi

if test "$verbose" = "yes"; then
  echo ""
  PRINT_VAR(extra_objs
   c_switch_general  c_switch_window_system  c_switch_all
  ld_switch_general ld_switch_window_system ld_switch_all
    ld_libs_general   ld_libs_window_system   ld_libs_all)
  echo ""
fi

dnl ----------------------------------------------
dnl Create some auxiliary files for developers.
dnl ----------------------------------------------

dnl Unlike TAGS, debugger init files depend on config.h.
dnl Regenerate them locally on every configure.
dnl .gdbinit is now handled like xemacs.def or other src files, and
dnl its source is in src/.gdbinit.in.in.

dnl Create a useful TAGS file
if test -f "$srcdir/TAGS" -a ! -f "TAGS"; then
  test "$verbose" = "yes" && echo "creating TAGS"
  echo "
$srcdir/TAGS,include" > "TAGS"
fi

dnl Create top level .sbinit for Sun compilers
if test "$__SUNPRO_C" = "yes"; then
  test "$verbose" = "yes" && echo "creating .sbinit"
  ( echo "# For use with Sun WorkShop's Source browser."
    echo "# See sbquery(1) and sbinit(4) for more information"
    for dir in $MAKE_SUBDIR; do echo "import $dir"; done
  ) > .sbinit
fi

dnl There are no more compile tests; remove the core they created.
rm -f core

dnl ----------------------------------------------
dnl Substitute into Makefile, config.h and paths.h
dnl ----------------------------------------------

dnl what sort of things to edit into Makefile, config.h and paths.h
dnl configuration here uncanonicalized to avoid exceeding size limits.

AC_SUBST(PROGNAME)
AC_SUBST(version)
AC_SUBST(verbose_version)
AC_SUBST(inststaticdir)
AC_SUBST(instvardir)
AC_SUBST(srcdir)
AC_SUBST(bindir)
AC_SUBST(datarootdir)
AC_SUBST(datadir)
AC_SUBST(statedir)
AC_SUBST(libdir)
AC_SUBST(mandir)
AC_SUBST(extra_includes)

AC_SUBST(prefix)
AC_SUBST(PREFIX_USER_DEFINED)
XE_EXPAND_VARIABLE(prefix,PREFIX)
AC_SUBST(PREFIX)

AC_SUBST(exec_prefix)
AC_SUBST(EXEC_PREFIX_USER_DEFINED)
XE_EXPAND_VARIABLE(exec_prefix,EXEC_PREFIX)
AC_SUBST(EXEC_PREFIX)

AC_SUBST(infodir)
AC_SUBST(INFODIR_USER_DEFINED)
XE_EXPAND_VARIABLE(infodir,INFODIR)
AC_SUBST(INFODIR)

AC_SUBST(infopath,$with_infopath)
AC_SUBST(INFOPATH_USER_DEFINED)
XE_EXPAND_VARIABLE(with_info_path,INFOPATH)
AC_SUBST(INFOPATH)

test -n "$with_user_packages" && with_early_packages=$with_user_packages
AC_SUBST(early_packages,$with_early_packages)
AC_SUBST(EARLY_PACKAGE_DIRECTORIES_USER_DEFINED)
XE_EXPAND_VARIABLE(with_early_packages,EARLY_PACKAGE_DIRECTORIES)
AC_SUBST(EARLY_PACKAGE_DIRECTORIES)

test -n "$with_system_packages" && with_late_packages=$with_system_packages
AC_SUBST(late_packages,$with_late_packages)
AC_SUBST(LATE_PACKAGE_DIRECTORIES_USER_DEFINED)
XE_EXPAND_VARIABLE(with_late_packages,LATE_PACKAGE_DIRECTORIES)
AC_SUBST(LATE_PACKAGE_DIRECTORIES)

test -n "$with_legacy_packages" && with_last_packages=$with_legacy_packages
AC_SUBST(last_packages,$with_last_packages)
AC_SUBST(LAST_PACKAGE_DIRECTORIES_USER_DEFINED)
XE_EXPAND_VARIABLE(with_last_packages,LAST_PACKAGE_DIRECTORIES)
AC_SUBST(LAST_PACKAGE_DIRECTORIES)

AC_SUBST(package_path,$with_package_path)
AC_SUBST(PACKAGE_PATH_USER_DEFINED)
XE_EXPAND_VARIABLE(with_package_path,PACKAGE_PATH)
AC_SUBST(PACKAGE_PATH)

AC_SUBST(lispdir, $with_lispdir)
AC_SUBST(LISPDIR_USER_DEFINED)
XE_EXPAND_VARIABLE(with_lispdir,LISPDIR)
AC_SUBST(LISPDIR)

AC_SUBST(moduledir,$with_moduledir)
AC_SUBST(MODULEDIR_USER_DEFINED)
XE_EXPAND_VARIABLE(with_moduledir,MODULEDIR)
AC_SUBST(MODULEDIR)

AC_SUBST(sitelispdir,$with_sitelispdir)
AC_SUBST(SITELISPDIR_USER_DEFINED)
XE_EXPAND_VARIABLE(sitelispdir,SITELISPDIR)
AC_SUBST(SITELISPDIR)

AC_SUBST(sitemoduledir)
AC_SUBST(SITEMODULEDIR_USER_DEFINED)
XE_EXPAND_VARIABLE(sitemoduledir,SITEMODULEDIR)
AC_SUBST(SITEMODULEDIR)

AC_SUBST(etcdir,$with_etcdir)
AC_SUBST(ETCDIR_USER_DEFINED)
XE_EXPAND_VARIABLE(with_etcdir,ETCDIR)
AC_SUBST(ETCDIR)

AC_SUBST(archlibdir,$with_archlibdir)
AC_SUBST(ARCHLIBDIR_USER_DEFINED)
ARCHLIBDIR=$with_archlibdir
XE_EXPAND_VARIABLE(with_archlibdir,ARCHLIBDIR)
AC_SUBST(ARCHLIBDIR)

AC_SUBST(docdir,$with_docdir)
AC_SUBST(DOCDIR_USER_DEFINED)
XE_EXPAND_VARIABLE(with_docdir,DOCDIR)
AC_SUBST(DOCDIR)

AC_SUBST(docdir)
AC_SUBST(bitmapdir)
AC_SUBST(extra_objs)

dnl The following flags combine all the information from:
dnl - command line options (user always gets priority)
dnl - user environment variables
dnl - determined by configure
dnl - the s&m header files (required for ellcc)
AC_SUBST(machfile)
AC_SUBST(opsysfile)
AC_SUBST(c_switch_general)
AC_SUBST(c_switch_window_system)
AC_SUBST(c_switch_all)
AC_SUBST(ld_switch_general)
AC_SUBST(ld_switch_window_system)
AC_SUBST(ld_switch_all)
AC_SUBST(ld_libs_general)
AC_SUBST(ld_libs_window_system)
AC_SUBST(ld_libs_all)
AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)
AC_SUBST(MAKEINFO)
RECURSIVE_MAKE_ARGS="\$(MFLAGS) CC='\$(CC)' CFLAGS='\$(CFLAGS)' LDFLAGS='\$(LDFLAGS)' CPPFLAGS='\$(CPPFLAGS)' MAKEINFO='\$(MAKEINFO)'"
AC_SUBST(RECURSIVE_MAKE_ARGS)

AC_SUBST(native_sound_lib,$with_native_sound_lib)
AC_SUBST(sound_cflags)
AC_SUBST(RANLIB)

AC_SUBST(XEMACS_CC)
AC_SUBST(XE_CFLAGS)

dnl The default is yes
if test "$with_prefix" = "yes"; then
  AC_DEFINE(PREFIX_USER_DEFINED)
fi

dnl The default is no
if test "$with_site_lisp" = "no"; then
  AC_DEFINE(INHIBIT_SITE_LISP)
fi
dnl The default is yes
if test "$with_site_modules" = "no"; then
  AC_DEFINE(INHIBIT_SITE_MODULES)
fi

XE_SPACE(ac_configure_args, $ac_configure_args)
dnl Put back the leading space to work around problems with
dnl 'config.status --recheck' under autoconf 2.60 and 2.61.
ac_configure_args=" $ac_configure_args"
AC_DEFINE_UNQUOTED(EMACS_CONFIGURATION, "$ac_cv_build")
AC_DEFINE_UNQUOTED(EMACS_CONFIG_OPTIONS, "$ac_configure_args")

dnl Following are deprecated

null_string=""
AC_DEFINE_UNQUOTED(LD_SWITCH_X_SITE,     $null_string)
AC_DEFINE_UNQUOTED(LD_SWITCH_X_SITE_AUX, $null_string)
AC_DEFINE_UNQUOTED(C_SWITCH_X_SITE,      $null_string)
AC_DEFINE_UNQUOTED(LD_SWITCH_SITE,       $null_string)
AC_DEFINE_UNQUOTED(C_SWITCH_SITE,        $null_string)

dnl Note: as a general rule, *only* define things here that are not
dnl autodetected.  For things that are autodetected, define them
dnl at the point where the autodetection occurs or would occur,
dnl so that the user gets immediate feedback on the results of the
dnl autodetection.

test "$GCC"                  = "yes" && AC_DEFINE(USE_GCC)
test "$XEMACS_CC_GPP"        = "yes" && AC_DEFINE(USE_GPLUSPLUS)
test "$with_external_widget" = "yes" && AC_DEFINE(EXTERNAL_WIDGET)
test "$with_kkcc"            = "yes" && AC_DEFINE(USE_KKCC)
test "$with_newgc"           = "yes" && AC_DEFINE(NEW_GC)
test "$have_vdb_posix"       = "yes" && AC_DEFINE(VDB_POSIX)
test "$have_vdb_fake"        = "yes" && AC_DEFINE(VDB_FAKE)
test "$with_quick_build"     = "yes" && AC_DEFINE(QUICK_BUILD)
test "$with_purify"          = "yes" && AC_DEFINE(PURIFY)
test "$with_quantify"        = "yes" && AC_DEFINE(QUANTIFY)
test "$with_valgrind"        = "yes" && AC_DEFINE(USE_VALGRIND)
test "$with_pop"             = "yes" && AC_DEFINE(MAIL_USE_POP)
test "$with_kerberos"        = "yes" && AC_DEFINE(KERBEROS)
test "$with_hesiod"          = "yes" && AC_DEFINE(HESIOD)
test "$with_union_type"      = "yes" && AC_DEFINE(USE_UNION_TYPE)
test "$with_pdump"           = "yes" && AC_DEFINE(PDUMP)
test "$with_dump_in_exec"    = "yes" && AC_DEFINE(DUMP_IN_EXEC)
test "$with_ipv6_cname"      = "yes" && AC_DEFINE(IPV6_CANONICALIZE)



dnl -------------------------------------------------------------------------
dnl -------------------------------
dnl Report on what we decided to do
dnl -------------------------------

dnl #### We should tag this as the _build_ environment.
dnl Before doing that, though, must check if tools care about line 1.

if test ! -z ${emacs_beta_version} ; then
  if test -z "${emacs_is_beta}" ; then
	xemacs_betaname=".${emacs_beta_version}"
  else
	xemacs_betaname="-b${emacs_beta_version}"
  fi
else
  xemacs_betaname=""
fi

echo ""
: > Installation

dnl Start stdout redirection to '| tee -a Installation'
(
dnl /etc/osversion is on SONY NEWS-OS
if test -f /etc/osversion; then dnl SONY NEWS-OS
  echo "osversion: `cat /etc/osversion`"
else
  echo "uname -a: `uname -a`"
fi
echo ""
echo "$progname $ac_configure_args"

echo "

XEmacs ${emacs_major_version}.${emacs_minor_version}${xemacs_betaname} \"$xemacs_codename\" $xemacs_extra_name configured for \`$ac_cv_build'."

echo "
Compilation Environment and Installation Defaults:"
echo "  Source code location:              $srcdir"
echo "  Installation prefix:               $prefix"
if test -n "$with_site_includes"; then
  echo "  Additional header files:           $with_site_includes"
fi
if test -n "$with_site_libraries"; then
  echo "  Additional libraries:              $with_site_libraries"
fi
if test -n "$with_site_prefixes"; then
  echo "  Additional prefixes:               $with_site_prefixes"
fi
if test -n "$runpath"; then
  echo "  Runtime library search path:       $runpath"
fi

if test -n "$opsysfile"
then echo "  Operating system description file: \`$opsysfile'"
else echo "  Not using any operating system description file"
fi
if test -n "$machfile"
then echo "  Machine description file:          \`$machfile'"
else echo "  Not using any machine description file"
fi

echo "  Compiler version:                  $compiler_version"
if test -n "$gcc_compiler_specs"; then
  echo "    - GCC specs file:                $gcc_compiler_specs"
fi
echo "    - Compiler command:              $XEMACS_CC $c_switch_all"
if test "$CC" != "$XEMACS_CC"; then
  echo "  Compiler version for lib-src:      (detection code unimplemented)"
  echo "    - Compiler command for lib-src:  $CC $CFLAGS"
  if test "$xemacs_cc_cc_mismatch" = "yes"; then
    echo "  WARNING: CC and XEMACS_CC mismatched; check CFLAGS carefully."
  fi
fi
echo "  libc version:                      $libc_version"
echo "  Relocating allocator for buffers:  $with_rel_alloc"
case "$ld_switch_site" in
  *nocombreloc*) echo "  Linking with \`-z nocombreloc'.
    - Consider configuring with --with-pdump." ;;
esac
echo "
Package Search (a 'root' contains '{xemacs,mule,site}-packages'):"

if test -n "$with_early_packages"; then
  COLON_TO_SPACE_WARN(with_early_packages)
  echo "  User package roots:    $with_early_packages"
else
  echo "  User package roots:    ~/.xemacs"
fi

dnl Unlike the others, with_late_packages gets a non-null default.
XE_EXPAND_VARIABLE(with_late_packages,with_late_packages_expanded)
COLON_TO_SPACE_WARN(with_late_packages_expanded)
echo "  System package roots:  $with_late_packages_expanded"
for path in $with_late_packages_expanded; do
  if test ! -d $path; then
    echo "    WARNING: $path was specified, but doesn't exist."
    echo "    WARNING: XEmacs functionality will be noticably limited until"
    echo "    WARNING: some packages are installed."
  elif test ! -d "$path/xemacs-packages" \
         -a ! -d "$path/mule-packages" \
         -a ! -d "$path/site-packages"; then
    echo "    WARNING: No packages found in $path."
    echo "    WARNING: XEmacs functionality will be noticably limited until"
    echo "    WARNING: some packages are installed."
  fi
done
dnl #### Shouldn't need this.
if test -z "$with_late_packages"; then
  echo "    XEmacs BUG: with_late_packages is unset.  Please report this!"
fi

if test -n "$with_last_packages"; then
  COLON_TO_SPACE_WARN(with_last_packages)
  echo "  Legacy package roots:  $with_last_packages"
  for path in $with_last_packages; do
    if test ! -d $path; then
      echo "    WARNING: $path was specified, but doesn't exist."
      echo "    WARNING: If you don't need this setting, it is recommended"
      echo "    WARNING: that you not use it."
    elif test ! -d "$path/xemacs-packages" \
           -a ! -d "$path/mule-packages" \
           -a ! -d "$path/site-packages"; then
      echo "    WARNING: No packages found in $path."
      echo "    WARNING: If you don't need this setting, it is recommended"
      echo "    WARNING: that you not use it."
    fi
  done
fi

echo "
Window System:"
if test "$with_msw" = "yes"; then
  echo "  Compiling in support for the Microsoft window system."
fi
if test "$with_x11" = "yes"; then
  echo "  Compiling in support for the X window system:"
  echo "    - X Windows headers location:                 $x_includes"
  echo "    - X Windows libraries location:               $x_libraries"
  if test "$with_xauth" != yes; then
    echo "    - Xau (X authority) not available."
  fi
  if test "$with_wmcommand" != no; then
    echo "    - Handling WM_COMMAND properly."
  fi
  if test "$with_fontconfig" = "yes"; then
    echo "    - Using fontconfig to manage fonts."
  fi
  if test "$with_xft_emacs" = "yes"; then
    echo "    - Compiling in support for Xft antialiased fonts (EXPERIMENTAL)."
  fi
fi
if test "$need_motif" = "yes" ; then
  echo "  Compiling in support for Motif."
  if test "$have_lesstif" = "yes"; then
    echo "    - Using LessTif implementation."
  fi
  echo "  *WARNING*  Many versions of Motif are buggy, requiring workarounds."
  echo "             You are likely to experience slow redisplay."
  echo "             You may need to install vendor patches to Motif."
  echo "             See PROBLEMS for more information."
fi
if test "$need_athena" = "yes"; then
  echo "  Compiling in support for the Athena widget set:"
  echo "    - Athena headers location:                    $athena_h_path"
  echo "    - Athena library to link:                     $athena_lib"
fi
case "$with_menubars" in
  gtk   ) echo "  Using GTK menubars."   ;;
  lucid ) echo "  Using Lucid menubars." ;;
  motif ) echo "  Using Motif menubars."
          echo "  *WARNING*  The Motif menubar implementation is currently buggy."
          echo "             We recommend using the Lucid menubar instead."
          echo "             Re-run configure with --with-menubars='lucid'." ;;
    msw ) echo "  Using MS-Windows menubars." ;;
esac
if test "$with_xft_menubars" = "yes"; then
  echo "    - Using Xft to render antialiased fonts in menubars."
  echo "      WARNING: This Xft feature will be replaced with a face."
fi
case "$with_scrollbars" in
  gtk    ) echo "  Using GTK scrollbars."        ;;
  lucid  ) echo "  Using Lucid scrollbars."      ;;
  motif  ) echo "  Using Motif scrollbars."      ;;
  athena ) echo "  Using Athena scrollbars."     ;;
     msw ) echo "  Using MS-Windows scrollbars." ;;
esac
case "$with_dialogs" in
  gtk    ) echo "  Using GTK dialog boxes." ;;
  motif  ) echo "  Using Motif dialog boxes."
           if test "$unexec" = "unexaix.o"; then if test "`uname -v`" = 4 -a "`uname -r`" -ge 3; then
             echo "  *WARNING*  The Motif dialog boxes cause problems on AIX 4.3 and higher."
             echo "             We recommend using the Athena dialog boxes instead."
             echo "             Install libXaw and re-run configure with --with-dialogs='athena'."
             echo "             Read the PROBLEMS file for more information."
           fi; fi ;;
  athena ) echo "  Using Athena dialog boxes."     ;;
     msw ) echo "  Using MS-Windows dialog boxes." ;;
esac
case "$with_widgets" in
  gtk    ) echo "  Using GTK native widgets."        ;;
  motif  ) echo "  Using Motif native widgets."      ;;
  athena ) echo "  Using Athena native widgets."     ;;
     msw ) echo "  Using MS-Windows native widgets." ;;
esac
if test "$with_xft_tabs" = "yes"; then
  echo "    - Using Xft to render antialiased fonts in tab controls."
  echo "      WARNING: This Xft feature will be replaced with a face."
fi
if test "$with_xft_gauges" = "yes"; then
  echo "    - Using Xft to render antialiased fonts in progress bars."
  echo "      WARNING: This Xft feature will be replaced with a face."
  echo "      WARNING: This Xft feature not yet implemented; setting ignored."
fi
if test "$with_dragndrop" = yes; then
  echo "  Compiling in support for Drag'n'Drop (EXPERIMENTAL)."
  echo "    -  Drag'n'Drop prototype:                             $dragndrop_proto."
fi

echo "
TTY:"
test "$with_ncurses" = yes && echo "  Compiling in support for ncurses."
test "$with_gpm" = yes && echo "  Compiling in support for GPM (General Purpose Mouse)."

echo "
Images:"
test "$with_gif" = yes && echo "  Compiling in support for GIF images."
if test "$with_xpm" = yes; then
  echo "  Compiling in support for XPM  images."
elif test "$with_x11" = yes; then
  echo "  WARNING: -----------------------------------------------------------"
  echo "  WARNING: Compiling without XPM image support."
  if test "$xpm_problem" != ""; then
    echo "  Reason: $xpm_problem"
  fi
  echo "  WARNING: You should strongly consider installing XPM."
  echo "  WARNING: Otherwise toolbars and other graphics will look suboptimal."
  echo "  WARNING: (a copy may be found in ftp://ftp.xemacs.org/pub/xemacs/aux)"
  echo "  WARNING: -----------------------------------------------------------"
fi
if test "$with_png" = yes; then
  echo "  Compiling in support for PNG  images."
elif test "$window_system" != "none"; then
  echo "  WARNING: -----------------------------------------------------------"
  echo "  WARNING: Compiling without PNG image support."
  if test "$png_problem" != ""; then
    echo "  Reason: $png_problem"
  fi
  echo "  WARNING: You should strongly consider installing the PNG libraries."
  echo "  WARNING: Otherwise certain images and glyphs may not display."
  echo "  WARNING: (a copy may be found in ftp://ftp.xemacs.org/pub/xemacs/aux)"
  echo "  WARNING: -----------------------------------------------------------"
fi
test "$with_jpeg" = yes && echo "  Compiling in support for JPEG images."
test "$with_tiff" = yes && echo "  Compiling in support for TIFF images."
test "$with_xface" = yes && echo "  Compiling in support for X-Face message headers."

echo "
Sound:"
test "$with_sound_native" = yes && echo "  Compiling in support for sound (native)."
test "$with_sound_alsa" = yes && echo "  Compiling in support for ALSA (Advanced Linux Sound Architecture)."
test "$with_sound_nas" = yes && echo "  Compiling in support for NAS (network audio system)."
test "$old_nas" = yes && echo "    - NAS library lacks error trapping; will play synchronously."
test "$with_sound_esd" = yes && echo "  Compiling in support for ESD (Enlightened Sound Daemon)."

echo "
Databases:"
test "$with_database_berkdb" = yes && echo "  Compiling in support for Berkeley database."
test "$with_database_dbm"    = yes && echo "  Compiling in support for DBM."
test "$with_database_gdbm"   = yes && echo "  Compiling in support for GNU DBM."
test "$with_ldap" = yes && echo "  Compiling in support for LDAP."
if test "$with_postgresql" = yes; then
  echo "  Compiling in support for PostgreSQL."
  echo "    - Using PostgreSQL header file:  $libpq_fe_h_file"
  test "$with_postgresqlv7" = yes && echo "    - Using PostgreSQL V7+ bindings."
fi

echo "
Internationalization:"
if test "$with_mule" = yes; then
  echo "  Compiling in support for Mule (multi-lingual Emacs)."
  test "$with_unicode_internal" = yes && echo "    -  Unicode and UTF-8 will be used internally for text."
  test "$with_unicode_internal" != yes && echo "    -  The old-Mule format will be used internally for text."
fi
test "$with_xim" != no && echo "  Compiling in support for XIM (X11R5+ I18N input method)."
test "$with_xim" = motif && echo "    - Using Motif to provide XIM support."
test "$with_xim" = xlib && echo "    - Using raw Xlib to provide XIM support."
test "$with_xfs" = yes && echo "    - Using XFontSet to provide bilingual menubar."
test "$have_canna" = yes && echo "  Compiling in support for Canna on Mule."
if test "$with_wnn" = yes; then
  echo "  Compiling in support for the WNN input method on Mule."
  test "$with_wnn6" = yes && echo "    - Using WNN version 6."
fi

echo "
Mail:"
test "$with_pop" = yes && echo "  Compiling in support for POP mail retrieval."
test "$with_kerberos" = yes && echo "  Compiling in support for Kerberos POP authentication."
test "$with_hesiod" = yes && echo "  Compiling in support for Hesiod POP server access."
test -n "$with_mail_locking" && echo "  Compiling in support for \"$with_mail_locking\" mail spool file locking method."

echo "
Network:"
test "$with_ipv6_cname" = no && echo "  Inhibiting IPv6 canonicalization at startup."
test "$with_tooltalk" = yes && echo "  Compiling in support for ToolTalk."
test "$with_workshop" = yes && echo "  Compiling in support for Sun WorkShop."
test "$with_socks" = yes && echo "  Compiling in support for SOCKS."
test "$with_dnet" = yes && echo "  Compiling in support for DNET."
test "$with_tls" = nss && echo "  Compiling in support for TLS with NSS."
test "$with_tls" = gnutls && echo "  Compiling in support for TLS with gnutls."
test "$with_tls" = openssl && echo "  Compiling in support for TLS with OpenSSL."

echo "
Other Features:"
test "$with_modules" = "yes" && echo "  Compiling in support for dynamic shared object modules."
test "$with_bignum" = "gmp" && echo "  Compiling in support for more number types using the GNU MP library."
test "$with_bignum" = "mpir" && echo "  Compiling in support for more number types using the MPIR library."
test "$with_bignum" = "mp" && echo "  Compiling in support for more number types using the BSD MP library."
if test "$with_union_type" = yes ; then
  echo "  Using the union type for Lisp_Objects."
  echo "  WARNING: ---------------------------------------------------------"
  echo "  WARNING: This tends to trigger compiler bugs, especially when"
  echo "  WARNING: combined with MULE and ERROR_CHECKING.  Crashes have"
  echo "  WARNING: been seen with various versions of GCC (up to about 2.95),"
  echo "  WARNING: and recently with Visual C++ as well (mid-2003)."
  echo "  WARNING: More recent versions may be safer, or not."
  echo "  WARNING: ---------------------------------------------------------"
fi
if test "$with_kkcc" = yes ; then
  echo "  Using the new GC mark algorithms (KKCC)."
  echo "  WARNING: ---------------------------------------------------------"
  echo "  WARNING: The new algorithms are experimental. They are enabled by"
  echo "  WARNING: default for this release. Use \`--disable-kkcc' to"
  echo "  WARNING: turn it off."
  echo "  WARNING: ---------------------------------------------------------"
fi
test "$with_newgc" = yes && echo "  Using the new incremental garbage collector and the new allocator."
if test "$have_vdb_posix" = yes ; then
  if test "$have_vdb_sigaction" = yes ; then 
    echo "  Using POSIX sigaction() to install fault handler."
  else
    echo "  Using POSIX signal() to install vdb fault handler."
  fi
fi
if test "$have_vdb_win32" = yes ; then
  echo "  Using special WIN32 vdb fault handler."
fi
if test "$have_vdb_mach" = yes ; then
  echo "  Using mach exception mechanism as vdb fault handler."
fi
if test "$have_vdb_fake" = yes && test "$with_vdb" == fake; then
  echo "  Virtual dirty bit write barrier manually disabled."
fi
test "$with_pdump" = yes && echo "  Using the new portable dumper."
test "$with_dump_in_exec" = yes && echo "  Dumping into executable."
test "$with_debug" = yes && echo "  Compiling in support for extra debugging code."
test "$usage_tracking" = yes && echo "  Compiling in support for active usage tracking (Sun internal)."
if test "$with_error_checking_extents $with_error_checking_types $with_error_checking_text $with_error_checking_gc $with_error_checking_malloc $with_error_checking_glyphs $with_error_checking_byte_code $with_error_checking_display $with_error_checking_structures" \
  != "no no no no no no no no no"; then
  echo "  Compiling in support for runtime error checking."
  echo "  WARNING: ---------------------------------------------------------"
  echo "  WARNING: XEmacs will run noticeably more slowly as a result."
  echo "  WARNING: Error checking is on by default for XEmacs beta releases."
  echo "  WARNING: ---------------------------------------------------------"
fi
test "$with_valgrind" = yes && echo "  Compiling in support for memory debugging with Valgrind."
echo ""
) | tee -a Installation
dnl echo "The above configure report is appended to \"Installation\" file."
echo ""

dnl -----------------------------------
dnl Now generate config.h and Makefiles
dnl -----------------------------------
AC_CONFIG_HEADER(src/config.h lwlib/config.h)

dnl This has to be called in order for this variable to get into config.status
AC_SUBST(internal_makefile_list)
# Remove any trailing slashes in these variables.
test -n "$prefix" &&
  prefix=`echo '' "$prefix" | sed -e 's:^ ::' -e 's,\([[^/]]\)/*$,\1,'`
test -n "$exec_prefix" &&
  exec_prefix=`echo '' "$exec_prefix" | sed -e 's:^ ::' -e 's,\([[^/]]\)/*$,\1,'`

dnl Build Makefile.in's from Makefile.in.in's
dnl except ./Makefile from $srcdir/Makefile.in
dnl src/Makefile.in will have src/depend appended to it;
dnl module Makefiles will have the common text in
dnl modules/common/Makefile.common appended.

dnl this actually should be conditional on having perl (ie, effectively
dnl unconditional on sane systems)
if test -r $srcdir/src/depend; then :;
else
  echo "creating $srcdir/src/depend"
  perl $srcdir/src/make-src-depend > $srcdir/src/depend
fi

for file in $internal_makefile_list; do
  case $file in
    src/Makefile.in ) file="src/Makefile.in:src/Makefile.in.in:src/depend" ;;
    modules/* ) file="${file}:${file}.in:modules/common/Makefile.common" ;;
  esac
  AC_CONFIG_FILES($file)
done
AC_CONFIG_FILES(src/paths.h src/xemacs.def.in lib-src/config.values)
test "$with_modules" = "yes" && AC_CONFIG_FILES(lib-src/ellcc.h)


dnl Normally []'s are used for quoting but this will cause problems
dnl since we use brackets in sed.  When not inside of a macro definition,
dnl two brackets become one, but inside of a macro definition you need
dnl more, or something -- I don't understand, but Martin probably does.
dnl We put the brackets back later.
dnl [ben]
dnl To insert comments that will remain in the generated file, we use the
dnl imake XCOMM convention.  Lines beginning with "XCOMM " exactly (no
dnl leading whitespace, one trailing ASCII space, case sensitive) will be
dnl transformed to shell/make/gdb comments in the generated file.
dnl [sjt]

dnl MAKE_JUNK_C(filename):
dnl Copy a .in file to junk.c in preparation for passing through the
dnl C preprocessor.  Delete comment lines, pass lines that will be
dnl interpreted by cpp through directly, and put quotes around remaining
dnl lines, to avoid problems from overly helpful preprocessors that
dnl "helpfully" put extra quotes in various places for later use by the
dnl compiler.  Later, the quotes will be removed.

m4_define([MAKE_JUNK_C],
[    rm -f junk.c
    < $1 \
      sed -e '/^# Generated/d' \
          -e 's%/\*\*/#.*%%' \
          -e 's/^ *# */#/' \
dnl Delete Makefile.in.in comment lines
          -e '/^##/d' \
dnl Pass through CPP directives unchanged
          -e '/^#/ {
p
d
}'        \
dnl Quote other lines to protect from CPP substitution
	  -e '/./ {
s/\([[\"]]\)/\\\1/g
s/^/"/
s/$/"/
}'  > junk.c;
])dnl MAKE_JUNK_C

dnl CPP_MAKEFILE(CPPFLAGS,filename):
dnl Pass junk.c through the preprocessor and put the result in FILENAME.

m4_define([CPP_MAKEFILE],
[echo creating $dir/$2
$CPP -I. -I${srcdir}/src $1 junk.c \
dnl Delete line directives inserted by $CPP
  | sed -e 's/^\#.*//'		\
dnl Delete spurious blanks inserted by $CPP
	-e 's/^[[ TAB]][[ TAB]]*$//'\
	-e 's/^ /TAB/'		\
dnl Delete blank lines
	-e '/^[[ ]]*$/d'	\
dnl Restore lines quoted above to original contents.
	-e '/^\"/ {
	s/\\\([[\"]]\)/\1/g
	s/^[[ TAB]]*\"//
	s/\"[[ TAB]]*$//
}'				\
dnl Convert comments -- must come after the unquoting operations
	-e 's/^XCOMM /\# /' > Makefile.new
    chmod 444 Makefile.new
    mv -f Makefile.new $2
])dnl CPP_MAKEFILE

AC_CONFIG_COMMANDS([default],
[for dir in . $MAKE_SUBDIR; do
  (
    cd $dir

dnl Create a GNUmakefile and Makefile from Makefile.in.
dnl Create xemacs.def from xemacs.def.in in the same fashion,
dnl if it exists (i.e. in the src/ directory).  Ditto for the
dnl debugger init files (in the src/ and etc/ directories).
    if test -r "Makefile.in"; then
      MAKE_JUNK_C(Makefile.in)
      CPP_MAKEFILE(,Makefile)
      CPP_MAKEFILE(-DUSE_GNU_MAKE,GNUmakefile)
    fi
    if test -r ".gdbinit.in"; then
      MAKE_JUNK_C(.gdbinit.in)
      CPP_MAKEFILE(,.gdbinit)
    fi
    if test -r ".dbxrc.in"; then
      MAKE_JUNK_C(.dbxrc.in)
      CPP_MAKEFILE(,.dbxrc)
    fi
    if test -r "xemacs.def.in"; then
dnl #### We should be using MAKE_JUNK_C instead of the next two lines.
dnl #### But the comments in xemacs.def.in need to be converted from C-style
dnl #### to lines beginning with ##.
      rm -f junk.c
      cp xemacs.def.in junk.c
      CPP_MAKEFILE(,xemacs.def)
    fi
    rm -f junk.c
  )
done

dnl Append AC_DEFINE information to lib-src/config.values
dnl (AC_SUBST information is already there (see config.values.sh).
sed < config.status >> lib-src/config.values \
  -e '/{ac_dA}.*{ac_dB}.*{ac_dC}.*{ac_dD}$/!d' \
  -e 's/\${ac_dA}\(.*\)\${ac_dB}.*\${ac_dC}\(.*\)\${ac_dD}/\1 \2/' \
  -e 's/^\([[^ ]]*\) $/\1 ""/' \
  -e 's/ 1$/ t/'

],
[CPP="$CPP"
 MAKE_SUBDIR="$MAKE_SUBDIR"
])dnl

AC_OUTPUT()dnl

